
BLANACE_7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b908  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800ba18  0800ba18  0000ca18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be8c  0800be8c  0000d1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800be8c  0800be8c  0000ce8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be94  0800be94  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be94  0800be94  0000ce94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be98  0800be98  0000ce98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800be9c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d00  200001f0  0800c08c  0000d1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ef0  0800c08c  0000def0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2c2  00000000  00000000  0000d219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004923  00000000  00000000  0002b4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  0002fe00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014bc  00000000  00000000  000318b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb09  00000000  00000000  00032d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020c49  00000000  00000000  0004f875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b883  00000000  00000000  000704be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bd41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081f0  00000000  00000000  0010bd84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00113f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ba00 	.word	0x0800ba00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800ba00 	.word	0x0800ba00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of BalanceTask */
  BalanceTaskHandle = osThreadNew(StartBalanceTask, NULL, &BalanceTask_attributes);
 800114c:	4a08      	ldr	r2, [pc, #32]	@ (8001170 <MX_FREERTOS_Init+0x28>)
 800114e:	2100      	movs	r1, #0
 8001150:	4808      	ldr	r0, [pc, #32]	@ (8001174 <MX_FREERTOS_Init+0x2c>)
 8001152:	f005 f80b 	bl	800616c <osThreadNew>
 8001156:	4603      	mov	r3, r0
 8001158:	4a07      	ldr	r2, [pc, #28]	@ (8001178 <MX_FREERTOS_Init+0x30>)
 800115a:	6013      	str	r3, [r2, #0]

  /* creation of nRF24Task */
  nRF24TaskHandle = osThreadNew(StartnRF24Task, NULL, &nRF24Task_attributes);
 800115c:	4a07      	ldr	r2, [pc, #28]	@ (800117c <MX_FREERTOS_Init+0x34>)
 800115e:	2100      	movs	r1, #0
 8001160:	4807      	ldr	r0, [pc, #28]	@ (8001180 <MX_FREERTOS_Init+0x38>)
 8001162:	f005 f803 	bl	800616c <osThreadNew>
 8001166:	4603      	mov	r3, r0
 8001168:	4a06      	ldr	r2, [pc, #24]	@ (8001184 <MX_FREERTOS_Init+0x3c>)
 800116a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	0800ba68 	.word	0x0800ba68
 8001174:	08001189 	.word	0x08001189
 8001178:	2000020c 	.word	0x2000020c
 800117c:	0800ba8c 	.word	0x0800ba8c
 8001180:	08001259 	.word	0x08001259
 8001184:	20000210 	.word	0x20000210

08001188 <StartBalanceTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBalanceTask */
void StartBalanceTask(void *argument)
{
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b08e      	sub	sp, #56	@ 0x38
 800118c:	af02      	add	r7, sp, #8
 800118e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBalanceTask */

  TickType_t xLastWakeTime = xTaskGetTickCount();
 8001190:	f006 f9b2 	bl	80074f8 <xTaskGetTickCount>
 8001194:	4603      	mov	r3, r0
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
  const TickType_t xFrequency = pdMS_TO_TICKS(5);
 8001198:	2305      	movs	r3, #5
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Infinite loop */
  for(;;)
  {
      // 1. 센서 데이터 읽기
      MPU6050_Read_Accel(&ax, &ay, &az);
 800119c:	f107 0218 	add.w	r2, r7, #24
 80011a0:	f107 011c 	add.w	r1, r7, #28
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 faf7 	bl	800179c <MPU6050_Read_Accel>
      MPU6050_Read_Gyro(&gx, &gy, &gz);
 80011ae:	f107 020c 	add.w	r2, r7, #12
 80011b2:	f107 0110 	add.w	r1, r7, #16
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fb6c 	bl	8001898 <MPU6050_Read_Gyro>

      // 2. 필터 + PID 계산
      output = Complementary_PID(ax, ay, az, gy);
 80011c0:	6a38      	ldr	r0, [r7, #32]
 80011c2:	69f9      	ldr	r1, [r7, #28]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	f000 fc4e 	bl	8001a68 <Complementary_PID>
 80011cc:	62b8      	str	r0, [r7, #40]	@ 0x28


      //  15도 이상이면 정지
      if (fabs(pitch) > 70.5f)
 80011ce:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <StartBalanceTask+0xc4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011d6:	491e      	ldr	r1, [pc, #120]	@ (8001250 <StartBalanceTask+0xc8>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff6f 	bl	80010bc <__aeabi_fcmpgt>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00c      	beq.n	80011fe <StartBalanceTask+0x76>
	{
          Set_Motor_PWM(0);  // 넘어진 것으로 판단 → 정지
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	f000 f9c8 	bl	800157c <Set_Motor_PWM>
          PID_Reset();
 80011ec:	f000 fd4e 	bl	8001c8c <PID_Reset>
          vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80011f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80011f6:	4618      	mov	r0, r3
 80011f8:	f005 ffe2 	bl	80071c0 <vTaskDelayUntil>
          continue;  // 다음 루프로
 80011fc:	e024      	b.n	8001248 <StartBalanceTask+0xc0>
	}

      // 3. 모터 제어
      Set_Motor_PWM(output);
 80011fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001200:	f000 f9bc 	bl	800157c <Set_Motor_PWM>

      // 5. 주기 유지
      vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001208:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800120a:	4618      	mov	r0, r3
 800120c:	f005 ffd8 	bl	80071c0 <vTaskDelayUntil>


      MPU6050_Calculate_PitchRoll(ax, ay, az, &pitch, &roll);
 8001210:	6a38      	ldr	r0, [r7, #32]
 8001212:	69f9      	ldr	r1, [r7, #28]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <StartBalanceTask+0xc4>)
 800121e:	f000 fbc3 	bl	80019a8 <MPU6050_Calculate_PitchRoll>

      //printf("%.2f,%.2f\n", pitch, roll);  // 쉼표로 구분해서 출력 (Processing에서 읽기 좋게)
      printf("pitch: %.2f, output: %.2f\n", pitch, output);
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <StartBalanceTask+0xc4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f8fe 	bl	8000428 <__aeabi_f2d>
 800122c:	4604      	mov	r4, r0
 800122e:	460d      	mov	r5, r1
 8001230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001232:	f7ff f8f9 	bl	8000428 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	e9cd 2300 	strd	r2, r3, [sp]
 800123e:	4622      	mov	r2, r4
 8001240:	462b      	mov	r3, r5
 8001242:	4804      	ldr	r0, [pc, #16]	@ (8001254 <StartBalanceTask+0xcc>)
 8001244:	f008 f9d4 	bl	80095f0 <iprintf>
      MPU6050_Read_Accel(&ax, &ay, &az);
 8001248:	e7a8      	b.n	800119c <StartBalanceTask+0x14>
 800124a:	bf00      	nop
 800124c:	2000026c 	.word	0x2000026c
 8001250:	428d0000 	.word	0x428d0000
 8001254:	0800ba30 	.word	0x0800ba30

08001258 <StartnRF24Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartnRF24Task */
void StartnRF24Task(void *argument)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartnRF24Task */

  /* Infinite loop */
  for(;;)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <StartnRF24Task+0x8>

08001264 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126a:	f107 0310 	add.w	r3, r7, #16
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001278:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <MX_GPIO_Init+0xcc>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a2c      	ldr	r2, [pc, #176]	@ (8001330 <MX_GPIO_Init+0xcc>)
 800127e:	f043 0320 	orr.w	r3, r3, #32
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b2a      	ldr	r3, [pc, #168]	@ (8001330 <MX_GPIO_Init+0xcc>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b27      	ldr	r3, [pc, #156]	@ (8001330 <MX_GPIO_Init+0xcc>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a26      	ldr	r2, [pc, #152]	@ (8001330 <MX_GPIO_Init+0xcc>)
 8001296:	f043 0310 	orr.w	r3, r3, #16
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b24      	ldr	r3, [pc, #144]	@ (8001330 <MX_GPIO_Init+0xcc>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <MX_GPIO_Init+0xcc>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a20      	ldr	r2, [pc, #128]	@ (8001330 <MX_GPIO_Init+0xcc>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_GPIO_Init+0xcc>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <MX_GPIO_Init+0xcc>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001330 <MX_GPIO_Init+0xcc>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <MX_GPIO_Init+0xcc>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0308 	and.w	r3, r3, #8
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2103      	movs	r1, #3
 80012dc:	4815      	ldr	r0, [pc, #84]	@ (8001334 <MX_GPIO_Init+0xd0>)
 80012de:	f001 fc07 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f24e 0102 	movw	r1, #57346	@ 0xe002
 80012e8:	4813      	ldr	r0, [pc, #76]	@ (8001338 <MX_GPIO_Init+0xd4>)
 80012ea:	f001 fc01 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ee:	2303      	movs	r3, #3
 80012f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	480b      	ldr	r0, [pc, #44]	@ (8001334 <MX_GPIO_Init+0xd0>)
 8001306:	f001 fa6f 	bl	80027e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800130a:	f24e 0302 	movw	r3, #57346	@ 0xe002
 800130e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2302      	movs	r3, #2
 800131a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_GPIO_Init+0xd4>)
 8001324:	f001 fa60 	bl	80027e8 <HAL_GPIO_Init>

}
 8001328:	bf00      	nop
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000
 8001334:	40011000 	.word	0x40011000
 8001338:	40010c00 	.word	0x40010c00

0800133c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <MX_I2C1_Init+0x50>)
 8001342:	4a13      	ldr	r2, [pc, #76]	@ (8001390 <MX_I2C1_Init+0x54>)
 8001344:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001346:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_I2C1_Init+0x50>)
 8001348:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <MX_I2C1_Init+0x58>)
 800134a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <MX_I2C1_Init+0x50>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <MX_I2C1_Init+0x50>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_I2C1_Init+0x50>)
 800135a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800135e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <MX_I2C1_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_I2C1_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800136c:	4b07      	ldr	r3, [pc, #28]	@ (800138c <MX_I2C1_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <MX_I2C1_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001378:	4804      	ldr	r0, [pc, #16]	@ (800138c <MX_I2C1_Init+0x50>)
 800137a:	f001 fbd1 	bl	8002b20 <HAL_I2C_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001384:	f000 f8f4 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000214 	.word	0x20000214
 8001390:	40005400 	.word	0x40005400
 8001394:	000186a0 	.word	0x000186a0

08001398 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	@ 0x28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001428 <HAL_I2C_MspInit+0x90>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d132      	bne.n	800141e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	4b1c      	ldr	r3, [pc, #112]	@ (800142c <HAL_I2C_MspInit+0x94>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	4a1b      	ldr	r2, [pc, #108]	@ (800142c <HAL_I2C_MspInit+0x94>)
 80013be:	f043 0308 	orr.w	r3, r3, #8
 80013c2:	6193      	str	r3, [r2, #24]
 80013c4:	4b19      	ldr	r3, [pc, #100]	@ (800142c <HAL_I2C_MspInit+0x94>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d6:	2312      	movs	r3, #18
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	4812      	ldr	r0, [pc, #72]	@ (8001430 <HAL_I2C_MspInit+0x98>)
 80013e6:	f001 f9ff 	bl	80027e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80013ea:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <HAL_I2C_MspInit+0x9c>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80013f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fa:	f043 0302 	orr.w	r3, r3, #2
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001400:	4a0c      	ldr	r2, [pc, #48]	@ (8001434 <HAL_I2C_MspInit+0x9c>)
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001406:	4b09      	ldr	r3, [pc, #36]	@ (800142c <HAL_I2C_MspInit+0x94>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a08      	ldr	r2, [pc, #32]	@ (800142c <HAL_I2C_MspInit+0x94>)
 800140c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_I2C_MspInit+0x94>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	@ 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40005400 	.word	0x40005400
 800142c:	40021000 	.word	0x40021000
 8001430:	40010c00 	.word	0x40010c00
 8001434:	40010000 	.word	0x40010000

08001438 <__io_putchar>:
/** @brief Retargets the C library printf function to the USART.
 *  @param None
 *  @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop
     until the end of transmission */
  if(ch == '\n')
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b0a      	cmp	r3, #10
 8001444:	d106      	bne.n	8001454 <__io_putchar+0x1c>
    HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 8001446:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800144a:	2201      	movs	r2, #1
 800144c:	4907      	ldr	r1, [pc, #28]	@ (800146c <__io_putchar+0x34>)
 800144e:	4808      	ldr	r0, [pc, #32]	@ (8001470 <__io_putchar+0x38>)
 8001450:	f004 f83a 	bl	80054c8 <HAL_UART_Transmit>
   HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8001454:	1d39      	adds	r1, r7, #4
 8001456:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800145a:	2201      	movs	r2, #1
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <__io_putchar+0x38>)
 800145e:	f004 f833 	bl	80054c8 <HAL_UART_Transmit>
}
 8001462:	bf00      	nop
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	0800ba4c 	.word	0x0800ba4c
 8001470:	20000370 	.word	0x20000370

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001478:	f000 ffce 	bl	8002418 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147c:	f000 f820 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f7ff fef0 	bl	8001264 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001484:	f000 fe40 	bl	8002108 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001488:	f7ff ff58 	bl	800133c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800148c:	f000 ff22 	bl	80022d4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001490:	f000 fc0e 	bl	8001cb0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  MPU6050_Init(); // 센서 초기화
 8001494:	f000 f932 	bl	80016fc <MPU6050_Init>
  MPU6050_Calibrate_Gyro();
 8001498:	f000 f8fa 	bl	8001690 <MPU6050_Calibrate_Gyro>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800149c:	2100      	movs	r1, #0
 800149e:	4807      	ldr	r0, [pc, #28]	@ (80014bc <main+0x48>)
 80014a0:	f003 f962 	bl	8004768 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014a4:	2104      	movs	r1, #4
 80014a6:	4805      	ldr	r0, [pc, #20]	@ (80014bc <main+0x48>)
 80014a8:	f003 f95e 	bl	8004768 <HAL_TIM_PWM_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014ac:	f004 fe16 	bl	80060dc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80014b0:	f7ff fe4a 	bl	8001148 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014b4:	f004 fe34 	bl	8006120 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <main+0x44>
 80014bc:	20000328 	.word	0x20000328

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b090      	sub	sp, #64	@ 0x40
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	2228      	movs	r2, #40	@ 0x28
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f008 f8e3 	bl	800969a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f0:	2301      	movs	r3, #1
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f4:	2302      	movs	r3, #2
 80014f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001502:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001504:	f107 0318 	add.w	r3, r7, #24
 8001508:	4618      	mov	r0, r3
 800150a:	f002 fb6f 	bl	8003bec <HAL_RCC_OscConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001514:	f000 f82c 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001518:	230f      	movs	r3, #15
 800151a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151c:	2302      	movs	r3, #2
 800151e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001524:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001528:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2102      	movs	r1, #2
 8001532:	4618      	mov	r0, r3
 8001534:	f002 fddc 	bl	80040f0 <HAL_RCC_ClockConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800153e:	f000 f817 	bl	8001570 <Error_Handler>
  }
}
 8001542:	bf00      	nop
 8001544:	3740      	adds	r7, #64	@ 0x40
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a04      	ldr	r2, [pc, #16]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800155e:	f000 ff71 	bl	8002444 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40000800 	.word	0x40000800

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <Error_Handler+0x8>

0800157c <Set_Motor_PWM>:
extern TIM_HandleTypeDef htim3;  // PWM 타이머
#define MIN_PWM 100  // 모터가 움직이기 시작하는 최소 PWM 값 (실험으로 확인 필요)
#define MAX_PWM 999            // PWM 최대값 (타이머 Period 기준)

void Set_Motor_PWM(float pid_output)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    int pwm = (int)fabsf(pid_output);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fdb6 	bl	80010fc <__aeabi_f2iz>
 8001590:	4603      	mov	r3, r0
 8001592:	60fb      	str	r3, [r7, #12]
    // PID 출력이 0이 아닌 경우, PWM을 최소값 이상으로 보정
    if (pid_output != 0 && pwm < MIN_PWM)
 8001594:	f04f 0100 	mov.w	r1, #0
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff fd67 	bl	800106c <__aeabi_fcmpeq>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d104      	bne.n	80015ae <Set_Motor_PWM+0x32>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b63      	cmp	r3, #99	@ 0x63
 80015a8:	dc01      	bgt.n	80015ae <Set_Motor_PWM+0x32>
      {
	pwm = MIN_PWM;
 80015aa:	2364      	movs	r3, #100	@ 0x64
 80015ac:	60fb      	str	r3, [r7, #12]
      }
    // 최대 PWM 값 초과 방지
    if (pwm > MAX_PWM)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015b4:	db02      	blt.n	80015bc <Set_Motor_PWM+0x40>
      {
	pwm = MAX_PWM;
 80015b6:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015ba:	60fb      	str	r3, [r7, #12]
      }

    if (pid_output > 0)
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fd7b 	bl	80010bc <__aeabi_fcmpgt>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d017      	beq.n	80015fc <Set_Motor_PWM+0x80>
      {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2102      	movs	r1, #2
 80015d0:	482d      	ldr	r0, [pc, #180]	@ (8001688 <Set_Motor_PWM+0x10c>)
 80015d2:	f001 fa8d 	bl	8002af0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015dc:	482a      	ldr	r0, [pc, #168]	@ (8001688 <Set_Motor_PWM+0x10c>)
 80015de:	f001 fa87 	bl	8002af0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015e8:	4827      	ldr	r0, [pc, #156]	@ (8001688 <Set_Motor_PWM+0x10c>)
 80015ea:	f001 fa81 	bl	8002af0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80015ee:	2201      	movs	r2, #1
 80015f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015f4:	4824      	ldr	r0, [pc, #144]	@ (8001688 <Set_Motor_PWM+0x10c>)
 80015f6:	f001 fa7b 	bl	8002af0 <HAL_GPIO_WritePin>
 80015fa:	e038      	b.n	800166e <Set_Motor_PWM+0xf2>
      }

    else if (pid_output < 0)
 80015fc:	f04f 0100 	mov.w	r1, #0
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff fd3d 	bl	8001080 <__aeabi_fcmplt>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d017      	beq.n	800163c <Set_Motor_PWM+0xc0>
      {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   // AIN1 (왼쪽 전진)
 800160c:	2201      	movs	r2, #1
 800160e:	2102      	movs	r1, #2
 8001610:	481d      	ldr	r0, [pc, #116]	@ (8001688 <Set_Motor_PWM+0x10c>)
 8001612:	f001 fa6d 	bl	8002af0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // AIN2
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800161c:	481a      	ldr	r0, [pc, #104]	@ (8001688 <Set_Motor_PWM+0x10c>)
 800161e:	f001 fa67 	bl	8002af0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);   // BIN1 (오른쪽 전진)
 8001622:	2201      	movs	r2, #1
 8001624:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001628:	4817      	ldr	r0, [pc, #92]	@ (8001688 <Set_Motor_PWM+0x10c>)
 800162a:	f001 fa61 	bl	8002af0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET); // BIN2
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001634:	4814      	ldr	r0, [pc, #80]	@ (8001688 <Set_Motor_PWM+0x10c>)
 8001636:	f001 fa5b 	bl	8002af0 <HAL_GPIO_WritePin>
 800163a:	e018      	b.n	800166e <Set_Motor_PWM+0xf2>

    else
      {
        // 정지 (PWM = 0)
	// Short Brake
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2102      	movs	r1, #2
 8001640:	4811      	ldr	r0, [pc, #68]	@ (8001688 <Set_Motor_PWM+0x10c>)
 8001642:	f001 fa55 	bl	8002af0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800164c:	480e      	ldr	r0, [pc, #56]	@ (8001688 <Set_Motor_PWM+0x10c>)
 800164e:	f001 fa4f 	bl	8002af0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001652:	2201      	movs	r2, #1
 8001654:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001658:	480b      	ldr	r0, [pc, #44]	@ (8001688 <Set_Motor_PWM+0x10c>)
 800165a:	f001 fa49 	bl	8002af0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001664:	4808      	ldr	r0, [pc, #32]	@ (8001688 <Set_Motor_PWM+0x10c>)
 8001666:	f001 fa43 	bl	8002af0 <HAL_GPIO_WritePin>
        pwm = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
      }

    // PWM 듀티 설정 (왼쪽/오른쪽 모터)
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);  // 왼쪽 모터 (PA6)
 800166e:	4b07      	ldr	r3, [pc, #28]	@ (800168c <Set_Motor_PWM+0x110>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm);  // 오른쪽 모터 (PA7)
 8001676:	4b05      	ldr	r3, [pc, #20]	@ (800168c <Set_Motor_PWM+0x110>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40010c00 	.word	0x40010c00
 800168c:	20000328 	.word	0x20000328

08001690 <MPU6050_Calibrate_Gyro>:
float gyro_bias_y = 0.0f;
extern I2C_HandleTypeDef hi2c1;  // I2C1 핸들러 사용


void MPU6050_Calibrate_Gyro(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
    float sum_gy = 0.0f;
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
    int num_samples = 100;
 800169c:	2364      	movs	r3, #100	@ 0x64
 800169e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < num_samples; i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	e013      	b.n	80016ce <MPU6050_Calibrate_Gyro+0x3e>
      {
        float gx, gy, gz;
        MPU6050_Read_Gyro(&gx, &gy, &gz);
 80016a6:	463a      	mov	r2, r7
 80016a8:	1d39      	adds	r1, r7, #4
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f8f2 	bl	8001898 <MPU6050_Read_Gyro>
        sum_gy += gy;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4619      	mov	r1, r3
 80016b8:	6978      	ldr	r0, [r7, #20]
 80016ba:	f7ff fa3b 	bl	8000b34 <__addsf3>
 80016be:	4603      	mov	r3, r0
 80016c0:	617b      	str	r3, [r7, #20]
        HAL_Delay(10); // 10ms 간격으로 샘플링
 80016c2:	200a      	movs	r0, #10
 80016c4:	f000 feda 	bl	800247c <HAL_Delay>
    for (int i = 0; i < num_samples; i++)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	3301      	adds	r3, #1
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	dbe7      	blt.n	80016a6 <MPU6050_Calibrate_Gyro+0x16>
      }
    gyro_bias_y = sum_gy / num_samples;
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f7ff fae0 	bl	8000c9c <__aeabi_i2f>
 80016dc:	4603      	mov	r3, r0
 80016de:	4619      	mov	r1, r3
 80016e0:	6978      	ldr	r0, [r7, #20]
 80016e2:	f7ff fbe3 	bl	8000eac <__aeabi_fdiv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <MPU6050_Calibrate_Gyro+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000268 	.word	0x20000268

080016fc <MPU6050_Init>:

void MPU6050_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af04      	add	r7, sp, #16
    uint8_t data;

    // 1. Power Management 1 (레지스터 0x6B) - 슬립 해제
    data = 0x00;
 8001702:	2300      	movs	r3, #0
 8001704:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x6B, 1, &data, 1, 100);
 8001706:	2364      	movs	r3, #100	@ 0x64
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	2301      	movs	r3, #1
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	1dfb      	adds	r3, r7, #7
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	226b      	movs	r2, #107	@ 0x6b
 8001716:	21d0      	movs	r1, #208	@ 0xd0
 8001718:	481f      	ldr	r0, [pc, #124]	@ (8001798 <MPU6050_Init+0x9c>)
 800171a:	f001 fb45 	bl	8002da8 <HAL_I2C_Mem_Write>

    // 2. Sample Rate Divider (레지스터 0x19) - 샘플링 주기 설정 (1kHz / (1 + 7) = 125Hz)
    data = 0x07;
 800171e:	2307      	movs	r3, #7
 8001720:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x19, 1, &data, 1, 100);
 8001722:	2364      	movs	r3, #100	@ 0x64
 8001724:	9302      	str	r3, [sp, #8]
 8001726:	2301      	movs	r3, #1
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2301      	movs	r3, #1
 8001730:	2219      	movs	r2, #25
 8001732:	21d0      	movs	r1, #208	@ 0xd0
 8001734:	4818      	ldr	r0, [pc, #96]	@ (8001798 <MPU6050_Init+0x9c>)
 8001736:	f001 fb37 	bl	8002da8 <HAL_I2C_Mem_Write>

    // 3. Configuration (레지스터 0x1A) - 저역통과필터 (DLPF_CFG = 3 → 약 44Hz 대역폭)
    data = 0x03;
 800173a:	2303      	movs	r3, #3
 800173c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1A, 1, &data, 1, 100);
 800173e:	2364      	movs	r3, #100	@ 0x64
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	2301      	movs	r3, #1
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2301      	movs	r3, #1
 800174c:	221a      	movs	r2, #26
 800174e:	21d0      	movs	r1, #208	@ 0xd0
 8001750:	4811      	ldr	r0, [pc, #68]	@ (8001798 <MPU6050_Init+0x9c>)
 8001752:	f001 fb29 	bl	8002da8 <HAL_I2C_Mem_Write>

    // 4. Gyro Configuration (레지스터 0x1B) - ±250°/s 범위 (값 = 0x00)
    data = 0x00;
 8001756:	2300      	movs	r3, #0
 8001758:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1B, 1, &data, 1, 100);
 800175a:	2364      	movs	r3, #100	@ 0x64
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2301      	movs	r3, #1
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	1dfb      	adds	r3, r7, #7
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2301      	movs	r3, #1
 8001768:	221b      	movs	r2, #27
 800176a:	21d0      	movs	r1, #208	@ 0xd0
 800176c:	480a      	ldr	r0, [pc, #40]	@ (8001798 <MPU6050_Init+0x9c>)
 800176e:	f001 fb1b 	bl	8002da8 <HAL_I2C_Mem_Write>

    // 5. Accel Configuration (레지스터 0x1C) - ±2g 범위 (값 = 0x00)
    data = 0x00;
 8001772:	2300      	movs	r3, #0
 8001774:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, 0x1C, 1, &data, 1, 100);
 8001776:	2364      	movs	r3, #100	@ 0x64
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	2301      	movs	r3, #1
 800177c:	9301      	str	r3, [sp, #4]
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	221c      	movs	r2, #28
 8001786:	21d0      	movs	r1, #208	@ 0xd0
 8001788:	4803      	ldr	r0, [pc, #12]	@ (8001798 <MPU6050_Init+0x9c>)
 800178a:	f001 fb0d 	bl	8002da8 <HAL_I2C_Mem_Write>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000214 	.word	0x20000214

0800179c <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(float* ax, float* ay, float* az)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08e      	sub	sp, #56	@ 0x38
 80017a0:	af04      	add	r7, sp, #16
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  float last_ax = 0.0f, last_ay = 0.0f, last_az = 0.0f;
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	623b      	str	r3, [r7, #32]
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    uint8_t buf[6];
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, 1, buf, 6, 100) == HAL_OK)
 80017ba:	2364      	movs	r3, #100	@ 0x64
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	2306      	movs	r3, #6
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	223b      	movs	r2, #59	@ 0x3b
 80017cc:	21d0      	movs	r1, #208	@ 0xd0
 80017ce:	4831      	ldr	r0, [pc, #196]	@ (8001894 <MPU6050_Read_Accel+0xf8>)
 80017d0:	f001 fbe4 	bl	8002f9c <HAL_I2C_Mem_Read>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d14e      	bne.n	8001878 <MPU6050_Read_Accel+0xdc>
      {
        int16_t raw_ax = (int16_t)(buf[0] << 8 | buf[1]);
 80017da:	7c3b      	ldrb	r3, [r7, #16]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	7c7b      	ldrb	r3, [r7, #17]
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	837b      	strh	r3, [r7, #26]
        int16_t raw_ay = (int16_t)(buf[2] << 8 | buf[3]);
 80017ea:	7cbb      	ldrb	r3, [r7, #18]
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	b21a      	sxth	r2, r3
 80017f2:	7cfb      	ldrb	r3, [r7, #19]
 80017f4:	b21b      	sxth	r3, r3
 80017f6:	4313      	orrs	r3, r2
 80017f8:	833b      	strh	r3, [r7, #24]
        int16_t raw_az = (int16_t)(buf[4] << 8 | buf[5]);
 80017fa:	7d3b      	ldrb	r3, [r7, #20]
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	b21a      	sxth	r2, r3
 8001802:	7d7b      	ldrb	r3, [r7, #21]
 8001804:	b21b      	sxth	r3, r3
 8001806:	4313      	orrs	r3, r2
 8001808:	82fb      	strh	r3, [r7, #22]
        *ax = raw_ax / 16384.0f;
 800180a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fa44 	bl	8000c9c <__aeabi_i2f>
 8001814:	4603      	mov	r3, r0
 8001816:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fb46 	bl	8000eac <__aeabi_fdiv>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	601a      	str	r2, [r3, #0]
        *ay = raw_ay / 16384.0f;
 8001828:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fa35 	bl	8000c9c <__aeabi_i2f>
 8001832:	4603      	mov	r3, r0
 8001834:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fb37 	bl	8000eac <__aeabi_fdiv>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	601a      	str	r2, [r3, #0]
        *az = raw_az / 16384.0f;
 8001846:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fa26 	bl	8000c9c <__aeabi_i2f>
 8001850:	4603      	mov	r3, r0
 8001852:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fb28 	bl	8000eac <__aeabi_fdiv>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	601a      	str	r2, [r3, #0]
        last_ax = *ax;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
        last_ay = *ay;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	623b      	str	r3, [r7, #32]
        last_az = *az;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	61fb      	str	r3, [r7, #28]
      {
        *ax = last_ax;
        *ay = last_ay;
        *az = last_az;
      }
}
 8001876:	e008      	b.n	800188a <MPU6050_Read_Accel+0xee>
        *ax = last_ax;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800187c:	601a      	str	r2, [r3, #0]
        *ay = last_ay;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	6a3a      	ldr	r2, [r7, #32]
 8001882:	601a      	str	r2, [r3, #0]
        *az = last_az;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	601a      	str	r2, [r3, #0]
}
 800188a:	bf00      	nop
 800188c:	3728      	adds	r7, #40	@ 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000214 	.word	0x20000214

08001898 <MPU6050_Read_Gyro>:



void MPU6050_Read_Gyro(float* gx, float* gy, float* gz)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08e      	sub	sp, #56	@ 0x38
 800189c:	af04      	add	r7, sp, #16
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  float last_gx = 0.0f, last_gy = 0.0f, last_gz = 0.0f;
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
    uint8_t buf[6];
    int16_t raw_gx, raw_gy, raw_gz;

    // GYRO_XOUT_H = 0x43
    if (HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x43, 1, buf, 6, 100) == HAL_OK)
 80018b6:	2364      	movs	r3, #100	@ 0x64
 80018b8:	9302      	str	r3, [sp, #8]
 80018ba:	2306      	movs	r3, #6
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	f107 0310 	add.w	r3, r7, #16
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2301      	movs	r3, #1
 80018c6:	2243      	movs	r2, #67	@ 0x43
 80018c8:	21d0      	movs	r1, #208	@ 0xd0
 80018ca:	4833      	ldr	r0, [pc, #204]	@ (8001998 <MPU6050_Read_Gyro+0x100>)
 80018cc:	f001 fb66 	bl	8002f9c <HAL_I2C_Mem_Read>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d153      	bne.n	800197e <MPU6050_Read_Gyro+0xe6>
    {
        raw_gx = (int16_t)(buf[0] << 8 | buf[1]);
 80018d6:	7c3b      	ldrb	r3, [r7, #16]
 80018d8:	b21b      	sxth	r3, r3
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	b21a      	sxth	r2, r3
 80018de:	7c7b      	ldrb	r3, [r7, #17]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	837b      	strh	r3, [r7, #26]
        raw_gy = (int16_t)(buf[2] << 8 | buf[3]);
 80018e6:	7cbb      	ldrb	r3, [r7, #18]
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	7cfb      	ldrb	r3, [r7, #19]
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	833b      	strh	r3, [r7, #24]
        raw_gz = (int16_t)(buf[4] << 8 | buf[5]);
 80018f6:	7d3b      	ldrb	r3, [r7, #20]
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	7d7b      	ldrb	r3, [r7, #21]
 8001900:	b21b      	sxth	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	82fb      	strh	r3, [r7, #22]

        // ±250°/s 범위일 때 정규화: 131 LSB = 1°/s
        *gx = raw_gx / 131.0f;
 8001906:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f9c6 	bl	8000c9c <__aeabi_i2f>
 8001910:	4603      	mov	r3, r0
 8001912:	4922      	ldr	r1, [pc, #136]	@ (800199c <MPU6050_Read_Gyro+0x104>)
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fac9 	bl	8000eac <__aeabi_fdiv>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	601a      	str	r2, [r3, #0]
        *gy = (raw_gy / 131.0f) - gyro_bias_y; // 바이어스 보정
 8001922:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f9b8 	bl	8000c9c <__aeabi_i2f>
 800192c:	4603      	mov	r3, r0
 800192e:	491b      	ldr	r1, [pc, #108]	@ (800199c <MPU6050_Read_Gyro+0x104>)
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fabb 	bl	8000eac <__aeabi_fdiv>
 8001936:	4603      	mov	r3, r0
 8001938:	461a      	mov	r2, r3
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <MPU6050_Read_Gyro+0x108>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f7ff f8f5 	bl	8000b30 <__aeabi_fsub>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	601a      	str	r2, [r3, #0]
        *gz = raw_gz / 131.0f;
 800194e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f9a2 	bl	8000c9c <__aeabi_i2f>
 8001958:	4603      	mov	r3, r0
 800195a:	4910      	ldr	r1, [pc, #64]	@ (800199c <MPU6050_Read_Gyro+0x104>)
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff faa5 	bl	8000eac <__aeabi_fdiv>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	601a      	str	r2, [r3, #0]
        last_gx = *gx;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
	last_gy = *gy;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	623b      	str	r3, [r7, #32]
	last_gz = *gz;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	61fb      	str	r3, [r7, #28]
      {
	  *gx = last_gx;
	  *gy = last_gy;
	  *gz = last_gz;
      }
}
 800197c:	e008      	b.n	8001990 <MPU6050_Read_Gyro+0xf8>
	  *gx = last_gx;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001982:	601a      	str	r2, [r3, #0]
	  *gy = last_gy;
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	6a3a      	ldr	r2, [r7, #32]
 8001988:	601a      	str	r2, [r3, #0]
	  *gz = last_gz;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	601a      	str	r2, [r3, #0]
}
 8001990:	bf00      	nop
 8001992:	3728      	adds	r7, #40	@ 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000214 	.word	0x20000214
 800199c:	43030000 	.word	0x43030000
 80019a0:	20000268 	.word	0x20000268
 80019a4:	00000000 	.word	0x00000000

080019a8 <MPU6050_Calculate_PitchRoll>:


// Pitch/Roll 계산 함수 (가속도 기반)
void MPU6050_Calculate_PitchRoll(float ax, float ay, float az, float* pitch, float* roll)
{
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
    *pitch = atan2f(-ax, sqrtf(ay * ay + az * az)) * 180.0f / M_PI;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	68b8      	ldr	r0, [r7, #8]
 80019c0:	f7ff f9c0 	bl	8000d44 <__aeabi_fmul>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461d      	mov	r5, r3
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff f9ba 	bl	8000d44 <__aeabi_fmul>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4619      	mov	r1, r3
 80019d4:	4628      	mov	r0, r5
 80019d6:	f7ff f8ad 	bl	8000b34 <__addsf3>
 80019da:	4603      	mov	r3, r0
 80019dc:	4618      	mov	r0, r3
 80019de:	f009 fded 	bl	800b5bc <sqrtf>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4619      	mov	r1, r3
 80019e6:	4620      	mov	r0, r4
 80019e8:	f009 fde6 	bl	800b5b8 <atan2f>
 80019ec:	4603      	mov	r3, r0
 80019ee:	491c      	ldr	r1, [pc, #112]	@ (8001a60 <MPU6050_Calculate_PitchRoll+0xb8>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f9a7 	bl	8000d44 <__aeabi_fmul>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fd15 	bl	8000428 <__aeabi_f2d>
 80019fe:	a316      	add	r3, pc, #88	@ (adr r3, 8001a58 <MPU6050_Calculate_PitchRoll+0xb0>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe fe92 	bl	800072c <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f7ff f83a 	bl	8000a88 <__aeabi_d2f>
 8001a14:	4602      	mov	r2, r0
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	601a      	str	r2, [r3, #0]
    *roll  = atan2f(ay, az) * 180.0f / M_PI;
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	68b8      	ldr	r0, [r7, #8]
 8001a1e:	f009 fdcb 	bl	800b5b8 <atan2f>
 8001a22:	4603      	mov	r3, r0
 8001a24:	490e      	ldr	r1, [pc, #56]	@ (8001a60 <MPU6050_Calculate_PitchRoll+0xb8>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff f98c 	bl	8000d44 <__aeabi_fmul>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fcfa 	bl	8000428 <__aeabi_f2d>
 8001a34:	a308      	add	r3, pc, #32	@ (adr r3, 8001a58 <MPU6050_Calculate_PitchRoll+0xb0>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	f7fe fe77 	bl	800072c <__aeabi_ddiv>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f81f 	bl	8000a88 <__aeabi_d2f>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	601a      	str	r2, [r3, #0]
}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bdb0      	pop	{r4, r5, r7, pc}
 8001a58:	54442d18 	.word	0x54442d18
 8001a5c:	400921fb 	.word	0x400921fb
 8001a60:	43340000 	.word	0x43340000
 8001a64:	00000000 	.word	0x00000000

08001a68 <Complementary_PID>:

float deadband = 0.2f;  // 데드밴드 범위 (도 단위, 조정 가능)


float Complementary_PID(float ax, float ay, float az, float gyro_y)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
    float pid_output = 0.0f;
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

    // 가속도 기반 Pitch 계산
    acc_pitch = atan2f(-ax, sqrtf(ay * ay + az * az)) * 180.0f / M_PI;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
 8001a82:	68b9      	ldr	r1, [r7, #8]
 8001a84:	68b8      	ldr	r0, [r7, #8]
 8001a86:	f7ff f95d 	bl	8000d44 <__aeabi_fmul>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461d      	mov	r5, r3
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff f957 	bl	8000d44 <__aeabi_fmul>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	f7ff f84a 	bl	8000b34 <__addsf3>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f009 fd8a 	bl	800b5bc <sqrtf>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4620      	mov	r0, r4
 8001aae:	f009 fd83 	bl	800b5b8 <atan2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4966      	ldr	r1, [pc, #408]	@ (8001c50 <Complementary_PID+0x1e8>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f944 	bl	8000d44 <__aeabi_fmul>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fcb2 	bl	8000428 <__aeabi_f2d>
 8001ac4:	a360      	add	r3, pc, #384	@ (adr r3, 8001c48 <Complementary_PID+0x1e0>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fe2f 	bl	800072c <__aeabi_ddiv>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7fe ffd7 	bl	8000a88 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4a5d      	ldr	r2, [pc, #372]	@ (8001c54 <Complementary_PID+0x1ec>)
 8001ade:	6013      	str	r3, [r2, #0]
/*    float pitch_offset = -0.3f;  // 튜닝 필요
    acc_pitch += pitch_offset;*/


    // 자이로 적분 (각속도 * 시간)
    pitch = alpha * (pitch + gyro_y * dt) + (1 - alpha) * acc_pitch;
 8001ae0:	4b5d      	ldr	r3, [pc, #372]	@ (8001c58 <Complementary_PID+0x1f0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6839      	ldr	r1, [r7, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f92c 	bl	8000d44 <__aeabi_fmul>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461a      	mov	r2, r3
 8001af0:	4b5a      	ldr	r3, [pc, #360]	@ (8001c5c <Complementary_PID+0x1f4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f7ff f81c 	bl	8000b34 <__addsf3>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	4b57      	ldr	r3, [pc, #348]	@ (8001c60 <Complementary_PID+0x1f8>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	4610      	mov	r0, r2
 8001b08:	f7ff f91c 	bl	8000d44 <__aeabi_fmul>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461c      	mov	r4, r3
 8001b10:	4b53      	ldr	r3, [pc, #332]	@ (8001c60 <Complementary_PID+0x1f8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001b1a:	f7ff f809 	bl	8000b30 <__aeabi_fsub>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b4c      	ldr	r3, [pc, #304]	@ (8001c54 <Complementary_PID+0x1ec>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4619      	mov	r1, r3
 8001b28:	4610      	mov	r0, r2
 8001b2a:	f7ff f90b 	bl	8000d44 <__aeabi_fmul>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4619      	mov	r1, r3
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7fe fffe 	bl	8000b34 <__addsf3>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b47      	ldr	r3, [pc, #284]	@ (8001c5c <Complementary_PID+0x1f4>)
 8001b3e:	601a      	str	r2, [r3, #0]


    // PID 제어
    error = set_point - pitch;
 8001b40:	4b48      	ldr	r3, [pc, #288]	@ (8001c64 <Complementary_PID+0x1fc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a45      	ldr	r2, [pc, #276]	@ (8001c5c <Complementary_PID+0x1f4>)
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fff0 	bl	8000b30 <__aeabi_fsub>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b44      	ldr	r3, [pc, #272]	@ (8001c68 <Complementary_PID+0x200>)
 8001b56:	601a      	str	r2, [r3, #0]

    // 데드밴드 적용
    if (fabs(error) < deadband)
 8001b58:	4b43      	ldr	r3, [pc, #268]	@ (8001c68 <Complementary_PID+0x200>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b60:	4a42      	ldr	r2, [pc, #264]	@ (8001c6c <Complementary_PID+0x204>)
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fa8a 	bl	8001080 <__aeabi_fcmplt>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <Complementary_PID+0x112>
      {
	  pid_output = 0.0f;
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e061      	b.n	8001c3e <Complementary_PID+0x1d6>
      }
    else
      {
	  // PID 계산 (기존 로직 유지)
	  integral += error * dt;
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c68 <Complementary_PID+0x200>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a36      	ldr	r2, [pc, #216]	@ (8001c58 <Complementary_PID+0x1f0>)
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f8dd 	bl	8000d44 <__aeabi_fmul>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b38      	ldr	r3, [pc, #224]	@ (8001c70 <Complementary_PID+0x208>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f7fe ffcd 	bl	8000b34 <__addsf3>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b34      	ldr	r3, [pc, #208]	@ (8001c70 <Complementary_PID+0x208>)
 8001ba0:	601a      	str	r2, [r3, #0]
	  float derivative = (error - prev_error) / dt;
 8001ba2:	4b31      	ldr	r3, [pc, #196]	@ (8001c68 <Complementary_PID+0x200>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a33      	ldr	r2, [pc, #204]	@ (8001c74 <Complementary_PID+0x20c>)
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe ffbf 	bl	8000b30 <__aeabi_fsub>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <Complementary_PID+0x1f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	f7ff f975 	bl	8000eac <__aeabi_fdiv>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	613b      	str	r3, [r7, #16]
	  prev_error = error;
 8001bc6:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <Complementary_PID+0x200>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a2a      	ldr	r2, [pc, #168]	@ (8001c74 <Complementary_PID+0x20c>)
 8001bcc:	6013      	str	r3, [r2, #0]
	  pid_output = Kp * error + Ki * integral + Kd * derivative;
 8001bce:	4b2a      	ldr	r3, [pc, #168]	@ (8001c78 <Complementary_PID+0x210>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a25      	ldr	r2, [pc, #148]	@ (8001c68 <Complementary_PID+0x200>)
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff f8b3 	bl	8000d44 <__aeabi_fmul>
 8001bde:	4603      	mov	r3, r0
 8001be0:	461c      	mov	r4, r3
 8001be2:	4b26      	ldr	r3, [pc, #152]	@ (8001c7c <Complementary_PID+0x214>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a22      	ldr	r2, [pc, #136]	@ (8001c70 <Complementary_PID+0x208>)
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff f8a9 	bl	8000d44 <__aeabi_fmul>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7fe ff9c 	bl	8000b34 <__addsf3>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461c      	mov	r4, r3
 8001c00:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <Complementary_PID+0x218>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6939      	ldr	r1, [r7, #16]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f89c 	bl	8000d44 <__aeabi_fmul>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4620      	mov	r0, r4
 8001c12:	f7fe ff8f 	bl	8000b34 <__addsf3>
 8001c16:	4603      	mov	r3, r0
 8001c18:	617b      	str	r3, [r7, #20]

	  // ±1000 클램핑은 유지
	  if (pid_output > 1000.0f) pid_output = 1000.0f;
 8001c1a:	491a      	ldr	r1, [pc, #104]	@ (8001c84 <Complementary_PID+0x21c>)
 8001c1c:	6978      	ldr	r0, [r7, #20]
 8001c1e:	f7ff fa4d 	bl	80010bc <__aeabi_fcmpgt>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <Complementary_PID+0x1c4>
 8001c28:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <Complementary_PID+0x21c>)
 8001c2a:	617b      	str	r3, [r7, #20]
	  if (pid_output < -1000.0f) pid_output = -1000.0f;
 8001c2c:	4916      	ldr	r1, [pc, #88]	@ (8001c88 <Complementary_PID+0x220>)
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff fa26 	bl	8001080 <__aeabi_fcmplt>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <Complementary_PID+0x1d6>
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <Complementary_PID+0x220>)
 8001c3c:	617b      	str	r3, [r7, #20]
      }

    return pid_output;
 8001c3e:	697b      	ldr	r3, [r7, #20]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bdb0      	pop	{r4, r5, r7, pc}
 8001c48:	54442d18 	.word	0x54442d18
 8001c4c:	400921fb 	.word	0x400921fb
 8001c50:	43340000 	.word	0x43340000
 8001c54:	20000270 	.word	0x20000270
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	2000026c 	.word	0x2000026c
 8001c60:	20000004 	.word	0x20000004
 8001c64:	20000274 	.word	0x20000274
 8001c68:	20000278 	.word	0x20000278
 8001c6c:	20000014 	.word	0x20000014
 8001c70:	20000280 	.word	0x20000280
 8001c74:	2000027c 	.word	0x2000027c
 8001c78:	20000008 	.word	0x20000008
 8001c7c:	2000000c 	.word	0x2000000c
 8001c80:	20000010 	.word	0x20000010
 8001c84:	447a0000 	.word	0x447a0000
 8001c88:	c47a0000 	.word	0xc47a0000

08001c8c <PID_Reset>:

void PID_Reset(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
    integral = 0.0f;
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <PID_Reset+0x1c>)
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
    prev_error = 0.0f;
 8001c98:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <PID_Reset+0x20>)
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000280 	.word	0x20000280
 8001cac:	2000027c 	.word	0x2000027c

08001cb0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	@ (8001d14 <MX_SPI1_Init+0x64>)
 8001cb6:	4a18      	ldr	r2, [pc, #96]	@ (8001d18 <MX_SPI1_Init+0x68>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cba:	4b16      	ldr	r3, [pc, #88]	@ (8001d14 <MX_SPI1_Init+0x64>)
 8001cbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc2:	4b14      	ldr	r3, [pc, #80]	@ (8001d14 <MX_SPI1_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <MX_SPI1_Init+0x64>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <MX_SPI1_Init+0x64>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <MX_SPI1_Init+0x64>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <MX_SPI1_Init+0x64>)
 8001cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <MX_SPI1_Init+0x64>)
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <MX_SPI1_Init+0x64>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cee:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <MX_SPI1_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf4:	4b07      	ldr	r3, [pc, #28]	@ (8001d14 <MX_SPI1_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <MX_SPI1_Init+0x64>)
 8001cfc:	220a      	movs	r2, #10
 8001cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d00:	4804      	ldr	r0, [pc, #16]	@ (8001d14 <MX_SPI1_Init+0x64>)
 8001d02:	f002 fbb3 	bl	800446c <HAL_SPI_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d0c:	f7ff fc30 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000284 	.word	0x20000284
 8001d18:	40013000 	.word	0x40013000

08001d1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1b      	ldr	r2, [pc, #108]	@ (8001da4 <HAL_SPI_MspInit+0x88>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d12f      	bne.n	8001d9c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <HAL_SPI_MspInit+0x8c>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4a19      	ldr	r2, [pc, #100]	@ (8001da8 <HAL_SPI_MspInit+0x8c>)
 8001d42:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d46:	6193      	str	r3, [r2, #24]
 8001d48:	4b17      	ldr	r3, [pc, #92]	@ (8001da8 <HAL_SPI_MspInit+0x8c>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d54:	4b14      	ldr	r3, [pc, #80]	@ (8001da8 <HAL_SPI_MspInit+0x8c>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a13      	ldr	r2, [pc, #76]	@ (8001da8 <HAL_SPI_MspInit+0x8c>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <HAL_SPI_MspInit+0x8c>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d6c:	23a0      	movs	r3, #160	@ 0xa0
 8001d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480b      	ldr	r0, [pc, #44]	@ (8001dac <HAL_SPI_MspInit+0x90>)
 8001d80:	f000 fd32 	bl	80027e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d84:	2340      	movs	r3, #64	@ 0x40
 8001d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	4619      	mov	r1, r3
 8001d96:	4805      	ldr	r0, [pc, #20]	@ (8001dac <HAL_SPI_MspInit+0x90>)
 8001d98:	f000 fd26 	bl	80027e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40013000 	.word	0x40013000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010800 	.word	0x40010800

08001db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001db6:	4b18      	ldr	r3, [pc, #96]	@ (8001e18 <HAL_MspInit+0x68>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	4a17      	ldr	r2, [pc, #92]	@ (8001e18 <HAL_MspInit+0x68>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6193      	str	r3, [r2, #24]
 8001dc2:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <HAL_MspInit+0x68>)
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <HAL_MspInit+0x68>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a11      	ldr	r2, [pc, #68]	@ (8001e18 <HAL_MspInit+0x68>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd8:	61d3      	str	r3, [r2, #28]
 8001dda:	4b0f      	ldr	r3, [pc, #60]	@ (8001e18 <HAL_MspInit+0x68>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	210f      	movs	r1, #15
 8001dea:	f06f 0001 	mvn.w	r0, #1
 8001dee:	f000 fc1e 	bl	800262e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <HAL_MspInit+0x6c>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <HAL_MspInit+0x6c>)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010000 	.word	0x40010000

08001e20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08e      	sub	sp, #56	@ 0x38
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e36:	4b34      	ldr	r3, [pc, #208]	@ (8001f08 <HAL_InitTick+0xe8>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a33      	ldr	r2, [pc, #204]	@ (8001f08 <HAL_InitTick+0xe8>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b31      	ldr	r3, [pc, #196]	@ (8001f08 <HAL_InitTick+0xe8>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e4e:	f107 0210 	add.w	r2, r7, #16
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f002 fab9 	bl	80043d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d103      	bne.n	8001e70 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e68:	f002 fa8a 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8001e6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8001e6e:	e004      	b.n	8001e7a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e70:	f002 fa86 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8001e74:	4603      	mov	r3, r0
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e7c:	4a23      	ldr	r2, [pc, #140]	@ (8001f0c <HAL_InitTick+0xec>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0c9b      	lsrs	r3, r3, #18
 8001e84:	3b01      	subs	r3, #1
 8001e86:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001e8a:	4a22      	ldr	r2, [pc, #136]	@ (8001f14 <HAL_InitTick+0xf4>)
 8001e8c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001e8e:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001e90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e94:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001e96:	4a1e      	ldr	r2, [pc, #120]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e9a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea8:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001eae:	4818      	ldr	r0, [pc, #96]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001eb0:	f002 fb60 	bl	8004574 <HAL_TIM_Base_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001eba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d11b      	bne.n	8001efa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001ec2:	4813      	ldr	r0, [pc, #76]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001ec4:	f002 fba6 	bl	8004614 <HAL_TIM_Base_Start_IT>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001ece:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d111      	bne.n	8001efa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ed6:	201e      	movs	r0, #30
 8001ed8:	f000 fbc5 	bl	8002666 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	d808      	bhi.n	8001ef4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	201e      	movs	r0, #30
 8001ee8:	f000 fba1 	bl	800262e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eec:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <HAL_InitTick+0xf8>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e002      	b.n	8001efa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001efa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3738      	adds	r7, #56	@ 0x38
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	431bde83 	.word	0x431bde83
 8001f10:	200002dc 	.word	0x200002dc
 8001f14:	40000800 	.word	0x40000800
 8001f18:	2000001c 	.word	0x2000001c

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <NMI_Handler+0x4>

08001f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <MemManage_Handler+0x4>

08001f34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f54:	4802      	ldr	r0, [pc, #8]	@ (8001f60 <TIM4_IRQHandler+0x10>)
 8001f56:	f002 fca9 	bl	80048ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200002dc 	.word	0x200002dc

08001f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <USART2_IRQHandler+0x10>)
 8001f6a:	f003 fb39 	bl	80055e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000370 	.word	0x20000370

08001f78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return 1;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <_kill>:

int _kill(int pid, int sig)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f90:	f007 fc34 	bl	80097fc <__errno>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2216      	movs	r2, #22
 8001f98:	601a      	str	r2, [r3, #0]
  return -1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_exit>:

void _exit (int status)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fae:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffe7 	bl	8001f86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <_exit+0x12>

08001fbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	e00a      	b.n	8001fe4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fce:	f3af 8000 	nop.w
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	60ba      	str	r2, [r7, #8]
 8001fda:	b2ca      	uxtb	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dbf0      	blt.n	8001fce <_read+0x12>
  }

  return len;
 8001fec:	687b      	ldr	r3, [r7, #4]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e009      	b.n	800201c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	60ba      	str	r2, [r7, #8]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fa11 	bl	8001438 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	3301      	adds	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbf1      	blt.n	8002008 <_write+0x12>
  }
  return len;
 8002024:	687b      	ldr	r3, [r7, #4]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_close>:

int _close(int file)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002054:	605a      	str	r2, [r3, #4]
  return 0;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <_isatty>:

int _isatty(int file)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002098:	4a14      	ldr	r2, [pc, #80]	@ (80020ec <_sbrk+0x5c>)
 800209a:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <_sbrk+0x60>)
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a4:	4b13      	ldr	r3, [pc, #76]	@ (80020f4 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020ac:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <_sbrk+0x64>)
 80020ae:	4a12      	ldr	r2, [pc, #72]	@ (80020f8 <_sbrk+0x68>)
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b2:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d207      	bcs.n	80020d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c0:	f007 fb9c 	bl	80097fc <__errno>
 80020c4:	4603      	mov	r3, r0
 80020c6:	220c      	movs	r2, #12
 80020c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	e009      	b.n	80020e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d0:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d6:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	4a05      	ldr	r2, [pc, #20]	@ (80020f4 <_sbrk+0x64>)
 80020e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20005000 	.word	0x20005000
 80020f0:	00000400 	.word	0x00000400
 80020f4:	20000324 	.word	0x20000324
 80020f8:	20001ef0 	.word	0x20001ef0

080020fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08e      	sub	sp, #56	@ 0x38
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800210e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800211c:	f107 0320 	add.w	r3, r7, #32
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
 8002134:	615a      	str	r2, [r3, #20]
 8002136:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002138:	4b32      	ldr	r3, [pc, #200]	@ (8002204 <MX_TIM3_Init+0xfc>)
 800213a:	4a33      	ldr	r2, [pc, #204]	@ (8002208 <MX_TIM3_Init+0x100>)
 800213c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800213e:	4b31      	ldr	r3, [pc, #196]	@ (8002204 <MX_TIM3_Init+0xfc>)
 8002140:	2247      	movs	r2, #71	@ 0x47
 8002142:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002144:	4b2f      	ldr	r3, [pc, #188]	@ (8002204 <MX_TIM3_Init+0xfc>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800214a:	4b2e      	ldr	r3, [pc, #184]	@ (8002204 <MX_TIM3_Init+0xfc>)
 800214c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002150:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002152:	4b2c      	ldr	r3, [pc, #176]	@ (8002204 <MX_TIM3_Init+0xfc>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002158:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <MX_TIM3_Init+0xfc>)
 800215a:	2200      	movs	r2, #0
 800215c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800215e:	4829      	ldr	r0, [pc, #164]	@ (8002204 <MX_TIM3_Init+0xfc>)
 8002160:	f002 fa08 	bl	8004574 <HAL_TIM_Base_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800216a:	f7ff fa01 	bl	8001570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800216e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002172:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002174:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002178:	4619      	mov	r1, r3
 800217a:	4822      	ldr	r0, [pc, #136]	@ (8002204 <MX_TIM3_Init+0xfc>)
 800217c:	f002 fd48 	bl	8004c10 <HAL_TIM_ConfigClockSource>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002186:	f7ff f9f3 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800218a:	481e      	ldr	r0, [pc, #120]	@ (8002204 <MX_TIM3_Init+0xfc>)
 800218c:	f002 fa94 	bl	80046b8 <HAL_TIM_PWM_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002196:	f7ff f9eb 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021a2:	f107 0320 	add.w	r3, r7, #32
 80021a6:	4619      	mov	r1, r3
 80021a8:	4816      	ldr	r0, [pc, #88]	@ (8002204 <MX_TIM3_Init+0xfc>)
 80021aa:	f003 f8cd 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80021b4:	f7ff f9dc 	bl	8001570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b8:	2360      	movs	r3, #96	@ 0x60
 80021ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	2200      	movs	r2, #0
 80021cc:	4619      	mov	r1, r3
 80021ce:	480d      	ldr	r0, [pc, #52]	@ (8002204 <MX_TIM3_Init+0xfc>)
 80021d0:	f002 fc5c 	bl	8004a8c <HAL_TIM_PWM_ConfigChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80021da:	f7ff f9c9 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	2204      	movs	r2, #4
 80021e2:	4619      	mov	r1, r3
 80021e4:	4807      	ldr	r0, [pc, #28]	@ (8002204 <MX_TIM3_Init+0xfc>)
 80021e6:	f002 fc51 	bl	8004a8c <HAL_TIM_PWM_ConfigChannel>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80021f0:	f7ff f9be 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021f4:	4803      	ldr	r0, [pc, #12]	@ (8002204 <MX_TIM3_Init+0xfc>)
 80021f6:	f000 f827 	bl	8002248 <HAL_TIM_MspPostInit>

}
 80021fa:	bf00      	nop
 80021fc:	3738      	adds	r7, #56	@ 0x38
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000328 	.word	0x20000328
 8002208:	40000400 	.word	0x40000400

0800220c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a09      	ldr	r2, [pc, #36]	@ (8002240 <HAL_TIM_Base_MspInit+0x34>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d10b      	bne.n	8002236 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800221e:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <HAL_TIM_Base_MspInit+0x38>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a08      	ldr	r2, [pc, #32]	@ (8002244 <HAL_TIM_Base_MspInit+0x38>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_TIM_Base_MspInit+0x38>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr
 8002240:	40000400 	.word	0x40000400
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a18      	ldr	r2, [pc, #96]	@ (80022c4 <HAL_TIM_MspPostInit+0x7c>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d129      	bne.n	80022bc <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002268:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <HAL_TIM_MspPostInit+0x80>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	4a16      	ldr	r2, [pc, #88]	@ (80022c8 <HAL_TIM_MspPostInit+0x80>)
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	6193      	str	r3, [r2, #24]
 8002274:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <HAL_TIM_MspPostInit+0x80>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002280:	2330      	movs	r3, #48	@ 0x30
 8002282:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	2302      	movs	r3, #2
 8002286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002288:	2302      	movs	r3, #2
 800228a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	4619      	mov	r1, r3
 8002292:	480e      	ldr	r0, [pc, #56]	@ (80022cc <HAL_TIM_MspPostInit+0x84>)
 8002294:	f000 faa8 	bl	80027e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002298:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <HAL_TIM_MspPostInit+0x88>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	4a06      	ldr	r2, [pc, #24]	@ (80022d0 <HAL_TIM_MspPostInit+0x88>)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022bc:	bf00      	nop
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40000400 	.word	0x40000400
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40010c00 	.word	0x40010c00
 80022d0:	40010000 	.word	0x40010000

080022d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <MX_USART2_UART_Init+0x4c>)
 80022da:	4a12      	ldr	r2, [pc, #72]	@ (8002324 <MX_USART2_UART_Init+0x50>)
 80022dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022de:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <MX_USART2_UART_Init+0x4c>)
 80022e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <MX_USART2_UART_Init+0x4c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <MX_USART2_UART_Init+0x4c>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <MX_USART2_UART_Init+0x4c>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022f8:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <MX_USART2_UART_Init+0x4c>)
 80022fa:	220c      	movs	r2, #12
 80022fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022fe:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <MX_USART2_UART_Init+0x4c>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <MX_USART2_UART_Init+0x4c>)
 8002306:	2200      	movs	r2, #0
 8002308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800230a:	4805      	ldr	r0, [pc, #20]	@ (8002320 <MX_USART2_UART_Init+0x4c>)
 800230c:	f003 f88c 	bl	8005428 <HAL_UART_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002316:	f7ff f92b 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000370 	.word	0x20000370
 8002324:	40004400 	.word	0x40004400

08002328 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0310 	add.w	r3, r7, #16
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1f      	ldr	r2, [pc, #124]	@ (80023c0 <HAL_UART_MspInit+0x98>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d137      	bne.n	80023b8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002348:	4b1e      	ldr	r3, [pc, #120]	@ (80023c4 <HAL_UART_MspInit+0x9c>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	4a1d      	ldr	r2, [pc, #116]	@ (80023c4 <HAL_UART_MspInit+0x9c>)
 800234e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002352:	61d3      	str	r3, [r2, #28]
 8002354:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <HAL_UART_MspInit+0x9c>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002360:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <HAL_UART_MspInit+0x9c>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a17      	ldr	r2, [pc, #92]	@ (80023c4 <HAL_UART_MspInit+0x9c>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b15      	ldr	r3, [pc, #84]	@ (80023c4 <HAL_UART_MspInit+0x9c>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002378:	2304      	movs	r3, #4
 800237a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237c:	2302      	movs	r3, #2
 800237e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	4619      	mov	r1, r3
 800238a:	480f      	ldr	r0, [pc, #60]	@ (80023c8 <HAL_UART_MspInit+0xa0>)
 800238c:	f000 fa2c 	bl	80027e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002390:	2308      	movs	r3, #8
 8002392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239c:	f107 0310 	add.w	r3, r7, #16
 80023a0:	4619      	mov	r1, r3
 80023a2:	4809      	ldr	r0, [pc, #36]	@ (80023c8 <HAL_UART_MspInit+0xa0>)
 80023a4:	f000 fa20 	bl	80027e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2105      	movs	r1, #5
 80023ac:	2026      	movs	r0, #38	@ 0x26
 80023ae:	f000 f93e 	bl	800262e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023b2:	2026      	movs	r0, #38	@ 0x26
 80023b4:	f000 f957 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023b8:	bf00      	nop
 80023ba:	3720      	adds	r7, #32
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40004400 	.word	0x40004400
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40010800 	.word	0x40010800

080023cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/    bl  SystemInit
 80023cc:	f7ff fe96 	bl	80020fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d0:	480b      	ldr	r0, [pc, #44]	@ (8002400 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023d2:	490c      	ldr	r1, [pc, #48]	@ (8002404 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002408 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a09      	ldr	r2, [pc, #36]	@ (800240c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023e8:	4c09      	ldr	r4, [pc, #36]	@ (8002410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023f6:	f007 fa07 	bl	8009808 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023fa:	f7ff f83b 	bl	8001474 <main>
  bx lr
 80023fe:	4770      	bx	lr
  ldr r0, =_sdata
 8002400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002404:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002408:	0800be9c 	.word	0x0800be9c
  ldr r2, =_sbss
 800240c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002410:	20001ef0 	.word	0x20001ef0

08002414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002414:	e7fe      	b.n	8002414 <ADC1_2_IRQHandler>
	...

08002418 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800241c:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <HAL_Init+0x28>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a07      	ldr	r2, [pc, #28]	@ (8002440 <HAL_Init+0x28>)
 8002422:	f043 0310 	orr.w	r3, r3, #16
 8002426:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002428:	2003      	movs	r0, #3
 800242a:	f000 f8f5 	bl	8002618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800242e:	200f      	movs	r0, #15
 8002430:	f7ff fcf6 	bl	8001e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002434:	f7ff fcbc 	bl	8001db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40022000 	.word	0x40022000

08002444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <HAL_IncTick+0x1c>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <HAL_IncTick+0x20>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4413      	add	r3, r2
 8002454:	4a03      	ldr	r2, [pc, #12]	@ (8002464 <HAL_IncTick+0x20>)
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	20000020 	.word	0x20000020
 8002464:	200003b8 	.word	0x200003b8

08002468 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b02      	ldr	r3, [pc, #8]	@ (8002478 <HAL_GetTick+0x10>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	200003b8 	.word	0x200003b8

0800247c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002484:	f7ff fff0 	bl	8002468 <HAL_GetTick>
 8002488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d005      	beq.n	80024a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002496:	4b0a      	ldr	r3, [pc, #40]	@ (80024c0 <HAL_Delay+0x44>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4413      	add	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024a2:	bf00      	nop
 80024a4:	f7ff ffe0 	bl	8002468 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d8f7      	bhi.n	80024a4 <HAL_Delay+0x28>
  {
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000020 	.word	0x20000020

080024c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <__NVIC_SetPriorityGrouping+0x44>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024e0:	4013      	ands	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f6:	4a04      	ldr	r2, [pc, #16]	@ (8002508 <__NVIC_SetPriorityGrouping+0x44>)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	60d3      	str	r3, [r2, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002510:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <__NVIC_GetPriorityGrouping+0x18>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	f003 0307 	and.w	r3, r3, #7
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	2b00      	cmp	r3, #0
 8002538:	db0b      	blt.n	8002552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	f003 021f 	and.w	r2, r3, #31
 8002540:	4906      	ldr	r1, [pc, #24]	@ (800255c <__NVIC_EnableIRQ+0x34>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	2001      	movs	r0, #1
 800254a:	fa00 f202 	lsl.w	r2, r0, r2
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	@ (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	@ (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	@ 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f1c3 0307 	rsb	r3, r3, #7
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf28      	it	cs
 80025d2:	2304      	movcs	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3304      	adds	r3, #4
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d902      	bls.n	80025e4 <NVIC_EncodePriority+0x30>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3b03      	subs	r3, #3
 80025e2:	e000      	b.n	80025e6 <NVIC_EncodePriority+0x32>
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43d9      	mvns	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	4313      	orrs	r3, r2
         );
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	@ 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f7ff ff4f 	bl	80024c4 <__NVIC_SetPriorityGrouping>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800262e:	b580      	push	{r7, lr}
 8002630:	b086      	sub	sp, #24
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	60b9      	str	r1, [r7, #8]
 8002638:	607a      	str	r2, [r7, #4]
 800263a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002640:	f7ff ff64 	bl	800250c <__NVIC_GetPriorityGrouping>
 8002644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f7ff ffb2 	bl	80025b4 <NVIC_EncodePriority>
 8002650:	4602      	mov	r2, r0
 8002652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff81 	bl	8002560 <__NVIC_SetPriority>
}
 800265e:	bf00      	nop
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	4603      	mov	r3, r0
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff57 	bl	8002528 <__NVIC_EnableIRQ>
}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d008      	beq.n	80026ac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2204      	movs	r2, #4
 800269e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e020      	b.n	80026ee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 020e 	bic.w	r2, r2, #14
 80026ba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d4:	2101      	movs	r1, #1
 80026d6:	fa01 f202 	lsl.w	r2, r1, r2
 80026da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d005      	beq.n	800271c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2204      	movs	r2, #4
 8002714:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	e051      	b.n	80027c0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 020e 	bic.w	r2, r2, #14
 800272a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a22      	ldr	r2, [pc, #136]	@ (80027cc <HAL_DMA_Abort_IT+0xd4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d029      	beq.n	800279a <HAL_DMA_Abort_IT+0xa2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a21      	ldr	r2, [pc, #132]	@ (80027d0 <HAL_DMA_Abort_IT+0xd8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d022      	beq.n	8002796 <HAL_DMA_Abort_IT+0x9e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1f      	ldr	r2, [pc, #124]	@ (80027d4 <HAL_DMA_Abort_IT+0xdc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01a      	beq.n	8002790 <HAL_DMA_Abort_IT+0x98>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a1e      	ldr	r2, [pc, #120]	@ (80027d8 <HAL_DMA_Abort_IT+0xe0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d012      	beq.n	800278a <HAL_DMA_Abort_IT+0x92>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1c      	ldr	r2, [pc, #112]	@ (80027dc <HAL_DMA_Abort_IT+0xe4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d00a      	beq.n	8002784 <HAL_DMA_Abort_IT+0x8c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1b      	ldr	r2, [pc, #108]	@ (80027e0 <HAL_DMA_Abort_IT+0xe8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d102      	bne.n	800277e <HAL_DMA_Abort_IT+0x86>
 8002778:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800277c:	e00e      	b.n	800279c <HAL_DMA_Abort_IT+0xa4>
 800277e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002782:	e00b      	b.n	800279c <HAL_DMA_Abort_IT+0xa4>
 8002784:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002788:	e008      	b.n	800279c <HAL_DMA_Abort_IT+0xa4>
 800278a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800278e:	e005      	b.n	800279c <HAL_DMA_Abort_IT+0xa4>
 8002790:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002794:	e002      	b.n	800279c <HAL_DMA_Abort_IT+0xa4>
 8002796:	2310      	movs	r3, #16
 8002798:	e000      	b.n	800279c <HAL_DMA_Abort_IT+0xa4>
 800279a:	2301      	movs	r3, #1
 800279c:	4a11      	ldr	r2, [pc, #68]	@ (80027e4 <HAL_DMA_Abort_IT+0xec>)
 800279e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
    } 
  }
  return status;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40020008 	.word	0x40020008
 80027d0:	4002001c 	.word	0x4002001c
 80027d4:	40020030 	.word	0x40020030
 80027d8:	40020044 	.word	0x40020044
 80027dc:	40020058 	.word	0x40020058
 80027e0:	4002006c 	.word	0x4002006c
 80027e4:	40020000 	.word	0x40020000

080027e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b08b      	sub	sp, #44	@ 0x2c
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027f6:	2300      	movs	r3, #0
 80027f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fa:	e169      	b.n	8002ad0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027fc:	2201      	movs	r2, #1
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	429a      	cmp	r2, r3
 8002816:	f040 8158 	bne.w	8002aca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	4a9a      	ldr	r2, [pc, #616]	@ (8002a88 <HAL_GPIO_Init+0x2a0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d05e      	beq.n	80028e2 <HAL_GPIO_Init+0xfa>
 8002824:	4a98      	ldr	r2, [pc, #608]	@ (8002a88 <HAL_GPIO_Init+0x2a0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d875      	bhi.n	8002916 <HAL_GPIO_Init+0x12e>
 800282a:	4a98      	ldr	r2, [pc, #608]	@ (8002a8c <HAL_GPIO_Init+0x2a4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d058      	beq.n	80028e2 <HAL_GPIO_Init+0xfa>
 8002830:	4a96      	ldr	r2, [pc, #600]	@ (8002a8c <HAL_GPIO_Init+0x2a4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d86f      	bhi.n	8002916 <HAL_GPIO_Init+0x12e>
 8002836:	4a96      	ldr	r2, [pc, #600]	@ (8002a90 <HAL_GPIO_Init+0x2a8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d052      	beq.n	80028e2 <HAL_GPIO_Init+0xfa>
 800283c:	4a94      	ldr	r2, [pc, #592]	@ (8002a90 <HAL_GPIO_Init+0x2a8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d869      	bhi.n	8002916 <HAL_GPIO_Init+0x12e>
 8002842:	4a94      	ldr	r2, [pc, #592]	@ (8002a94 <HAL_GPIO_Init+0x2ac>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d04c      	beq.n	80028e2 <HAL_GPIO_Init+0xfa>
 8002848:	4a92      	ldr	r2, [pc, #584]	@ (8002a94 <HAL_GPIO_Init+0x2ac>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d863      	bhi.n	8002916 <HAL_GPIO_Init+0x12e>
 800284e:	4a92      	ldr	r2, [pc, #584]	@ (8002a98 <HAL_GPIO_Init+0x2b0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d046      	beq.n	80028e2 <HAL_GPIO_Init+0xfa>
 8002854:	4a90      	ldr	r2, [pc, #576]	@ (8002a98 <HAL_GPIO_Init+0x2b0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d85d      	bhi.n	8002916 <HAL_GPIO_Init+0x12e>
 800285a:	2b12      	cmp	r3, #18
 800285c:	d82a      	bhi.n	80028b4 <HAL_GPIO_Init+0xcc>
 800285e:	2b12      	cmp	r3, #18
 8002860:	d859      	bhi.n	8002916 <HAL_GPIO_Init+0x12e>
 8002862:	a201      	add	r2, pc, #4	@ (adr r2, 8002868 <HAL_GPIO_Init+0x80>)
 8002864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002868:	080028e3 	.word	0x080028e3
 800286c:	080028bd 	.word	0x080028bd
 8002870:	080028cf 	.word	0x080028cf
 8002874:	08002911 	.word	0x08002911
 8002878:	08002917 	.word	0x08002917
 800287c:	08002917 	.word	0x08002917
 8002880:	08002917 	.word	0x08002917
 8002884:	08002917 	.word	0x08002917
 8002888:	08002917 	.word	0x08002917
 800288c:	08002917 	.word	0x08002917
 8002890:	08002917 	.word	0x08002917
 8002894:	08002917 	.word	0x08002917
 8002898:	08002917 	.word	0x08002917
 800289c:	08002917 	.word	0x08002917
 80028a0:	08002917 	.word	0x08002917
 80028a4:	08002917 	.word	0x08002917
 80028a8:	08002917 	.word	0x08002917
 80028ac:	080028c5 	.word	0x080028c5
 80028b0:	080028d9 	.word	0x080028d9
 80028b4:	4a79      	ldr	r2, [pc, #484]	@ (8002a9c <HAL_GPIO_Init+0x2b4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d013      	beq.n	80028e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028ba:	e02c      	b.n	8002916 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	623b      	str	r3, [r7, #32]
          break;
 80028c2:	e029      	b.n	8002918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	3304      	adds	r3, #4
 80028ca:	623b      	str	r3, [r7, #32]
          break;
 80028cc:	e024      	b.n	8002918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	3308      	adds	r3, #8
 80028d4:	623b      	str	r3, [r7, #32]
          break;
 80028d6:	e01f      	b.n	8002918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	330c      	adds	r3, #12
 80028de:	623b      	str	r3, [r7, #32]
          break;
 80028e0:	e01a      	b.n	8002918 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028ea:	2304      	movs	r3, #4
 80028ec:	623b      	str	r3, [r7, #32]
          break;
 80028ee:	e013      	b.n	8002918 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028f8:	2308      	movs	r3, #8
 80028fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	611a      	str	r2, [r3, #16]
          break;
 8002902:	e009      	b.n	8002918 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002904:	2308      	movs	r3, #8
 8002906:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	615a      	str	r2, [r3, #20]
          break;
 800290e:	e003      	b.n	8002918 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
          break;
 8002914:	e000      	b.n	8002918 <HAL_GPIO_Init+0x130>
          break;
 8002916:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2bff      	cmp	r3, #255	@ 0xff
 800291c:	d801      	bhi.n	8002922 <HAL_GPIO_Init+0x13a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	e001      	b.n	8002926 <HAL_GPIO_Init+0x13e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3304      	adds	r3, #4
 8002926:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2bff      	cmp	r3, #255	@ 0xff
 800292c:	d802      	bhi.n	8002934 <HAL_GPIO_Init+0x14c>
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	e002      	b.n	800293a <HAL_GPIO_Init+0x152>
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	3b08      	subs	r3, #8
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	210f      	movs	r1, #15
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	401a      	ands	r2, r3
 800294c:	6a39      	ldr	r1, [r7, #32]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	fa01 f303 	lsl.w	r3, r1, r3
 8002954:	431a      	orrs	r2, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 80b1 	beq.w	8002aca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002968:	4b4d      	ldr	r3, [pc, #308]	@ (8002aa0 <HAL_GPIO_Init+0x2b8>)
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	4a4c      	ldr	r2, [pc, #304]	@ (8002aa0 <HAL_GPIO_Init+0x2b8>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6193      	str	r3, [r2, #24]
 8002974:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa0 <HAL_GPIO_Init+0x2b8>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002980:	4a48      	ldr	r2, [pc, #288]	@ (8002aa4 <HAL_GPIO_Init+0x2bc>)
 8002982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	3302      	adds	r3, #2
 8002988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	220f      	movs	r2, #15
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4013      	ands	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a40      	ldr	r2, [pc, #256]	@ (8002aa8 <HAL_GPIO_Init+0x2c0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d013      	beq.n	80029d4 <HAL_GPIO_Init+0x1ec>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a3f      	ldr	r2, [pc, #252]	@ (8002aac <HAL_GPIO_Init+0x2c4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00d      	beq.n	80029d0 <HAL_GPIO_Init+0x1e8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ab0 <HAL_GPIO_Init+0x2c8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d007      	beq.n	80029cc <HAL_GPIO_Init+0x1e4>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3d      	ldr	r2, [pc, #244]	@ (8002ab4 <HAL_GPIO_Init+0x2cc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <HAL_GPIO_Init+0x1e0>
 80029c4:	2303      	movs	r3, #3
 80029c6:	e006      	b.n	80029d6 <HAL_GPIO_Init+0x1ee>
 80029c8:	2304      	movs	r3, #4
 80029ca:	e004      	b.n	80029d6 <HAL_GPIO_Init+0x1ee>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e002      	b.n	80029d6 <HAL_GPIO_Init+0x1ee>
 80029d0:	2301      	movs	r3, #1
 80029d2:	e000      	b.n	80029d6 <HAL_GPIO_Init+0x1ee>
 80029d4:	2300      	movs	r3, #0
 80029d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d8:	f002 0203 	and.w	r2, r2, #3
 80029dc:	0092      	lsls	r2, r2, #2
 80029de:	4093      	lsls	r3, r2
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029e6:	492f      	ldr	r1, [pc, #188]	@ (8002aa4 <HAL_GPIO_Init+0x2bc>)
 80029e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	3302      	adds	r3, #2
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d006      	beq.n	8002a0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a00:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	492c      	ldr	r1, [pc, #176]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	608b      	str	r3, [r1, #8]
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	4928      	ldr	r1, [pc, #160]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a28:	4b23      	ldr	r3, [pc, #140]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	4922      	ldr	r1, [pc, #136]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60cb      	str	r3, [r1, #12]
 8002a34:	e006      	b.n	8002a44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a36:	4b20      	ldr	r3, [pc, #128]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	491e      	ldr	r1, [pc, #120]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a50:	4b19      	ldr	r3, [pc, #100]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	4918      	ldr	r1, [pc, #96]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
 8002a5c:	e006      	b.n	8002a6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a5e:	4b16      	ldr	r3, [pc, #88]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	4914      	ldr	r1, [pc, #80]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d021      	beq.n	8002abc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a78:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	490e      	ldr	r1, [pc, #56]	@ (8002ab8 <HAL_GPIO_Init+0x2d0>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
 8002a84:	e021      	b.n	8002aca <HAL_GPIO_Init+0x2e2>
 8002a86:	bf00      	nop
 8002a88:	10320000 	.word	0x10320000
 8002a8c:	10310000 	.word	0x10310000
 8002a90:	10220000 	.word	0x10220000
 8002a94:	10210000 	.word	0x10210000
 8002a98:	10120000 	.word	0x10120000
 8002a9c:	10110000 	.word	0x10110000
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40010000 	.word	0x40010000
 8002aa8:	40010800 	.word	0x40010800
 8002aac:	40010c00 	.word	0x40010c00
 8002ab0:	40011000 	.word	0x40011000
 8002ab4:	40011400 	.word	0x40011400
 8002ab8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	@ (8002aec <HAL_GPIO_Init+0x304>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	4909      	ldr	r1, [pc, #36]	@ (8002aec <HAL_GPIO_Init+0x304>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	3301      	adds	r3, #1
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f47f ae8e 	bne.w	80027fc <HAL_GPIO_Init+0x14>
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	372c      	adds	r7, #44	@ 0x2c
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	40010400 	.word	0x40010400

08002af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	807b      	strh	r3, [r7, #2]
 8002afc:	4613      	mov	r3, r2
 8002afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b00:	787b      	ldrb	r3, [r7, #1]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b06:	887a      	ldrh	r2, [r7, #2]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b0c:	e003      	b.n	8002b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	041a      	lsls	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	611a      	str	r2, [r3, #16]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e12b      	b.n	8002d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fc26 	bl	8001398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2224      	movs	r2, #36	@ 0x24
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b84:	f001 fbfc 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8002b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4a81      	ldr	r2, [pc, #516]	@ (8002d94 <HAL_I2C_Init+0x274>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d807      	bhi.n	8002ba4 <HAL_I2C_Init+0x84>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4a80      	ldr	r2, [pc, #512]	@ (8002d98 <HAL_I2C_Init+0x278>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	bf94      	ite	ls
 8002b9c:	2301      	movls	r3, #1
 8002b9e:	2300      	movhi	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	e006      	b.n	8002bb2 <HAL_I2C_Init+0x92>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4a7d      	ldr	r2, [pc, #500]	@ (8002d9c <HAL_I2C_Init+0x27c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	bf94      	ite	ls
 8002bac:	2301      	movls	r3, #1
 8002bae:	2300      	movhi	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0e7      	b.n	8002d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4a78      	ldr	r2, [pc, #480]	@ (8002da0 <HAL_I2C_Init+0x280>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0c9b      	lsrs	r3, r3, #18
 8002bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68ba      	ldr	r2, [r7, #8]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	4a6a      	ldr	r2, [pc, #424]	@ (8002d94 <HAL_I2C_Init+0x274>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d802      	bhi.n	8002bf4 <HAL_I2C_Init+0xd4>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	e009      	b.n	8002c08 <HAL_I2C_Init+0xe8>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bfa:	fb02 f303 	mul.w	r3, r2, r3
 8002bfe:	4a69      	ldr	r2, [pc, #420]	@ (8002da4 <HAL_I2C_Init+0x284>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	3301      	adds	r3, #1
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	495c      	ldr	r1, [pc, #368]	@ (8002d94 <HAL_I2C_Init+0x274>)
 8002c24:	428b      	cmp	r3, r1
 8002c26:	d819      	bhi.n	8002c5c <HAL_I2C_Init+0x13c>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1e59      	subs	r1, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c36:	1c59      	adds	r1, r3, #1
 8002c38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c3c:	400b      	ands	r3, r1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_I2C_Init+0x138>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e59      	subs	r1, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c56:	e051      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	e04f      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d111      	bne.n	8002c88 <HAL_I2C_Init+0x168>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1e58      	subs	r0, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	440b      	add	r3, r1
 8002c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	e012      	b.n	8002cae <HAL_I2C_Init+0x18e>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1e58      	subs	r0, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6859      	ldr	r1, [r3, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	0099      	lsls	r1, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2301      	moveq	r3, #1
 8002caa:	2300      	movne	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_I2C_Init+0x196>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e022      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10e      	bne.n	8002cdc <HAL_I2C_Init+0x1bc>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1e58      	subs	r0, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	440b      	add	r3, r1
 8002ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cda:	e00f      	b.n	8002cfc <HAL_I2C_Init+0x1dc>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1e58      	subs	r0, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	0099      	lsls	r1, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	6809      	ldr	r1, [r1, #0]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6911      	ldr	r1, [r2, #16]
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68d2      	ldr	r2, [r2, #12]
 8002d36:	4311      	orrs	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6812      	ldr	r2, [r2, #0]
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	000186a0 	.word	0x000186a0
 8002d98:	001e847f 	.word	0x001e847f
 8002d9c:	003d08ff 	.word	0x003d08ff
 8002da0:	431bde83 	.word	0x431bde83
 8002da4:	10624dd3 	.word	0x10624dd3

08002da8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	4608      	mov	r0, r1
 8002db2:	4611      	mov	r1, r2
 8002db4:	461a      	mov	r2, r3
 8002db6:	4603      	mov	r3, r0
 8002db8:	817b      	strh	r3, [r7, #10]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	813b      	strh	r3, [r7, #8]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dc2:	f7ff fb51 	bl	8002468 <HAL_GetTick>
 8002dc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	f040 80d9 	bne.w	8002f88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2319      	movs	r3, #25
 8002ddc:	2201      	movs	r2, #1
 8002dde:	496d      	ldr	r1, [pc, #436]	@ (8002f94 <HAL_I2C_Mem_Write+0x1ec>)
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fccd 	bl	8003780 <I2C_WaitOnFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
 8002dee:	e0cc      	b.n	8002f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_I2C_Mem_Write+0x56>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e0c5      	b.n	8002f8a <HAL_I2C_Mem_Write+0x1e2>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d007      	beq.n	8002e24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2221      	movs	r2, #33	@ 0x21
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2240      	movs	r2, #64	@ 0x40
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a3a      	ldr	r2, [r7, #32]
 8002e4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a4d      	ldr	r2, [pc, #308]	@ (8002f98 <HAL_I2C_Mem_Write+0x1f0>)
 8002e64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e66:	88f8      	ldrh	r0, [r7, #6]
 8002e68:	893a      	ldrh	r2, [r7, #8]
 8002e6a:	8979      	ldrh	r1, [r7, #10]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	4603      	mov	r3, r0
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fb04 	bl	8003484 <I2C_RequestMemoryWrite>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d052      	beq.n	8002f28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e081      	b.n	8002f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fd92 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d107      	bne.n	8002eae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e06b      	b.n	8002f8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	781a      	ldrb	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d11b      	bne.n	8002f28 <HAL_I2C_Mem_Write+0x180>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d017      	beq.n	8002f28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1aa      	bne.n	8002e86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fd85 	bl	8003a44 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d107      	bne.n	8002f58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e016      	b.n	8002f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	e000      	b.n	8002f8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f88:	2302      	movs	r3, #2
  }
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	00100002 	.word	0x00100002
 8002f98:	ffff0000 	.word	0xffff0000

08002f9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08c      	sub	sp, #48	@ 0x30
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	817b      	strh	r3, [r7, #10]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	813b      	strh	r3, [r7, #8]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fba:	f7ff fa55 	bl	8002468 <HAL_GetTick>
 8002fbe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	f040 8250 	bne.w	800346e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2319      	movs	r3, #25
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4982      	ldr	r1, [pc, #520]	@ (80031e0 <HAL_I2C_Mem_Read+0x244>)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 fbd1 	bl	8003780 <I2C_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e243      	b.n	8003470 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_I2C_Mem_Read+0x5a>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e23c      	b.n	8003470 <HAL_I2C_Mem_Read+0x4d4>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d007      	beq.n	800301c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800302a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2222      	movs	r2, #34	@ 0x22
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2240      	movs	r2, #64	@ 0x40
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003046:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800304c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a62      	ldr	r2, [pc, #392]	@ (80031e4 <HAL_I2C_Mem_Read+0x248>)
 800305c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800305e:	88f8      	ldrh	r0, [r7, #6]
 8003060:	893a      	ldrh	r2, [r7, #8]
 8003062:	8979      	ldrh	r1, [r7, #10]
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	4603      	mov	r3, r0
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 fa9e 	bl	80035b0 <I2C_RequestMemoryRead>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e1f8      	b.n	8003470 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	d113      	bne.n	80030ae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	e1cc      	b.n	8003448 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d11e      	bne.n	80030f4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030c6:	b672      	cpsid	i
}
 80030c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030f0:	b662      	cpsie	i
}
 80030f2:	e035      	b.n	8003160 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d11e      	bne.n	800313a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800310a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800310c:	b672      	cpsid	i
}
 800310e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003134:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003136:	b662      	cpsie	i
}
 8003138:	e012      	b.n	8003160 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003148:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003160:	e172      	b.n	8003448 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003166:	2b03      	cmp	r3, #3
 8003168:	f200 811f 	bhi.w	80033aa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003170:	2b01      	cmp	r3, #1
 8003172:	d123      	bne.n	80031bc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003176:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fcab 	bl	8003ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e173      	b.n	8003470 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031ba:	e145      	b.n	8003448 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d152      	bne.n	800326a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ca:	2200      	movs	r2, #0
 80031cc:	4906      	ldr	r1, [pc, #24]	@ (80031e8 <HAL_I2C_Mem_Read+0x24c>)
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fad6 	bl	8003780 <I2C_WaitOnFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d008      	beq.n	80031ec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e148      	b.n	8003470 <HAL_I2C_Mem_Read+0x4d4>
 80031de:	bf00      	nop
 80031e0:	00100002 	.word	0x00100002
 80031e4:	ffff0000 	.word	0xffff0000
 80031e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80031ec:	b672      	cpsid	i
}
 80031ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003232:	b662      	cpsie	i
}
 8003234:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003268:	e0ee      	b.n	8003448 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003270:	2200      	movs	r2, #0
 8003272:	4981      	ldr	r1, [pc, #516]	@ (8003478 <HAL_I2C_Mem_Read+0x4dc>)
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fa83 	bl	8003780 <I2C_WaitOnFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0f5      	b.n	8003470 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003292:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003294:	b672      	cpsid	i
}
 8003296:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b4:	3b01      	subs	r3, #1
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80032ca:	4b6c      	ldr	r3, [pc, #432]	@ (800347c <HAL_I2C_Mem_Read+0x4e0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	08db      	lsrs	r3, r3, #3
 80032d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003480 <HAL_I2C_Mem_Read+0x4e4>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	0a1a      	lsrs	r2, r3, #8
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	00da      	lsls	r2, r3, #3
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d118      	bne.n	8003322 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330a:	f043 0220 	orr.w	r2, r3, #32
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003312:	b662      	cpsie	i
}
 8003314:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0a6      	b.n	8003470 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b04      	cmp	r3, #4
 800332e:	d1d9      	bne.n	80032e4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800333e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003372:	b662      	cpsie	i
}
 8003374:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033a8:	e04e      	b.n	8003448 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fb90 	bl	8003ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e058      	b.n	8003470 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d124      	bne.n	8003448 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003402:	2b03      	cmp	r3, #3
 8003404:	d107      	bne.n	8003416 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003414:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003432:	3b01      	subs	r3, #1
 8003434:	b29a      	uxth	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344c:	2b00      	cmp	r3, #0
 800344e:	f47f ae88 	bne.w	8003162 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
  }
}
 8003470:	4618      	mov	r0, r3
 8003472:	3728      	adds	r7, #40	@ 0x28
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	00010004 	.word	0x00010004
 800347c:	20000018 	.word	0x20000018
 8003480:	14f8b589 	.word	0x14f8b589

08003484 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	4608      	mov	r0, r1
 800348e:	4611      	mov	r1, r2
 8003490:	461a      	mov	r2, r3
 8003492:	4603      	mov	r3, r0
 8003494:	817b      	strh	r3, [r7, #10]
 8003496:	460b      	mov	r3, r1
 8003498:	813b      	strh	r3, [r7, #8]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f960 	bl	8003780 <I2C_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00d      	beq.n	80034e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d4:	d103      	bne.n	80034de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e05f      	b.n	80035a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034e2:	897b      	ldrh	r3, [r7, #10]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	6a3a      	ldr	r2, [r7, #32]
 80034f6:	492d      	ldr	r1, [pc, #180]	@ (80035ac <I2C_RequestMemoryWrite+0x128>)
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f9bb 	bl	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e04c      	b.n	80035a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800351e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003520:	6a39      	ldr	r1, [r7, #32]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fa46 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00d      	beq.n	800354a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	2b04      	cmp	r3, #4
 8003534:	d107      	bne.n	8003546 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003544:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e02b      	b.n	80035a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d105      	bne.n	800355c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003550:	893b      	ldrh	r3, [r7, #8]
 8003552:	b2da      	uxtb	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	611a      	str	r2, [r3, #16]
 800355a:	e021      	b.n	80035a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800355c:	893b      	ldrh	r3, [r7, #8]
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	b29b      	uxth	r3, r3
 8003562:	b2da      	uxtb	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800356a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800356c:	6a39      	ldr	r1, [r7, #32]
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fa20 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00d      	beq.n	8003596 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	2b04      	cmp	r3, #4
 8003580:	d107      	bne.n	8003592 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003590:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e005      	b.n	80035a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003596:	893b      	ldrh	r3, [r7, #8]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	00010002 	.word	0x00010002

080035b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	4608      	mov	r0, r1
 80035ba:	4611      	mov	r1, r2
 80035bc:	461a      	mov	r2, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	817b      	strh	r3, [r7, #10]
 80035c2:	460b      	mov	r3, r1
 80035c4:	813b      	strh	r3, [r7, #8]
 80035c6:	4613      	mov	r3, r2
 80035c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 f8c2 	bl	8003780 <I2C_WaitOnFlagUntilTimeout>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00d      	beq.n	800361e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003610:	d103      	bne.n	800361a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003618:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0aa      	b.n	8003774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800361e:	897b      	ldrh	r3, [r7, #10]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800362c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	6a3a      	ldr	r2, [r7, #32]
 8003632:	4952      	ldr	r1, [pc, #328]	@ (800377c <I2C_RequestMemoryRead+0x1cc>)
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f91d 	bl	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e097      	b.n	8003774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365c:	6a39      	ldr	r1, [r7, #32]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f9a8 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00d      	beq.n	8003686 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	2b04      	cmp	r3, #4
 8003670:	d107      	bne.n	8003682 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003680:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e076      	b.n	8003774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d105      	bne.n	8003698 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800368c:	893b      	ldrh	r3, [r7, #8]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	611a      	str	r2, [r3, #16]
 8003696:	e021      	b.n	80036dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003698:	893b      	ldrh	r3, [r7, #8]
 800369a:	0a1b      	lsrs	r3, r3, #8
 800369c:	b29b      	uxth	r3, r3
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a8:	6a39      	ldr	r1, [r7, #32]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f982 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00d      	beq.n	80036d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d107      	bne.n	80036ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e050      	b.n	8003774 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036d2:	893b      	ldrh	r3, [r7, #8]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036de:	6a39      	ldr	r1, [r7, #32]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f967 	bl	80039b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00d      	beq.n	8003708 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d107      	bne.n	8003704 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003702:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e035      	b.n	8003774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003716:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	2200      	movs	r2, #0
 8003720:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f82b 	bl	8003780 <I2C_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00d      	beq.n	800374c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800373e:	d103      	bne.n	8003748 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003746:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e013      	b.n	8003774 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800374c:	897b      	ldrh	r3, [r7, #10]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	6a3a      	ldr	r2, [r7, #32]
 8003760:	4906      	ldr	r1, [pc, #24]	@ (800377c <I2C_RequestMemoryRead+0x1cc>)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f886 	bl	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	00010002 	.word	0x00010002

08003780 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	4613      	mov	r3, r2
 800378e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003790:	e048      	b.n	8003824 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d044      	beq.n	8003824 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800379a:	f7fe fe65 	bl	8002468 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d302      	bcc.n	80037b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d139      	bne.n	8003824 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	0c1b      	lsrs	r3, r3, #16
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d10d      	bne.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	43da      	mvns	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4013      	ands	r3, r2
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	e00c      	b.n	80037f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	43da      	mvns	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4013      	ands	r3, r2
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d116      	bne.n	8003824 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e023      	b.n	800386c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	0c1b      	lsrs	r3, r3, #16
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d10d      	bne.n	800384a <I2C_WaitOnFlagUntilTimeout+0xca>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	43da      	mvns	r2, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4013      	ands	r3, r2
 800383a:	b29b      	uxth	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
 8003848:	e00c      	b.n	8003864 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	43da      	mvns	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	4013      	ands	r3, r2
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	429a      	cmp	r2, r3
 8003868:	d093      	beq.n	8003792 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003882:	e071      	b.n	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800388e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003892:	d123      	bne.n	80038dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c8:	f043 0204 	orr.w	r2, r3, #4
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e067      	b.n	80039ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e2:	d041      	beq.n	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e4:	f7fe fdc0 	bl	8002468 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d302      	bcc.n	80038fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d136      	bne.n	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b01      	cmp	r3, #1
 8003902:	d10c      	bne.n	800391e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	43da      	mvns	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	bf14      	ite	ne
 8003916:	2301      	movne	r3, #1
 8003918:	2300      	moveq	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	e00b      	b.n	8003936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	43da      	mvns	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4013      	ands	r3, r2
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d016      	beq.n	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	f043 0220 	orr.w	r2, r3, #32
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e021      	b.n	80039ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	0c1b      	lsrs	r3, r3, #16
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d10c      	bne.n	800398c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	43da      	mvns	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4013      	ands	r3, r2
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf14      	ite	ne
 8003984:	2301      	movne	r3, #1
 8003986:	2300      	moveq	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	e00b      	b.n	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	43da      	mvns	r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4013      	ands	r3, r2
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	bf14      	ite	ne
 800399e:	2301      	movne	r3, #1
 80039a0:	2300      	moveq	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f47f af6d 	bne.w	8003884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039c0:	e034      	b.n	8003a2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f8e3 	bl	8003b8e <I2C_IsAcknowledgeFailed>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e034      	b.n	8003a3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d028      	beq.n	8003a2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039da:	f7fe fd45 	bl	8002468 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d302      	bcc.n	80039f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d11d      	bne.n	8003a2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fa:	2b80      	cmp	r3, #128	@ 0x80
 80039fc:	d016      	beq.n	8003a2c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a18:	f043 0220 	orr.w	r2, r3, #32
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e007      	b.n	8003a3c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a36:	2b80      	cmp	r3, #128	@ 0x80
 8003a38:	d1c3      	bne.n	80039c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a50:	e034      	b.n	8003abc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f89b 	bl	8003b8e <I2C_IsAcknowledgeFailed>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e034      	b.n	8003acc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d028      	beq.n	8003abc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6a:	f7fe fcfd 	bl	8002468 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11d      	bne.n	8003abc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d016      	beq.n	8003abc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa8:	f043 0220 	orr.w	r2, r3, #32
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e007      	b.n	8003acc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d1c3      	bne.n	8003a52 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ae0:	e049      	b.n	8003b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d119      	bne.n	8003b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0210 	mvn.w	r2, #16
 8003af8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e030      	b.n	8003b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b24:	f7fe fca0 	bl	8002468 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d302      	bcc.n	8003b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11d      	bne.n	8003b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b44:	2b40      	cmp	r3, #64	@ 0x40
 8003b46:	d016      	beq.n	8003b76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b62:	f043 0220 	orr.w	r2, r3, #32
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e007      	b.n	8003b86 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b80:	2b40      	cmp	r3, #64	@ 0x40
 8003b82:	d1ae      	bne.n	8003ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ba4:	d11b      	bne.n	8003bde <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	f043 0204 	orr.w	r2, r3, #4
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
	...

08003bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e272      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 8087 	beq.w	8003d1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c0c:	4b92      	ldr	r3, [pc, #584]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d00c      	beq.n	8003c32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c18:	4b8f      	ldr	r3, [pc, #572]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d112      	bne.n	8003c4a <HAL_RCC_OscConfig+0x5e>
 8003c24:	4b8c      	ldr	r3, [pc, #560]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c30:	d10b      	bne.n	8003c4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c32:	4b89      	ldr	r3, [pc, #548]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d06c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x12c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d168      	bne.n	8003d18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e24c      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x76>
 8003c54:	4b80      	ldr	r3, [pc, #512]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a7f      	ldr	r2, [pc, #508]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	e02e      	b.n	8003cc0 <HAL_RCC_OscConfig+0xd4>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x98>
 8003c6a:	4b7b      	ldr	r3, [pc, #492]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a7a      	ldr	r2, [pc, #488]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	4b78      	ldr	r3, [pc, #480]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a77      	ldr	r2, [pc, #476]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e01d      	b.n	8003cc0 <HAL_RCC_OscConfig+0xd4>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0xbc>
 8003c8e:	4b72      	ldr	r3, [pc, #456]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a71      	ldr	r2, [pc, #452]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b6f      	ldr	r3, [pc, #444]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6e      	ldr	r2, [pc, #440]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0xd4>
 8003ca8:	4b6b      	ldr	r3, [pc, #428]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a6a      	ldr	r2, [pc, #424]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b68      	ldr	r3, [pc, #416]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a67      	ldr	r2, [pc, #412]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d013      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fbce 	bl	8002468 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7fe fbca 	bl	8002468 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	@ 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e200      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0xe4>
 8003cee:	e014      	b.n	8003d1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe fbba 	bl	8002468 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fe fbb6 	bl	8002468 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	@ 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e1ec      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0a:	4b53      	ldr	r3, [pc, #332]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x10c>
 8003d16:	e000      	b.n	8003d1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d063      	beq.n	8003dee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d26:	4b4c      	ldr	r3, [pc, #304]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d32:	4b49      	ldr	r3, [pc, #292]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d11c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x18c>
 8003d3e:	4b46      	ldr	r3, [pc, #280]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d116      	bne.n	8003d78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4a:	4b43      	ldr	r3, [pc, #268]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_RCC_OscConfig+0x176>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e1c0      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d62:	4b3d      	ldr	r3, [pc, #244]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4939      	ldr	r1, [pc, #228]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	e03a      	b.n	8003dee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d020      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d80:	4b36      	ldr	r3, [pc, #216]	@ (8003e5c <HAL_RCC_OscConfig+0x270>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fe fb6f 	bl	8002468 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d8e:	f7fe fb6b 	bl	8002468 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e1a1      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dac:	4b2a      	ldr	r3, [pc, #168]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	4927      	ldr	r1, [pc, #156]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	600b      	str	r3, [r1, #0]
 8003dc0:	e015      	b.n	8003dee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc2:	4b26      	ldr	r3, [pc, #152]	@ (8003e5c <HAL_RCC_OscConfig+0x270>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fb4e 	bl	8002468 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dd0:	f7fe fb4a 	bl	8002468 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e180      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d03a      	beq.n	8003e70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d019      	beq.n	8003e36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e02:	4b17      	ldr	r3, [pc, #92]	@ (8003e60 <HAL_RCC_OscConfig+0x274>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e08:	f7fe fb2e 	bl	8002468 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e10:	f7fe fb2a 	bl	8002468 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e160      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e22:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <HAL_RCC_OscConfig+0x26c>)
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0f0      	beq.n	8003e10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e2e:	2001      	movs	r0, #1
 8003e30:	f000 fafe 	bl	8004430 <RCC_Delay>
 8003e34:	e01c      	b.n	8003e70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e36:	4b0a      	ldr	r3, [pc, #40]	@ (8003e60 <HAL_RCC_OscConfig+0x274>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3c:	f7fe fb14 	bl	8002468 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e42:	e00f      	b.n	8003e64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e44:	f7fe fb10 	bl	8002468 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d908      	bls.n	8003e64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e146      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	42420000 	.word	0x42420000
 8003e60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e64:	4b92      	ldr	r3, [pc, #584]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e9      	bne.n	8003e44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80a6 	beq.w	8003fca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e82:	4b8b      	ldr	r3, [pc, #556]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10d      	bne.n	8003eaa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e8e:	4b88      	ldr	r3, [pc, #544]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	4a87      	ldr	r2, [pc, #540]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e98:	61d3      	str	r3, [r2, #28]
 8003e9a:	4b85      	ldr	r3, [pc, #532]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eaa:	4b82      	ldr	r3, [pc, #520]	@ (80040b4 <HAL_RCC_OscConfig+0x4c8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d118      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eb6:	4b7f      	ldr	r3, [pc, #508]	@ (80040b4 <HAL_RCC_OscConfig+0x4c8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a7e      	ldr	r2, [pc, #504]	@ (80040b4 <HAL_RCC_OscConfig+0x4c8>)
 8003ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec2:	f7fe fad1 	bl	8002468 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eca:	f7fe facd 	bl	8002468 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b64      	cmp	r3, #100	@ 0x64
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e103      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003edc:	4b75      	ldr	r3, [pc, #468]	@ (80040b4 <HAL_RCC_OscConfig+0x4c8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f0      	beq.n	8003eca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d106      	bne.n	8003efe <HAL_RCC_OscConfig+0x312>
 8003ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	4a6e      	ldr	r2, [pc, #440]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	6213      	str	r3, [r2, #32]
 8003efc:	e02d      	b.n	8003f5a <HAL_RCC_OscConfig+0x36e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x334>
 8003f06:	4b6a      	ldr	r3, [pc, #424]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	4a69      	ldr	r2, [pc, #420]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	6213      	str	r3, [r2, #32]
 8003f12:	4b67      	ldr	r3, [pc, #412]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	4a66      	ldr	r2, [pc, #408]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003f18:	f023 0304 	bic.w	r3, r3, #4
 8003f1c:	6213      	str	r3, [r2, #32]
 8003f1e:	e01c      	b.n	8003f5a <HAL_RCC_OscConfig+0x36e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b05      	cmp	r3, #5
 8003f26:	d10c      	bne.n	8003f42 <HAL_RCC_OscConfig+0x356>
 8003f28:	4b61      	ldr	r3, [pc, #388]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	4a60      	ldr	r2, [pc, #384]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	f043 0304 	orr.w	r3, r3, #4
 8003f32:	6213      	str	r3, [r2, #32]
 8003f34:	4b5e      	ldr	r3, [pc, #376]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	4a5d      	ldr	r2, [pc, #372]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6213      	str	r3, [r2, #32]
 8003f40:	e00b      	b.n	8003f5a <HAL_RCC_OscConfig+0x36e>
 8003f42:	4b5b      	ldr	r3, [pc, #364]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4a5a      	ldr	r2, [pc, #360]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	6213      	str	r3, [r2, #32]
 8003f4e:	4b58      	ldr	r3, [pc, #352]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	4a57      	ldr	r2, [pc, #348]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003f54:	f023 0304 	bic.w	r3, r3, #4
 8003f58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d015      	beq.n	8003f8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f62:	f7fe fa81 	bl	8002468 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f68:	e00a      	b.n	8003f80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fe fa7d 	bl	8002468 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e0b1      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f80:	4b4b      	ldr	r3, [pc, #300]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0ee      	beq.n	8003f6a <HAL_RCC_OscConfig+0x37e>
 8003f8c:	e014      	b.n	8003fb8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f8e:	f7fe fa6b 	bl	8002468 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f94:	e00a      	b.n	8003fac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fe fa67 	bl	8002468 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e09b      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fac:	4b40      	ldr	r3, [pc, #256]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ee      	bne.n	8003f96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d105      	bne.n	8003fca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fbe:	4b3c      	ldr	r3, [pc, #240]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	4a3b      	ldr	r2, [pc, #236]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003fc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 8087 	beq.w	80040e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fd4:	4b36      	ldr	r3, [pc, #216]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d061      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	69db      	ldr	r3, [r3, #28]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d146      	bne.n	8004076 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe8:	4b33      	ldr	r3, [pc, #204]	@ (80040b8 <HAL_RCC_OscConfig+0x4cc>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fee:	f7fe fa3b 	bl	8002468 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7fe fa37 	bl	8002468 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e06d      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004008:	4b29      	ldr	r3, [pc, #164]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f0      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800401c:	d108      	bne.n	8004030 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800401e:	4b24      	ldr	r3, [pc, #144]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	4921      	ldr	r1, [pc, #132]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004030:	4b1f      	ldr	r3, [pc, #124]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a19      	ldr	r1, [r3, #32]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	430b      	orrs	r3, r1
 8004042:	491b      	ldr	r1, [pc, #108]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004048:	4b1b      	ldr	r3, [pc, #108]	@ (80040b8 <HAL_RCC_OscConfig+0x4cc>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404e:	f7fe fa0b 	bl	8002468 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004056:	f7fe fa07 	bl	8002468 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e03d      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004068:	4b11      	ldr	r3, [pc, #68]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x46a>
 8004074:	e035      	b.n	80040e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004076:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <HAL_RCC_OscConfig+0x4cc>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fe f9f4 	bl	8002468 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7fe f9f0 	bl	8002468 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e026      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004096:	4b06      	ldr	r3, [pc, #24]	@ (80040b0 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x498>
 80040a2:	e01e      	b.n	80040e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d107      	bne.n	80040bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e019      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40007000 	.word	0x40007000
 80040b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040bc:	4b0b      	ldr	r3, [pc, #44]	@ (80040ec <HAL_RCC_OscConfig+0x500>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d106      	bne.n	80040de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d001      	beq.n	80040e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021000 	.word	0x40021000

080040f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0d0      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004104:	4b6a      	ldr	r3, [pc, #424]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d910      	bls.n	8004134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004112:	4b67      	ldr	r3, [pc, #412]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 0207 	bic.w	r2, r3, #7
 800411a:	4965      	ldr	r1, [pc, #404]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b63      	ldr	r3, [pc, #396]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0b8      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d020      	beq.n	8004182 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800414c:	4b59      	ldr	r3, [pc, #356]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a58      	ldr	r2, [pc, #352]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004152:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004156:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004164:	4b53      	ldr	r3, [pc, #332]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	4a52      	ldr	r2, [pc, #328]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800416a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800416e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004170:	4b50      	ldr	r3, [pc, #320]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	494d      	ldr	r1, [pc, #308]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	4313      	orrs	r3, r2
 8004180:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d040      	beq.n	8004210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d107      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004196:	4b47      	ldr	r3, [pc, #284]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d115      	bne.n	80041ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e07f      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d107      	bne.n	80041be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ae:	4b41      	ldr	r3, [pc, #260]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e073      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041be:	4b3d      	ldr	r3, [pc, #244]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e06b      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041ce:	4b39      	ldr	r3, [pc, #228]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f023 0203 	bic.w	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	4936      	ldr	r1, [pc, #216]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041e0:	f7fe f942 	bl	8002468 <HAL_GetTick>
 80041e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	e00a      	b.n	80041fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e8:	f7fe f93e 	bl	8002468 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e053      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	4b2d      	ldr	r3, [pc, #180]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 020c 	and.w	r2, r3, #12
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	429a      	cmp	r2, r3
 800420e:	d1eb      	bne.n	80041e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004210:	4b27      	ldr	r3, [pc, #156]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d210      	bcs.n	8004240 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421e:	4b24      	ldr	r3, [pc, #144]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 0207 	bic.w	r2, r3, #7
 8004226:	4922      	ldr	r1, [pc, #136]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800422e:	4b20      	ldr	r3, [pc, #128]	@ (80042b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d001      	beq.n	8004240 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e032      	b.n	80042a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800424c:	4b19      	ldr	r3, [pc, #100]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4916      	ldr	r1, [pc, #88]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800426a:	4b12      	ldr	r3, [pc, #72]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	490e      	ldr	r1, [pc, #56]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	4313      	orrs	r3, r2
 800427c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800427e:	f000 f821 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8004282:	4602      	mov	r2, r0
 8004284:	4b0b      	ldr	r3, [pc, #44]	@ (80042b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	091b      	lsrs	r3, r3, #4
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	490a      	ldr	r1, [pc, #40]	@ (80042b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004290:	5ccb      	ldrb	r3, [r1, r3]
 8004292:	fa22 f303 	lsr.w	r3, r2, r3
 8004296:	4a09      	ldr	r2, [pc, #36]	@ (80042bc <HAL_RCC_ClockConfig+0x1cc>)
 8004298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800429a:	4b09      	ldr	r3, [pc, #36]	@ (80042c0 <HAL_RCC_ClockConfig+0x1d0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fd fdbe 	bl	8001e20 <HAL_InitTick>

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40022000 	.word	0x40022000
 80042b4:	40021000 	.word	0x40021000
 80042b8:	0800bab0 	.word	0x0800bab0
 80042bc:	20000018 	.word	0x20000018
 80042c0:	2000001c 	.word	0x2000001c

080042c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042de:	4b1e      	ldr	r3, [pc, #120]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x94>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d002      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x30>
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d003      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0x36>
 80042f2:	e027      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042f4:	4b19      	ldr	r3, [pc, #100]	@ (800435c <HAL_RCC_GetSysClockFreq+0x98>)
 80042f6:	613b      	str	r3, [r7, #16]
      break;
 80042f8:	e027      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	0c9b      	lsrs	r3, r3, #18
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	4a17      	ldr	r2, [pc, #92]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004304:	5cd3      	ldrb	r3, [r2, r3]
 8004306:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d010      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004312:	4b11      	ldr	r3, [pc, #68]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x94>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	0c5b      	lsrs	r3, r3, #17
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	4a11      	ldr	r2, [pc, #68]	@ (8004364 <HAL_RCC_GetSysClockFreq+0xa0>)
 800431e:	5cd3      	ldrb	r3, [r2, r3]
 8004320:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a0d      	ldr	r2, [pc, #52]	@ (800435c <HAL_RCC_GetSysClockFreq+0x98>)
 8004326:	fb03 f202 	mul.w	r2, r3, r2
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	e004      	b.n	800433e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a0c      	ldr	r2, [pc, #48]	@ (8004368 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004338:	fb02 f303 	mul.w	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	613b      	str	r3, [r7, #16]
      break;
 8004342:	e002      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004344:	4b05      	ldr	r3, [pc, #20]	@ (800435c <HAL_RCC_GetSysClockFreq+0x98>)
 8004346:	613b      	str	r3, [r7, #16]
      break;
 8004348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800434a:	693b      	ldr	r3, [r7, #16]
}
 800434c:	4618      	mov	r0, r3
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
 800435c:	007a1200 	.word	0x007a1200
 8004360:	0800bac8 	.word	0x0800bac8
 8004364:	0800bad8 	.word	0x0800bad8
 8004368:	003d0900 	.word	0x003d0900

0800436c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004370:	4b02      	ldr	r3, [pc, #8]	@ (800437c <HAL_RCC_GetHCLKFreq+0x10>)
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	20000018 	.word	0x20000018

08004380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004384:	f7ff fff2 	bl	800436c <HAL_RCC_GetHCLKFreq>
 8004388:	4602      	mov	r2, r0
 800438a:	4b05      	ldr	r3, [pc, #20]	@ (80043a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	4903      	ldr	r1, [pc, #12]	@ (80043a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004396:	5ccb      	ldrb	r3, [r1, r3]
 8004398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800439c:	4618      	mov	r0, r3
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40021000 	.word	0x40021000
 80043a4:	0800bac0 	.word	0x0800bac0

080043a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043ac:	f7ff ffde 	bl	800436c <HAL_RCC_GetHCLKFreq>
 80043b0:	4602      	mov	r2, r0
 80043b2:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	0adb      	lsrs	r3, r3, #11
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	4903      	ldr	r1, [pc, #12]	@ (80043cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80043be:	5ccb      	ldrb	r3, [r1, r3]
 80043c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000
 80043cc:	0800bac0 	.word	0x0800bac0

080043d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	220f      	movs	r2, #15
 80043de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043e0:	4b11      	ldr	r3, [pc, #68]	@ (8004428 <HAL_RCC_GetClockConfig+0x58>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 0203 	and.w	r2, r3, #3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <HAL_RCC_GetClockConfig+0x58>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <HAL_RCC_GetClockConfig+0x58>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004404:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <HAL_RCC_GetClockConfig+0x58>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	08db      	lsrs	r3, r3, #3
 800440a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004412:	4b06      	ldr	r3, [pc, #24]	@ (800442c <HAL_RCC_GetClockConfig+0x5c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0207 	and.w	r2, r3, #7
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr
 8004428:	40021000 	.word	0x40021000
 800442c:	40022000 	.word	0x40022000

08004430 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004438:	4b0a      	ldr	r3, [pc, #40]	@ (8004464 <RCC_Delay+0x34>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a0a      	ldr	r2, [pc, #40]	@ (8004468 <RCC_Delay+0x38>)
 800443e:	fba2 2303 	umull	r2, r3, r2, r3
 8004442:	0a5b      	lsrs	r3, r3, #9
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	fb02 f303 	mul.w	r3, r2, r3
 800444a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800444c:	bf00      	nop
  }
  while (Delay --);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1e5a      	subs	r2, r3, #1
 8004452:	60fa      	str	r2, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1f9      	bne.n	800444c <RCC_Delay+0x1c>
}
 8004458:	bf00      	nop
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr
 8004464:	20000018 	.word	0x20000018
 8004468:	10624dd3 	.word	0x10624dd3

0800446c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e076      	b.n	800456c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	2b00      	cmp	r3, #0
 8004484:	d108      	bne.n	8004498 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800448e:	d009      	beq.n	80044a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	61da      	str	r2, [r3, #28]
 8004496:	e005      	b.n	80044a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fd fc2c 	bl	8001d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004528:	ea42 0103 	orr.w	r1, r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004530:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	0c1a      	lsrs	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f002 0204 	and.w	r2, r2, #4
 800454a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69da      	ldr	r2, [r3, #28]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800455a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e041      	b.n	800460a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fd fe36 	bl	800220c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	4619      	mov	r1, r3
 80045b2:	4610      	mov	r0, r2
 80045b4:	f000 fc18 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b01      	cmp	r3, #1
 8004626:	d001      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e03a      	b.n	80046a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a18      	ldr	r2, [pc, #96]	@ (80046ac <HAL_TIM_Base_Start_IT+0x98>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00e      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x58>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004656:	d009      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x58>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a14      	ldr	r2, [pc, #80]	@ (80046b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d004      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x58>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a13      	ldr	r2, [pc, #76]	@ (80046b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d111      	bne.n	8004690 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b06      	cmp	r3, #6
 800467c:	d010      	beq.n	80046a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468e:	e007      	b.n	80046a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr
 80046ac:	40012c00 	.word	0x40012c00
 80046b0:	40000400 	.word	0x40000400
 80046b4:	40000800 	.word	0x40000800

080046b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e041      	b.n	800474e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f839 	bl	8004756 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	4619      	mov	r1, r3
 80046f6:	4610      	mov	r0, r2
 80046f8:	f000 fb76 	bl	8004de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d109      	bne.n	800478c <HAL_TIM_PWM_Start+0x24>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	e022      	b.n	80047d2 <HAL_TIM_PWM_Start+0x6a>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b04      	cmp	r3, #4
 8004790:	d109      	bne.n	80047a6 <HAL_TIM_PWM_Start+0x3e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	bf14      	ite	ne
 800479e:	2301      	movne	r3, #1
 80047a0:	2300      	moveq	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	e015      	b.n	80047d2 <HAL_TIM_PWM_Start+0x6a>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d109      	bne.n	80047c0 <HAL_TIM_PWM_Start+0x58>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	bf14      	ite	ne
 80047b8:	2301      	movne	r3, #1
 80047ba:	2300      	moveq	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e008      	b.n	80047d2 <HAL_TIM_PWM_Start+0x6a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	bf14      	ite	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	2300      	moveq	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e05e      	b.n	8004898 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <HAL_TIM_PWM_Start+0x82>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047e8:	e013      	b.n	8004812 <HAL_TIM_PWM_Start+0xaa>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d104      	bne.n	80047fa <HAL_TIM_PWM_Start+0x92>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047f8:	e00b      	b.n	8004812 <HAL_TIM_PWM_Start+0xaa>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Start+0xa2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004808:	e003      	b.n	8004812 <HAL_TIM_PWM_Start+0xaa>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2201      	movs	r2, #1
 8004818:	6839      	ldr	r1, [r7, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fd70 	bl	8005300 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1e      	ldr	r2, [pc, #120]	@ (80048a0 <HAL_TIM_PWM_Start+0x138>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d107      	bne.n	800483a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004838:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a18      	ldr	r2, [pc, #96]	@ (80048a0 <HAL_TIM_PWM_Start+0x138>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00e      	beq.n	8004862 <HAL_TIM_PWM_Start+0xfa>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484c:	d009      	beq.n	8004862 <HAL_TIM_PWM_Start+0xfa>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a14      	ldr	r2, [pc, #80]	@ (80048a4 <HAL_TIM_PWM_Start+0x13c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d004      	beq.n	8004862 <HAL_TIM_PWM_Start+0xfa>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a12      	ldr	r2, [pc, #72]	@ (80048a8 <HAL_TIM_PWM_Start+0x140>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d111      	bne.n	8004886 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b06      	cmp	r3, #6
 8004872:	d010      	beq.n	8004896 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004884:	e007      	b.n	8004896 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0201 	orr.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40012c00 	.word	0x40012c00
 80048a4:	40000400 	.word	0x40000400
 80048a8:	40000800 	.word	0x40000800

080048ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d020      	beq.n	8004910 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01b      	beq.n	8004910 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0202 	mvn.w	r2, #2
 80048e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fa5a 	bl	8004db0 <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa4d 	bl	8004d9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fa5c 	bl	8004dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d020      	beq.n	800495c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01b      	beq.n	800495c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0204 	mvn.w	r2, #4
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fa34 	bl	8004db0 <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa27 	bl	8004d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fa36 	bl	8004dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d020      	beq.n	80049a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01b      	beq.n	80049a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0208 	mvn.w	r2, #8
 8004978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2204      	movs	r2, #4
 800497e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fa0e 	bl	8004db0 <HAL_TIM_IC_CaptureCallback>
 8004994:	e005      	b.n	80049a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa01 	bl	8004d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fa10 	bl	8004dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d020      	beq.n	80049f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01b      	beq.n	80049f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0210 	mvn.w	r2, #16
 80049c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2208      	movs	r2, #8
 80049ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f9e8 	bl	8004db0 <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f9db 	bl	8004d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f9ea 	bl	8004dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00c      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0201 	mvn.w	r2, #1
 8004a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fc fd9a 	bl	800154c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00c      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fced 	bl	8005416 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00c      	beq.n	8004a60 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f9ba 	bl	8004dd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00c      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0220 	mvn.w	r2, #32
 8004a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fcc0 	bl	8005404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a84:	bf00      	nop
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e0ae      	b.n	8004c08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	f200 809f 	bhi.w	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004aba:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004af5 	.word	0x08004af5
 8004ac4:	08004bf9 	.word	0x08004bf9
 8004ac8:	08004bf9 	.word	0x08004bf9
 8004acc:	08004bf9 	.word	0x08004bf9
 8004ad0:	08004b35 	.word	0x08004b35
 8004ad4:	08004bf9 	.word	0x08004bf9
 8004ad8:	08004bf9 	.word	0x08004bf9
 8004adc:	08004bf9 	.word	0x08004bf9
 8004ae0:	08004b77 	.word	0x08004b77
 8004ae4:	08004bf9 	.word	0x08004bf9
 8004ae8:	08004bf9 	.word	0x08004bf9
 8004aec:	08004bf9 	.word	0x08004bf9
 8004af0:	08004bb7 	.word	0x08004bb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f9e2 	bl	8004ec4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0208 	orr.w	r2, r2, #8
 8004b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0204 	bic.w	r2, r2, #4
 8004b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6999      	ldr	r1, [r3, #24]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	619a      	str	r2, [r3, #24]
      break;
 8004b32:	e064      	b.n	8004bfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fa28 	bl	8004f90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6999      	ldr	r1, [r3, #24]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	021a      	lsls	r2, r3, #8
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	619a      	str	r2, [r3, #24]
      break;
 8004b74:	e043      	b.n	8004bfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fa71 	bl	8005064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0208 	orr.w	r2, r2, #8
 8004b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0204 	bic.w	r2, r2, #4
 8004ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69d9      	ldr	r1, [r3, #28]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	61da      	str	r2, [r3, #28]
      break;
 8004bb4:	e023      	b.n	8004bfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fabb 	bl	8005138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69d9      	ldr	r1, [r3, #28]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	021a      	lsls	r2, r3, #8
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	61da      	str	r2, [r3, #28]
      break;
 8004bf6:	e002      	b.n	8004bfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004bfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_TIM_ConfigClockSource+0x1c>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e0b4      	b.n	8004d96 <HAL_TIM_ConfigClockSource+0x186>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c64:	d03e      	beq.n	8004ce4 <HAL_TIM_ConfigClockSource+0xd4>
 8004c66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c6a:	f200 8087 	bhi.w	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c72:	f000 8086 	beq.w	8004d82 <HAL_TIM_ConfigClockSource+0x172>
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7a:	d87f      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b70      	cmp	r3, #112	@ 0x70
 8004c7e:	d01a      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0xa6>
 8004c80:	2b70      	cmp	r3, #112	@ 0x70
 8004c82:	d87b      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b60      	cmp	r3, #96	@ 0x60
 8004c86:	d050      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0x11a>
 8004c88:	2b60      	cmp	r3, #96	@ 0x60
 8004c8a:	d877      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b50      	cmp	r3, #80	@ 0x50
 8004c8e:	d03c      	beq.n	8004d0a <HAL_TIM_ConfigClockSource+0xfa>
 8004c90:	2b50      	cmp	r3, #80	@ 0x50
 8004c92:	d873      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b40      	cmp	r3, #64	@ 0x40
 8004c96:	d058      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x13a>
 8004c98:	2b40      	cmp	r3, #64	@ 0x40
 8004c9a:	d86f      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b30      	cmp	r3, #48	@ 0x30
 8004c9e:	d064      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ca0:	2b30      	cmp	r3, #48	@ 0x30
 8004ca2:	d86b      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b20      	cmp	r3, #32
 8004ca6:	d060      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x15a>
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d867      	bhi.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d05c      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x15a>
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d05a      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x15a>
 8004cb4:	e062      	b.n	8004d7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cc6:	f000 fafc 	bl	80052c2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	609a      	str	r2, [r3, #8]
      break;
 8004ce2:	e04f      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cf4:	f000 fae5 	bl	80052c2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d06:	609a      	str	r2, [r3, #8]
      break;
 8004d08:	e03c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d16:	461a      	mov	r2, r3
 8004d18:	f000 fa5c 	bl	80051d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2150      	movs	r1, #80	@ 0x50
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fab3 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 8004d28:	e02c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d36:	461a      	mov	r2, r3
 8004d38:	f000 fa7a 	bl	8005230 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2160      	movs	r1, #96	@ 0x60
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 faa3 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 8004d48:	e01c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 fa3c 	bl	80051d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2140      	movs	r1, #64	@ 0x40
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fa93 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 8004d68:	e00c      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f000 fa8a 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 8004d7a:	e003      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d80:	e000      	b.n	8004d84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bc80      	pop	{r7}
 8004dc0:	4770      	bx	lr

08004dc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bc80      	pop	{r7}
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr
	...

08004de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a2f      	ldr	r2, [pc, #188]	@ (8004eb8 <TIM_Base_SetConfig+0xd0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <TIM_Base_SetConfig+0x30>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e06:	d007      	beq.n	8004e18 <TIM_Base_SetConfig+0x30>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8004ebc <TIM_Base_SetConfig+0xd4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_Base_SetConfig+0x30>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec0 <TIM_Base_SetConfig+0xd8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d108      	bne.n	8004e2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a22      	ldr	r2, [pc, #136]	@ (8004eb8 <TIM_Base_SetConfig+0xd0>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00b      	beq.n	8004e4a <TIM_Base_SetConfig+0x62>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e38:	d007      	beq.n	8004e4a <TIM_Base_SetConfig+0x62>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ebc <TIM_Base_SetConfig+0xd4>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d003      	beq.n	8004e4a <TIM_Base_SetConfig+0x62>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec0 <TIM_Base_SetConfig+0xd8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d108      	bne.n	8004e5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a0d      	ldr	r2, [pc, #52]	@ (8004eb8 <TIM_Base_SetConfig+0xd0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d103      	bne.n	8004e90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f023 0201 	bic.w	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	611a      	str	r2, [r3, #16]
  }
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40000400 	.word	0x40000400
 8004ec0:	40000800 	.word	0x40000800

08004ec4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f023 0201 	bic.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0303 	bic.w	r3, r3, #3
 8004efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f023 0302 	bic.w	r3, r3, #2
 8004f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004f8c <TIM_OC1_SetConfig+0xc8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10c      	bne.n	8004f3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0308 	bic.w	r3, r3, #8
 8004f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f023 0304 	bic.w	r3, r3, #4
 8004f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a13      	ldr	r2, [pc, #76]	@ (8004f8c <TIM_OC1_SetConfig+0xc8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d111      	bne.n	8004f66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	621a      	str	r2, [r3, #32]
}
 8004f80:	bf00      	nop
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40012c00 	.word	0x40012c00

08004f90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	f023 0210 	bic.w	r2, r3, #16
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0320 	bic.w	r3, r3, #32
 8004fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a1d      	ldr	r2, [pc, #116]	@ (8005060 <TIM_OC2_SetConfig+0xd0>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d10d      	bne.n	800500c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800500a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a14      	ldr	r2, [pc, #80]	@ (8005060 <TIM_OC2_SetConfig+0xd0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d113      	bne.n	800503c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800501a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	bc80      	pop	{r7}
 800505e:	4770      	bx	lr
 8005060:	40012c00 	.word	0x40012c00

08005064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	697a      	ldr	r2, [r7, #20]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005134 <TIM_OC3_SetConfig+0xd0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d10d      	bne.n	80050de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	697a      	ldr	r2, [r7, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a14      	ldr	r2, [pc, #80]	@ (8005134 <TIM_OC3_SetConfig+0xd0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d113      	bne.n	800510e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	621a      	str	r2, [r3, #32]
}
 8005128:	bf00      	nop
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	40012c00 	.word	0x40012c00

08005138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800516e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	031b      	lsls	r3, r3, #12
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	4313      	orrs	r3, r2
 800518e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a0f      	ldr	r2, [pc, #60]	@ (80051d0 <TIM_OC4_SetConfig+0x98>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d109      	bne.n	80051ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800519e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	019b      	lsls	r3, r3, #6
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr
 80051d0:	40012c00 	.word	0x40012c00

080051d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	f023 0201 	bic.w	r2, r3, #1
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f023 030a 	bic.w	r3, r3, #10
 8005210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	621a      	str	r2, [r3, #32]
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0210 	bic.w	r2, r3, #16
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800525a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	031b      	lsls	r3, r3, #12
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800526c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	621a      	str	r2, [r3, #32]
}
 8005284:	bf00      	nop
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr

0800528e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f043 0307 	orr.w	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	609a      	str	r2, [r3, #8]
}
 80052b8:	bf00      	nop
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	bc80      	pop	{r7}
 80052c0:	4770      	bx	lr

080052c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b087      	sub	sp, #28
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	021a      	lsls	r2, r3, #8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	609a      	str	r2, [r3, #8]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	2201      	movs	r2, #1
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a1a      	ldr	r2, [r3, #32]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	43db      	mvns	r3, r3
 8005322:	401a      	ands	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1a      	ldr	r2, [r3, #32]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	fa01 f303 	lsl.w	r3, r1, r3
 8005338:	431a      	orrs	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	621a      	str	r2, [r3, #32]
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	bc80      	pop	{r7}
 8005346:	4770      	bx	lr

08005348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e046      	b.n	80053ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a16      	ldr	r2, [pc, #88]	@ (80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00e      	beq.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ac:	d009      	beq.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a12      	ldr	r2, [pc, #72]	@ (80053fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d004      	beq.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a10      	ldr	r2, [pc, #64]	@ (8005400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d10c      	bne.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr
 80053f8:	40012c00 	.word	0x40012c00
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800

08005404 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr

08005416 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr

08005428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e042      	b.n	80054c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fc ff6a 	bl	8002328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2224      	movs	r2, #36	@ 0x24
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800546a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fd63 	bl	8005f38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	@ 0x28
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d175      	bne.n	80055d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_UART_Transmit+0x2c>
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e06e      	b.n	80055d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2221      	movs	r2, #33	@ 0x21
 8005502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005506:	f7fc ffaf 	bl	8002468 <HAL_GetTick>
 800550a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	88fa      	ldrh	r2, [r7, #6]
 8005516:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005520:	d108      	bne.n	8005534 <HAL_UART_Transmit+0x6c>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d104      	bne.n	8005534 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800552a:	2300      	movs	r3, #0
 800552c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	e003      	b.n	800553c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005538:	2300      	movs	r3, #0
 800553a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800553c:	e02e      	b.n	800559c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2200      	movs	r2, #0
 8005546:	2180      	movs	r1, #128	@ 0x80
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 fb01 	bl	8005b50 <UART_WaitOnFlagUntilTimeout>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e03a      	b.n	80055d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	3302      	adds	r3, #2
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	e007      	b.n	800558e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	781a      	ldrb	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	3301      	adds	r3, #1
 800558c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1cb      	bne.n	800553e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	2200      	movs	r2, #0
 80055ae:	2140      	movs	r1, #64	@ 0x40
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 facd 	bl	8005b50 <UART_WaitOnFlagUntilTimeout>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e006      	b.n	80055d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	e000      	b.n	80055d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80055d4:	2302      	movs	r3, #2
  }
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3720      	adds	r7, #32
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b0ba      	sub	sp, #232	@ 0xe8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005606:	2300      	movs	r3, #0
 8005608:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800560c:	2300      	movs	r3, #0
 800560e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800561e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10f      	bne.n	8005646 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <HAL_UART_IRQHandler+0x66>
 8005632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fbbc 	bl	8005dbc <UART_Receive_IT>
      return;
 8005644:	e25b      	b.n	8005afe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 80de 	beq.w	800580c <HAL_UART_IRQHandler+0x22c>
 8005650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800565c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005660:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80d1 	beq.w	800580c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800566a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00b      	beq.n	800568e <HAL_UART_IRQHandler+0xae>
 8005676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800567a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005686:	f043 0201 	orr.w	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800568e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <HAL_UART_IRQHandler+0xd2>
 800569a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056aa:	f043 0202 	orr.w	r2, r3, #2
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00b      	beq.n	80056d6 <HAL_UART_IRQHandler+0xf6>
 80056be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d005      	beq.n	80056d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ce:	f043 0204 	orr.w	r2, r3, #4
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d011      	beq.n	8005706 <HAL_UART_IRQHandler+0x126>
 80056e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d105      	bne.n	80056fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fe:	f043 0208 	orr.w	r2, r3, #8
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 81f2 	beq.w	8005af4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <HAL_UART_IRQHandler+0x14e>
 800571c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fb47 	bl	8005dbc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	bf14      	ite	ne
 800573c:	2301      	movne	r3, #1
 800573e:	2300      	moveq	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d103      	bne.n	800575a <HAL_UART_IRQHandler+0x17a>
 8005752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005756:	2b00      	cmp	r3, #0
 8005758:	d04f      	beq.n	80057fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa51 	bl	8005c02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d041      	beq.n	80057f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3314      	adds	r3, #20
 8005774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800578c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3314      	adds	r3, #20
 8005796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800579a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800579e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80057a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1d9      	bne.n	800576e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d013      	beq.n	80057ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c6:	4a7e      	ldr	r2, [pc, #504]	@ (80059c0 <HAL_UART_IRQHandler+0x3e0>)
 80057c8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fc ff92 	bl	80026f8 <HAL_DMA_Abort_IT>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d016      	beq.n	8005808 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057e4:	4610      	mov	r0, r2
 80057e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e8:	e00e      	b.n	8005808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f99c 	bl	8005b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	e00a      	b.n	8005808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f998 	bl	8005b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	e006      	b.n	8005808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f994 	bl	8005b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005806:	e175      	b.n	8005af4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005808:	bf00      	nop
    return;
 800580a:	e173      	b.n	8005af4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005810:	2b01      	cmp	r3, #1
 8005812:	f040 814f 	bne.w	8005ab4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 8148 	beq.w	8005ab4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8141 	beq.w	8005ab4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005832:	2300      	movs	r3, #0
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	60bb      	str	r3, [r7, #8]
 8005846:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 80b6 	beq.w	80059c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005864:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 8145 	beq.w	8005af8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005876:	429a      	cmp	r2, r3
 8005878:	f080 813e 	bcs.w	8005af8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005882:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	2b20      	cmp	r3, #32
 800588c:	f000 8088 	beq.w	80059a0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	330c      	adds	r3, #12
 8005896:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80058a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	330c      	adds	r3, #12
 80058b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80058bc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1d9      	bne.n	8005890 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3314      	adds	r3, #20
 80058e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058e6:	e853 3f00 	ldrex	r3, [r3]
 80058ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3314      	adds	r3, #20
 80058fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005900:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005904:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005908:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800590c:	e841 2300 	strex	r3, r2, [r1]
 8005910:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005912:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1e1      	bne.n	80058dc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3314      	adds	r3, #20
 800591e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800592a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800592e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3314      	adds	r3, #20
 8005938:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800593c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800593e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005942:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800594a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e3      	bne.n	8005918 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800596e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005970:	f023 0310 	bic.w	r3, r3, #16
 8005974:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	330c      	adds	r3, #12
 800597e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005982:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005984:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005988:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e3      	bne.n	800595e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599a:	4618      	mov	r0, r3
 800599c:	f7fc fe71 	bl	8002682 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f8bf 	bl	8005b3a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059bc:	e09c      	b.n	8005af8 <HAL_UART_IRQHandler+0x518>
 80059be:	bf00      	nop
 80059c0:	08005cc7 	.word	0x08005cc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 808e 	beq.w	8005afc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80059e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 8089 	beq.w	8005afc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	330c      	adds	r3, #12
 80059f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a0e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e3      	bne.n	80059ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3314      	adds	r3, #20
 8005a28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	623b      	str	r3, [r7, #32]
   return(result);
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	f023 0301 	bic.w	r3, r3, #1
 8005a38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3314      	adds	r3, #20
 8005a42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a46:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e3      	bne.n	8005a22 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0310 	bic.w	r3, r3, #16
 8005a7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	330c      	adds	r3, #12
 8005a88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005a8c:	61fa      	str	r2, [r7, #28]
 8005a8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	69b9      	ldr	r1, [r7, #24]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	e841 2300 	strex	r3, r2, [r1]
 8005a98:	617b      	str	r3, [r7, #20]
   return(result);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e3      	bne.n	8005a68 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aa6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f844 	bl	8005b3a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ab2:	e023      	b.n	8005afc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x4f4>
 8005ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f90e 	bl	8005cee <UART_Transmit_IT>
    return;
 8005ad2:	e014      	b.n	8005afe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00e      	beq.n	8005afe <HAL_UART_IRQHandler+0x51e>
 8005ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d008      	beq.n	8005afe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f94d 	bl	8005d8c <UART_EndTransmit_IT>
    return;
 8005af2:	e004      	b.n	8005afe <HAL_UART_IRQHandler+0x51e>
    return;
 8005af4:	bf00      	nop
 8005af6:	e002      	b.n	8005afe <HAL_UART_IRQHandler+0x51e>
      return;
 8005af8:	bf00      	nop
 8005afa:	e000      	b.n	8005afe <HAL_UART_IRQHandler+0x51e>
      return;
 8005afc:	bf00      	nop
  }
}
 8005afe:	37e8      	adds	r7, #232	@ 0xe8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr

08005b16 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b1e:	bf00      	nop
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bc80      	pop	{r7}
 8005b26:	4770      	bx	lr

08005b28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr

08005b3a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	460b      	mov	r3, r1
 8005b44:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	603b      	str	r3, [r7, #0]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b60:	e03b      	b.n	8005bda <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b68:	d037      	beq.n	8005bda <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b6a:	f7fc fc7d 	bl	8002468 <HAL_GetTick>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	6a3a      	ldr	r2, [r7, #32]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d302      	bcc.n	8005b80 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e03a      	b.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d023      	beq.n	8005bda <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b80      	cmp	r3, #128	@ 0x80
 8005b96:	d020      	beq.n	8005bda <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2b40      	cmp	r3, #64	@ 0x40
 8005b9c:	d01d      	beq.n	8005bda <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d116      	bne.n	8005bda <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	617b      	str	r3, [r7, #20]
 8005bc0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f81d 	bl	8005c02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2208      	movs	r2, #8
 8005bcc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e00f      	b.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4013      	ands	r3, r2
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	bf0c      	ite	eq
 8005bea:	2301      	moveq	r3, #1
 8005bec:	2300      	movne	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d0b4      	beq.n	8005b62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b095      	sub	sp, #84	@ 0x54
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	330c      	adds	r3, #12
 8005c28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e5      	bne.n	8005c0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3314      	adds	r3, #20
 8005c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3314      	adds	r3, #20
 8005c5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e5      	bne.n	8005c3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d119      	bne.n	8005cae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	e853 3f00 	ldrex	r3, [r3]
 8005c88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f023 0310 	bic.w	r3, r3, #16
 8005c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c9a:	61ba      	str	r2, [r7, #24]
 8005c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9e:	6979      	ldr	r1, [r7, #20]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e5      	bne.n	8005c7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005cbc:	bf00      	nop
 8005cbe:	3754      	adds	r7, #84	@ 0x54
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr

08005cc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f7ff ff21 	bl	8005b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ce6:	bf00      	nop
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b085      	sub	sp, #20
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b21      	cmp	r3, #33	@ 0x21
 8005d00:	d13e      	bne.n	8005d80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d0a:	d114      	bne.n	8005d36 <UART_Transmit_IT+0x48>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d110      	bne.n	8005d36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	1c9a      	adds	r2, r3, #2
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	621a      	str	r2, [r3, #32]
 8005d34:	e008      	b.n	8005d48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	1c59      	adds	r1, r3, #1
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6211      	str	r1, [r2, #32]
 8005d40:	781a      	ldrb	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	4619      	mov	r1, r3
 8005d56:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10f      	bne.n	8005d7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e000      	b.n	8005d82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d80:	2302      	movs	r3, #2
  }
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr

08005d8c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005da2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff fea9 	bl	8005b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08c      	sub	sp, #48	@ 0x30
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b22      	cmp	r3, #34	@ 0x22
 8005dce:	f040 80ae 	bne.w	8005f2e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dda:	d117      	bne.n	8005e0c <UART_Receive_IT+0x50>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d113      	bne.n	8005e0c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005de4:	2300      	movs	r3, #0
 8005de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e04:	1c9a      	adds	r2, r3, #2
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e0a:	e026      	b.n	8005e5a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e1e:	d007      	beq.n	8005e30 <UART_Receive_IT+0x74>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <UART_Receive_IT+0x82>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d106      	bne.n	8005e3e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	e008      	b.n	8005e50 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	4619      	mov	r1, r3
 8005e68:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d15d      	bne.n	8005f2a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 0220 	bic.w	r2, r2, #32
 8005e7c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	695a      	ldr	r2, [r3, #20]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0201 	bic.w	r2, r2, #1
 8005e9c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d135      	bne.n	8005f20 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	330c      	adds	r3, #12
 8005ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f023 0310 	bic.w	r3, r3, #16
 8005ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	330c      	adds	r3, #12
 8005ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eda:	623a      	str	r2, [r7, #32]
 8005edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	69f9      	ldr	r1, [r7, #28]
 8005ee0:	6a3a      	ldr	r2, [r7, #32]
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e5      	bne.n	8005eba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	2b10      	cmp	r3, #16
 8005efa:	d10a      	bne.n	8005f12 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff fe0e 	bl	8005b3a <HAL_UARTEx_RxEventCallback>
 8005f1e:	e002      	b.n	8005f26 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff fdf8 	bl	8005b16 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	e002      	b.n	8005f30 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e000      	b.n	8005f30 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f2e:	2302      	movs	r3, #2
  }
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3730      	adds	r7, #48	@ 0x30
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005f72:	f023 030c 	bic.w	r3, r3, #12
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	68b9      	ldr	r1, [r7, #8]
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800604c <UART_SetConfig+0x114>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d103      	bne.n	8005fa8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005fa0:	f7fe fa02 	bl	80043a8 <HAL_RCC_GetPCLK2Freq>
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	e002      	b.n	8005fae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fa8:	f7fe f9ea 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8005fac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009a      	lsls	r2, r3, #2
 8005fb8:	441a      	add	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc4:	4a22      	ldr	r2, [pc, #136]	@ (8006050 <UART_SetConfig+0x118>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	0119      	lsls	r1, r3, #4
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009a      	lsls	r2, r3, #2
 8005fd8:	441a      	add	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8006050 <UART_SetConfig+0x118>)
 8005fe6:	fba3 0302 	umull	r0, r3, r3, r2
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	2064      	movs	r0, #100	@ 0x64
 8005fee:	fb00 f303 	mul.w	r3, r0, r3
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	3332      	adds	r3, #50	@ 0x32
 8005ff8:	4a15      	ldr	r2, [pc, #84]	@ (8006050 <UART_SetConfig+0x118>)
 8005ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006004:	4419      	add	r1, r3
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009a      	lsls	r2, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	fbb2 f2f3 	udiv	r2, r2, r3
 800601c:	4b0c      	ldr	r3, [pc, #48]	@ (8006050 <UART_SetConfig+0x118>)
 800601e:	fba3 0302 	umull	r0, r3, r3, r2
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	2064      	movs	r0, #100	@ 0x64
 8006026:	fb00 f303 	mul.w	r3, r0, r3
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	3332      	adds	r3, #50	@ 0x32
 8006030:	4a07      	ldr	r2, [pc, #28]	@ (8006050 <UART_SetConfig+0x118>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	095b      	lsrs	r3, r3, #5
 8006038:	f003 020f 	and.w	r2, r3, #15
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	440a      	add	r2, r1
 8006042:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40013800 	.word	0x40013800
 8006050:	51eb851f 	.word	0x51eb851f

08006054 <__NVIC_SetPriority>:
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	4603      	mov	r3, r0
 800605c:	6039      	str	r1, [r7, #0]
 800605e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006064:	2b00      	cmp	r3, #0
 8006066:	db0a      	blt.n	800607e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	b2da      	uxtb	r2, r3
 800606c:	490c      	ldr	r1, [pc, #48]	@ (80060a0 <__NVIC_SetPriority+0x4c>)
 800606e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006072:	0112      	lsls	r2, r2, #4
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	440b      	add	r3, r1
 8006078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800607c:	e00a      	b.n	8006094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	b2da      	uxtb	r2, r3
 8006082:	4908      	ldr	r1, [pc, #32]	@ (80060a4 <__NVIC_SetPriority+0x50>)
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	3b04      	subs	r3, #4
 800608c:	0112      	lsls	r2, r2, #4
 800608e:	b2d2      	uxtb	r2, r2
 8006090:	440b      	add	r3, r1
 8006092:	761a      	strb	r2, [r3, #24]
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	bc80      	pop	{r7}
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	e000e100 	.word	0xe000e100
 80060a4:	e000ed00 	.word	0xe000ed00

080060a8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80060ac:	4b05      	ldr	r3, [pc, #20]	@ (80060c4 <SysTick_Handler+0x1c>)
 80060ae:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80060b0:	f001 fd66 	bl	8007b80 <xTaskGetSchedulerState>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d001      	beq.n	80060be <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80060ba:	f002 fb0d 	bl	80086d8 <xPortSysTickHandler>
  }
}
 80060be:	bf00      	nop
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	e000e010 	.word	0xe000e010

080060c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80060cc:	2100      	movs	r1, #0
 80060ce:	f06f 0004 	mvn.w	r0, #4
 80060d2:	f7ff ffbf 	bl	8006054 <__NVIC_SetPriority>
#endif
}
 80060d6:	bf00      	nop
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060e2:	f3ef 8305 	mrs	r3, IPSR
 80060e6:	603b      	str	r3, [r7, #0]
  return(result);
 80060e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80060ee:	f06f 0305 	mvn.w	r3, #5
 80060f2:	607b      	str	r3, [r7, #4]
 80060f4:	e00c      	b.n	8006110 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060f6:	4b09      	ldr	r3, [pc, #36]	@ (800611c <osKernelInitialize+0x40>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d105      	bne.n	800610a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060fe:	4b07      	ldr	r3, [pc, #28]	@ (800611c <osKernelInitialize+0x40>)
 8006100:	2201      	movs	r2, #1
 8006102:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006104:	2300      	movs	r3, #0
 8006106:	607b      	str	r3, [r7, #4]
 8006108:	e002      	b.n	8006110 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800610a:	f04f 33ff 	mov.w	r3, #4294967295
 800610e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006110:	687b      	ldr	r3, [r7, #4]
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	bc80      	pop	{r7}
 800611a:	4770      	bx	lr
 800611c:	200003bc 	.word	0x200003bc

08006120 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006126:	f3ef 8305 	mrs	r3, IPSR
 800612a:	603b      	str	r3, [r7, #0]
  return(result);
 800612c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006132:	f06f 0305 	mvn.w	r3, #5
 8006136:	607b      	str	r3, [r7, #4]
 8006138:	e010      	b.n	800615c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800613a:	4b0b      	ldr	r3, [pc, #44]	@ (8006168 <osKernelStart+0x48>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d109      	bne.n	8006156 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006142:	f7ff ffc1 	bl	80060c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006146:	4b08      	ldr	r3, [pc, #32]	@ (8006168 <osKernelStart+0x48>)
 8006148:	2202      	movs	r2, #2
 800614a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800614c:	f001 f8b8 	bl	80072c0 <vTaskStartScheduler>
      stat = osOK;
 8006150:	2300      	movs	r3, #0
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	e002      	b.n	800615c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006156:	f04f 33ff 	mov.w	r3, #4294967295
 800615a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800615c:	687b      	ldr	r3, [r7, #4]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	200003bc 	.word	0x200003bc

0800616c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b08e      	sub	sp, #56	@ 0x38
 8006170:	af04      	add	r7, sp, #16
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006178:	2300      	movs	r3, #0
 800617a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800617c:	f3ef 8305 	mrs	r3, IPSR
 8006180:	617b      	str	r3, [r7, #20]
  return(result);
 8006182:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006184:	2b00      	cmp	r3, #0
 8006186:	d17e      	bne.n	8006286 <osThreadNew+0x11a>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d07b      	beq.n	8006286 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800618e:	2380      	movs	r3, #128	@ 0x80
 8006190:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006192:	2318      	movs	r3, #24
 8006194:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800619a:	f04f 33ff 	mov.w	r3, #4294967295
 800619e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d045      	beq.n	8006232 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <osThreadNew+0x48>
        name = attr->name;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d008      	beq.n	80061da <osThreadNew+0x6e>
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	2b38      	cmp	r3, #56	@ 0x38
 80061cc:	d805      	bhi.n	80061da <osThreadNew+0x6e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <osThreadNew+0x72>
        return (NULL);
 80061da:	2300      	movs	r3, #0
 80061dc:	e054      	b.n	8006288 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	089b      	lsrs	r3, r3, #2
 80061ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00e      	beq.n	8006214 <osThreadNew+0xa8>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	2ba7      	cmp	r3, #167	@ 0xa7
 80061fc:	d90a      	bls.n	8006214 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006202:	2b00      	cmp	r3, #0
 8006204:	d006      	beq.n	8006214 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d002      	beq.n	8006214 <osThreadNew+0xa8>
        mem = 1;
 800620e:	2301      	movs	r3, #1
 8006210:	61bb      	str	r3, [r7, #24]
 8006212:	e010      	b.n	8006236 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10c      	bne.n	8006236 <osThreadNew+0xca>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d108      	bne.n	8006236 <osThreadNew+0xca>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d104      	bne.n	8006236 <osThreadNew+0xca>
          mem = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	e001      	b.n	8006236 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006232:	2300      	movs	r3, #0
 8006234:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d110      	bne.n	800625e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006244:	9202      	str	r2, [sp, #8]
 8006246:	9301      	str	r3, [sp, #4]
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	6a3a      	ldr	r2, [r7, #32]
 8006250:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fdf6 	bl	8006e44 <xTaskCreateStatic>
 8006258:	4603      	mov	r3, r0
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	e013      	b.n	8006286 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d110      	bne.n	8006286 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	b29a      	uxth	r2, r3
 8006268:	f107 0310 	add.w	r3, r7, #16
 800626c:	9301      	str	r3, [sp, #4]
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 fe44 	bl	8006f04 <xTaskCreate>
 800627c:	4603      	mov	r3, r0
 800627e:	2b01      	cmp	r3, #1
 8006280:	d001      	beq.n	8006286 <osThreadNew+0x11a>
            hTask = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006286:	693b      	ldr	r3, [r7, #16]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3728      	adds	r7, #40	@ 0x28
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4a06      	ldr	r2, [pc, #24]	@ (80062b8 <vApplicationGetIdleTaskMemory+0x28>)
 80062a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4a05      	ldr	r2, [pc, #20]	@ (80062bc <vApplicationGetIdleTaskMemory+0x2c>)
 80062a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2280      	movs	r2, #128	@ 0x80
 80062ac:	601a      	str	r2, [r3, #0]
}
 80062ae:	bf00      	nop
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr
 80062b8:	200003c0 	.word	0x200003c0
 80062bc:	20000468 	.word	0x20000468

080062c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4a07      	ldr	r2, [pc, #28]	@ (80062ec <vApplicationGetTimerTaskMemory+0x2c>)
 80062d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	4a06      	ldr	r2, [pc, #24]	@ (80062f0 <vApplicationGetTimerTaskMemory+0x30>)
 80062d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062de:	601a      	str	r2, [r3, #0]
}
 80062e0:	bf00      	nop
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc80      	pop	{r7}
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	20000668 	.word	0x20000668
 80062f0:	20000710 	.word	0x20000710

080062f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f103 0208 	add.w	r2, r3, #8
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f04f 32ff 	mov.w	r2, #4294967295
 800630c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f103 0208 	add.w	r2, r3, #8
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f103 0208 	add.w	r2, r3, #8
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr

08006332 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	bc80      	pop	{r7}
 8006348:	4770      	bx	lr

0800634a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	601a      	str	r2, [r3, #0]
}
 8006386:	bf00      	nop
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr

08006390 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a6:	d103      	bne.n	80063b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	e00c      	b.n	80063ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3308      	adds	r3, #8
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	e002      	b.n	80063be <vListInsert+0x2e>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d2f6      	bcs.n	80063b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	601a      	str	r2, [r3, #0]
}
 80063f6:	bf00      	nop
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr

08006400 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6892      	ldr	r2, [r2, #8]
 8006416:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6852      	ldr	r2, [r2, #4]
 8006420:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	429a      	cmp	r2, r3
 800642a:	d103      	bne.n	8006434 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	1e5a      	subs	r2, r3, #1
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr
	...

08006454 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800647a:	bf00      	nop
 800647c:	bf00      	nop
 800647e:	e7fd      	b.n	800647c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006480:	f002 f8ac 	bl	80085dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648c:	68f9      	ldr	r1, [r7, #12]
 800648e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006490:	fb01 f303 	mul.w	r3, r1, r3
 8006494:	441a      	add	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b0:	3b01      	subs	r3, #1
 80064b2:	68f9      	ldr	r1, [r7, #12]
 80064b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80064b6:	fb01 f303 	mul.w	r3, r1, r3
 80064ba:	441a      	add	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	22ff      	movs	r2, #255	@ 0xff
 80064c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	22ff      	movs	r2, #255	@ 0xff
 80064cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d114      	bne.n	8006500 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d01a      	beq.n	8006514 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3310      	adds	r3, #16
 80064e2:	4618      	mov	r0, r3
 80064e4:	f001 f986 	bl	80077f4 <xTaskRemoveFromEventList>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d012      	beq.n	8006514 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006524 <xQueueGenericReset+0xd0>)
 80064f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	e009      	b.n	8006514 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3310      	adds	r3, #16
 8006504:	4618      	mov	r0, r3
 8006506:	f7ff fef5 	bl	80062f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3324      	adds	r3, #36	@ 0x24
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff fef0 	bl	80062f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006514:	f002 f892 	bl	800863c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006518:	2301      	movs	r3, #1
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	e000ed04 	.word	0xe000ed04

08006528 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006528:	b580      	push	{r7, lr}
 800652a:	b08e      	sub	sp, #56	@ 0x38
 800652c:	af02      	add	r7, sp, #8
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	e7fd      	b.n	8006550 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10b      	bne.n	8006572 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800656c:	bf00      	nop
 800656e:	bf00      	nop
 8006570:	e7fd      	b.n	800656e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <xQueueGenericCreateStatic+0x56>
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <xQueueGenericCreateStatic+0x5a>
 800657e:	2301      	movs	r3, #1
 8006580:	e000      	b.n	8006584 <xQueueGenericCreateStatic+0x5c>
 8006582:	2300      	movs	r3, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10b      	bne.n	80065a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658c:	f383 8811 	msr	BASEPRI, r3
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	f3bf 8f4f 	dsb	sy
 8006598:	623b      	str	r3, [r7, #32]
}
 800659a:	bf00      	nop
 800659c:	bf00      	nop
 800659e:	e7fd      	b.n	800659c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <xQueueGenericCreateStatic+0x84>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <xQueueGenericCreateStatic+0x88>
 80065ac:	2301      	movs	r3, #1
 80065ae:	e000      	b.n	80065b2 <xQueueGenericCreateStatic+0x8a>
 80065b0:	2300      	movs	r3, #0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10b      	bne.n	80065ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	61fb      	str	r3, [r7, #28]
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop
 80065cc:	e7fd      	b.n	80065ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065ce:	2350      	movs	r3, #80	@ 0x50
 80065d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b50      	cmp	r3, #80	@ 0x50
 80065d6:	d00b      	beq.n	80065f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	61bb      	str	r3, [r7, #24]
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	e7fd      	b.n	80065ec <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80065f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80065f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00d      	beq.n	8006618 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006604:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	4613      	mov	r3, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f805 	bl	8006622 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800661a:	4618      	mov	r0, r3
 800661c:	3730      	adds	r7, #48	@ 0x30
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
 800662e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d103      	bne.n	800663e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	69ba      	ldr	r2, [r7, #24]
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e002      	b.n	8006644 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006650:	2101      	movs	r1, #1
 8006652:	69b8      	ldr	r0, [r7, #24]
 8006654:	f7ff fefe 	bl	8006454 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	78fa      	ldrb	r2, [r7, #3]
 800665c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08e      	sub	sp, #56	@ 0x38
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006676:	2300      	movs	r3, #0
 8006678:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800667e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10b      	bne.n	800669c <xQueueGenericSend+0x34>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006696:	bf00      	nop
 8006698:	bf00      	nop
 800669a:	e7fd      	b.n	8006698 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d103      	bne.n	80066aa <xQueueGenericSend+0x42>
 80066a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <xQueueGenericSend+0x46>
 80066aa:	2301      	movs	r3, #1
 80066ac:	e000      	b.n	80066b0 <xQueueGenericSend+0x48>
 80066ae:	2300      	movs	r3, #0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10b      	bne.n	80066cc <xQueueGenericSend+0x64>
	__asm volatile
 80066b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066c6:	bf00      	nop
 80066c8:	bf00      	nop
 80066ca:	e7fd      	b.n	80066c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d103      	bne.n	80066da <xQueueGenericSend+0x72>
 80066d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <xQueueGenericSend+0x76>
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <xQueueGenericSend+0x78>
 80066de:	2300      	movs	r3, #0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10b      	bne.n	80066fc <xQueueGenericSend+0x94>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	623b      	str	r3, [r7, #32]
}
 80066f6:	bf00      	nop
 80066f8:	bf00      	nop
 80066fa:	e7fd      	b.n	80066f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066fc:	f001 fa40 	bl	8007b80 <xTaskGetSchedulerState>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d102      	bne.n	800670c <xQueueGenericSend+0xa4>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <xQueueGenericSend+0xa8>
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <xQueueGenericSend+0xaa>
 8006710:	2300      	movs	r3, #0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10b      	bne.n	800672e <xQueueGenericSend+0xc6>
	__asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	61fb      	str	r3, [r7, #28]
}
 8006728:	bf00      	nop
 800672a:	bf00      	nop
 800672c:	e7fd      	b.n	800672a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800672e:	f001 ff55 	bl	80085dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800673a:	429a      	cmp	r2, r3
 800673c:	d302      	bcc.n	8006744 <xQueueGenericSend+0xdc>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d129      	bne.n	8006798 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800674a:	f000 fa0f 	bl	8006b6c <prvCopyDataToQueue>
 800674e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006754:	2b00      	cmp	r3, #0
 8006756:	d010      	beq.n	800677a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800675a:	3324      	adds	r3, #36	@ 0x24
 800675c:	4618      	mov	r0, r3
 800675e:	f001 f849 	bl	80077f4 <xTaskRemoveFromEventList>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d013      	beq.n	8006790 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006768:	4b3f      	ldr	r3, [pc, #252]	@ (8006868 <xQueueGenericSend+0x200>)
 800676a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	e00a      	b.n	8006790 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800677a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d007      	beq.n	8006790 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006780:	4b39      	ldr	r3, [pc, #228]	@ (8006868 <xQueueGenericSend+0x200>)
 8006782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006790:	f001 ff54 	bl	800863c <vPortExitCritical>
				return pdPASS;
 8006794:	2301      	movs	r3, #1
 8006796:	e063      	b.n	8006860 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d103      	bne.n	80067a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800679e:	f001 ff4d 	bl	800863c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	e05c      	b.n	8006860 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d106      	bne.n	80067ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067ac:	f107 0314 	add.w	r3, r7, #20
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 f883 	bl	80078bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067b6:	2301      	movs	r3, #1
 80067b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067ba:	f001 ff3f 	bl	800863c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067be:	f000 fdef 	bl	80073a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067c2:	f001 ff0b 	bl	80085dc <vPortEnterCritical>
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067cc:	b25b      	sxtb	r3, r3
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d2:	d103      	bne.n	80067dc <xQueueGenericSend+0x174>
 80067d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067e2:	b25b      	sxtb	r3, r3
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e8:	d103      	bne.n	80067f2 <xQueueGenericSend+0x18a>
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067f2:	f001 ff23 	bl	800863c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067f6:	1d3a      	adds	r2, r7, #4
 80067f8:	f107 0314 	add.w	r3, r7, #20
 80067fc:	4611      	mov	r1, r2
 80067fe:	4618      	mov	r0, r3
 8006800:	f001 f872 	bl	80078e8 <xTaskCheckForTimeOut>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d124      	bne.n	8006854 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800680a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800680c:	f000 faa6 	bl	8006d5c <prvIsQueueFull>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d018      	beq.n	8006848 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006818:	3310      	adds	r3, #16
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	4611      	mov	r1, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f000 ff96 	bl	8007750 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006824:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006826:	f000 fa31 	bl	8006c8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800682a:	f000 fdc7 	bl	80073bc <xTaskResumeAll>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	f47f af7c 	bne.w	800672e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006836:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <xQueueGenericSend+0x200>)
 8006838:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	e772      	b.n	800672e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006848:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800684a:	f000 fa1f 	bl	8006c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800684e:	f000 fdb5 	bl	80073bc <xTaskResumeAll>
 8006852:	e76c      	b.n	800672e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006854:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006856:	f000 fa19 	bl	8006c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800685a:	f000 fdaf 	bl	80073bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800685e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006860:	4618      	mov	r0, r3
 8006862:	3738      	adds	r7, #56	@ 0x38
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b090      	sub	sp, #64	@ 0x40
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800687e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10b      	bne.n	800689c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006896:	bf00      	nop
 8006898:	bf00      	nop
 800689a:	e7fd      	b.n	8006898 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d103      	bne.n	80068aa <xQueueGenericSendFromISR+0x3e>
 80068a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <xQueueGenericSendFromISR+0x42>
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <xQueueGenericSendFromISR+0x44>
 80068ae:	2300      	movs	r3, #0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10b      	bne.n	80068cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068c6:	bf00      	nop
 80068c8:	bf00      	nop
 80068ca:	e7fd      	b.n	80068c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d103      	bne.n	80068da <xQueueGenericSendFromISR+0x6e>
 80068d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <xQueueGenericSendFromISR+0x72>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <xQueueGenericSendFromISR+0x74>
 80068de:	2300      	movs	r3, #0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10b      	bne.n	80068fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	623b      	str	r3, [r7, #32]
}
 80068f6:	bf00      	nop
 80068f8:	bf00      	nop
 80068fa:	e7fd      	b.n	80068f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068fc:	f001 ff30 	bl	8008760 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006900:	f3ef 8211 	mrs	r2, BASEPRI
 8006904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	61fa      	str	r2, [r7, #28]
 8006916:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006918:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800691a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800691c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <xQueueGenericSendFromISR+0xc2>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d12f      	bne.n	800698e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800692e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006930:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006934:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006944:	f000 f912 	bl	8006b6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006948:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006950:	d112      	bne.n	8006978 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006956:	2b00      	cmp	r3, #0
 8006958:	d016      	beq.n	8006988 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800695a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695c:	3324      	adds	r3, #36	@ 0x24
 800695e:	4618      	mov	r0, r3
 8006960:	f000 ff48 	bl	80077f4 <xTaskRemoveFromEventList>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00e      	beq.n	8006988 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00b      	beq.n	8006988 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	e007      	b.n	8006988 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006978:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800697c:	3301      	adds	r3, #1
 800697e:	b2db      	uxtb	r3, r3
 8006980:	b25a      	sxtb	r2, r3
 8006982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006988:	2301      	movs	r3, #1
 800698a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800698c:	e001      	b.n	8006992 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800698e:	2300      	movs	r3, #0
 8006990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006994:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800699c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800699e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3740      	adds	r7, #64	@ 0x40
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08c      	sub	sp, #48	@ 0x30
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10b      	bne.n	80069da <xQueueReceive+0x32>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	623b      	str	r3, [r7, #32]
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	e7fd      	b.n	80069d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d103      	bne.n	80069e8 <xQueueReceive+0x40>
 80069e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <xQueueReceive+0x44>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e000      	b.n	80069ee <xQueueReceive+0x46>
 80069ec:	2300      	movs	r3, #0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10b      	bne.n	8006a0a <xQueueReceive+0x62>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	61fb      	str	r3, [r7, #28]
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
 8006a08:	e7fd      	b.n	8006a06 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a0a:	f001 f8b9 	bl	8007b80 <xTaskGetSchedulerState>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d102      	bne.n	8006a1a <xQueueReceive+0x72>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <xQueueReceive+0x76>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <xQueueReceive+0x78>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10b      	bne.n	8006a3c <xQueueReceive+0x94>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	61bb      	str	r3, [r7, #24]
}
 8006a36:	bf00      	nop
 8006a38:	bf00      	nop
 8006a3a:	e7fd      	b.n	8006a38 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a3c:	f001 fdce 	bl	80085dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a44:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01f      	beq.n	8006a8c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a50:	f000 f8f6 	bl	8006c40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a56:	1e5a      	subs	r2, r3, #1
 8006a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00f      	beq.n	8006a84 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a66:	3310      	adds	r3, #16
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fec3 	bl	80077f4 <xTaskRemoveFromEventList>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a74:	4b3c      	ldr	r3, [pc, #240]	@ (8006b68 <xQueueReceive+0x1c0>)
 8006a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a84:	f001 fdda 	bl	800863c <vPortExitCritical>
				return pdPASS;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e069      	b.n	8006b60 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d103      	bne.n	8006a9a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a92:	f001 fdd3 	bl	800863c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e062      	b.n	8006b60 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d106      	bne.n	8006aae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006aa0:	f107 0310 	add.w	r3, r7, #16
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f000 ff09 	bl	80078bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006aae:	f001 fdc5 	bl	800863c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ab2:	f000 fc75 	bl	80073a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ab6:	f001 fd91 	bl	80085dc <vPortEnterCritical>
 8006aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ac0:	b25b      	sxtb	r3, r3
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d103      	bne.n	8006ad0 <xQueueReceive+0x128>
 8006ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ad6:	b25b      	sxtb	r3, r3
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006adc:	d103      	bne.n	8006ae6 <xQueueReceive+0x13e>
 8006ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ae6:	f001 fda9 	bl	800863c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006aea:	1d3a      	adds	r2, r7, #4
 8006aec:	f107 0310 	add.w	r3, r7, #16
 8006af0:	4611      	mov	r1, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fef8 	bl	80078e8 <xTaskCheckForTimeOut>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d123      	bne.n	8006b46 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b00:	f000 f916 	bl	8006d30 <prvIsQueueEmpty>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d017      	beq.n	8006b3a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b0c:	3324      	adds	r3, #36	@ 0x24
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	4611      	mov	r1, r2
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fe1c 	bl	8007750 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b1a:	f000 f8b7 	bl	8006c8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b1e:	f000 fc4d 	bl	80073bc <xTaskResumeAll>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d189      	bne.n	8006a3c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006b28:	4b0f      	ldr	r3, [pc, #60]	@ (8006b68 <xQueueReceive+0x1c0>)
 8006b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	e780      	b.n	8006a3c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b3c:	f000 f8a6 	bl	8006c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b40:	f000 fc3c 	bl	80073bc <xTaskResumeAll>
 8006b44:	e77a      	b.n	8006a3c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b48:	f000 f8a0 	bl	8006c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b4c:	f000 fc36 	bl	80073bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b52:	f000 f8ed 	bl	8006d30 <prvIsQueueEmpty>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f43f af6f 	beq.w	8006a3c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b5e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3730      	adds	r7, #48	@ 0x30
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10d      	bne.n	8006ba6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d14d      	bne.n	8006c2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f001 f810 	bl	8007bbc <xTaskPriorityDisinherit>
 8006b9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	609a      	str	r2, [r3, #8]
 8006ba4:	e043      	b.n	8006c2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d119      	bne.n	8006be0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6858      	ldr	r0, [r3, #4]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	68b9      	ldr	r1, [r7, #8]
 8006bb8:	f002 fe5b 	bl	8009872 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685a      	ldr	r2, [r3, #4]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc4:	441a      	add	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d32b      	bcc.n	8006c2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	605a      	str	r2, [r3, #4]
 8006bde:	e026      	b.n	8006c2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	68d8      	ldr	r0, [r3, #12]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be8:	461a      	mov	r2, r3
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	f002 fe41 	bl	8009872 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	68da      	ldr	r2, [r3, #12]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf8:	425b      	negs	r3, r3
 8006bfa:	441a      	add	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d207      	bcs.n	8006c1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c14:	425b      	negs	r3, r3
 8006c16:	441a      	add	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d105      	bne.n	8006c2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006c36:	697b      	ldr	r3, [r7, #20]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d018      	beq.n	8006c84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5a:	441a      	add	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d303      	bcc.n	8006c74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68d9      	ldr	r1, [r3, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6838      	ldr	r0, [r7, #0]
 8006c80:	f002 fdf7 	bl	8009872 <memcpy>
	}
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c94:	f001 fca2 	bl	80085dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ca0:	e011      	b.n	8006cc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d012      	beq.n	8006cd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3324      	adds	r3, #36	@ 0x24
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fda0 	bl	80077f4 <xTaskRemoveFromEventList>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006cba:	f000 fe79 	bl	80079b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	dce9      	bgt.n	8006ca2 <prvUnlockQueue+0x16>
 8006cce:	e000      	b.n	8006cd2 <prvUnlockQueue+0x46>
					break;
 8006cd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	22ff      	movs	r2, #255	@ 0xff
 8006cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006cda:	f001 fcaf 	bl	800863c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006cde:	f001 fc7d 	bl	80085dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ce8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cea:	e011      	b.n	8006d10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d012      	beq.n	8006d1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3310      	adds	r3, #16
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fd7b 	bl	80077f4 <xTaskRemoveFromEventList>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d04:	f000 fe54 	bl	80079b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	dce9      	bgt.n	8006cec <prvUnlockQueue+0x60>
 8006d18:	e000      	b.n	8006d1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	22ff      	movs	r2, #255	@ 0xff
 8006d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006d24:	f001 fc8a 	bl	800863c <vPortExitCritical>
}
 8006d28:	bf00      	nop
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d38:	f001 fc50 	bl	80085dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d102      	bne.n	8006d4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d44:	2301      	movs	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e001      	b.n	8006d4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d4e:	f001 fc75 	bl	800863c <vPortExitCritical>

	return xReturn;
 8006d52:	68fb      	ldr	r3, [r7, #12]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d64:	f001 fc3a 	bl	80085dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d102      	bne.n	8006d7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d74:	2301      	movs	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e001      	b.n	8006d7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d7e:	f001 fc5d 	bl	800863c <vPortExitCritical>

	return xReturn;
 8006d82:	68fb      	ldr	r3, [r7, #12]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
 8006d9a:	e014      	b.n	8006dc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006d9c:	4a0e      	ldr	r2, [pc, #56]	@ (8006dd8 <vQueueAddToRegistry+0x4c>)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10b      	bne.n	8006dc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006da8:	490b      	ldr	r1, [pc, #44]	@ (8006dd8 <vQueueAddToRegistry+0x4c>)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006db2:	4a09      	ldr	r2, [pc, #36]	@ (8006dd8 <vQueueAddToRegistry+0x4c>)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	4413      	add	r3, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006dbe:	e006      	b.n	8006dce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b07      	cmp	r3, #7
 8006dca:	d9e7      	bls.n	8006d9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bc80      	pop	{r7}
 8006dd6:	4770      	bx	lr
 8006dd8:	20000b10 	.word	0x20000b10

08006ddc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006dec:	f001 fbf6 	bl	80085dc <vPortEnterCritical>
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006df6:	b25b      	sxtb	r3, r3
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d103      	bne.n	8006e06 <vQueueWaitForMessageRestricted+0x2a>
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e0c:	b25b      	sxtb	r3, r3
 8006e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e12:	d103      	bne.n	8006e1c <vQueueWaitForMessageRestricted+0x40>
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e1c:	f001 fc0e 	bl	800863c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d106      	bne.n	8006e36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	3324      	adds	r3, #36	@ 0x24
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fcb3 	bl	800779c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e36:	6978      	ldr	r0, [r7, #20]
 8006e38:	f7ff ff28 	bl	8006c8c <prvUnlockQueue>
	}
 8006e3c:	bf00      	nop
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b08e      	sub	sp, #56	@ 0x38
 8006e48:	af04      	add	r7, sp, #16
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10b      	bne.n	8006e70 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	623b      	str	r3, [r7, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	bf00      	nop
 8006e6e:	e7fd      	b.n	8006e6c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10b      	bne.n	8006e8e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	61fb      	str	r3, [r7, #28]
}
 8006e88:	bf00      	nop
 8006e8a:	bf00      	nop
 8006e8c:	e7fd      	b.n	8006e8a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006e8e:	23a8      	movs	r3, #168	@ 0xa8
 8006e90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	2ba8      	cmp	r3, #168	@ 0xa8
 8006e96:	d00b      	beq.n	8006eb0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	61bb      	str	r3, [r7, #24]
}
 8006eaa:	bf00      	nop
 8006eac:	bf00      	nop
 8006eae:	e7fd      	b.n	8006eac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006eb0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01e      	beq.n	8006ef6 <xTaskCreateStatic+0xb2>
 8006eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d01b      	beq.n	8006ef6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ec6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	9302      	str	r3, [sp, #8]
 8006ed8:	f107 0314 	add.w	r3, r7, #20
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 f851 	bl	8006f90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006eee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ef0:	f000 f8f6 	bl	80070e0 <prvAddNewTaskToReadyList>
 8006ef4:	e001      	b.n	8006efa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006efa:	697b      	ldr	r3, [r7, #20]
	}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3728      	adds	r7, #40	@ 0x28
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08c      	sub	sp, #48	@ 0x30
 8006f08:	af04      	add	r7, sp, #16
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	4613      	mov	r3, r2
 8006f12:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f14:	88fb      	ldrh	r3, [r7, #6]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f001 fc61 	bl	80087e0 <pvPortMalloc>
 8006f1e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00e      	beq.n	8006f44 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f26:	20a8      	movs	r0, #168	@ 0xa8
 8006f28:	f001 fc5a 	bl	80087e0 <pvPortMalloc>
 8006f2c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f3a:	e005      	b.n	8006f48 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f3c:	6978      	ldr	r0, [r7, #20]
 8006f3e:	f001 fd1d 	bl	800897c <vPortFree>
 8006f42:	e001      	b.n	8006f48 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f44:	2300      	movs	r3, #0
 8006f46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d017      	beq.n	8006f7e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006f56:	88fa      	ldrh	r2, [r7, #6]
 8006f58:	2300      	movs	r3, #0
 8006f5a:	9303      	str	r3, [sp, #12]
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	9302      	str	r3, [sp, #8]
 8006f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 f80f 	bl	8006f90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f72:	69f8      	ldr	r0, [r7, #28]
 8006f74:	f000 f8b4 	bl	80070e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	e002      	b.n	8006f84 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006f84:	69bb      	ldr	r3, [r7, #24]
	}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3720      	adds	r7, #32
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	21a5      	movs	r1, #165	@ 0xa5
 8006faa:	f002 fb76 	bl	800969a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	f023 0307 	bic.w	r3, r3, #7
 8006fc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00b      	beq.n	8006fea <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	617b      	str	r3, [r7, #20]
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	e7fd      	b.n	8006fe6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d01f      	beq.n	8007030 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	61fb      	str	r3, [r7, #28]
 8006ff4:	e012      	b.n	800701c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	7819      	ldrb	r1, [r3, #0]
 8006ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	4413      	add	r3, r2
 8007004:	3334      	adds	r3, #52	@ 0x34
 8007006:	460a      	mov	r2, r1
 8007008:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	4413      	add	r3, r2
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d006      	beq.n	8007024 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	3301      	adds	r3, #1
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	2b0f      	cmp	r3, #15
 8007020:	d9e9      	bls.n	8006ff6 <prvInitialiseNewTask+0x66>
 8007022:	e000      	b.n	8007026 <prvInitialiseNewTask+0x96>
			{
				break;
 8007024:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800702e:	e003      	b.n	8007038 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703a:	2b37      	cmp	r3, #55	@ 0x37
 800703c:	d901      	bls.n	8007042 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800703e:	2337      	movs	r3, #55	@ 0x37
 8007040:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007046:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800704c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007050:	2200      	movs	r2, #0
 8007052:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	3304      	adds	r3, #4
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff f96a 	bl	8006332 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	3318      	adds	r3, #24
 8007062:	4618      	mov	r0, r3
 8007064:	f7ff f965 	bl	8006332 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800706c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007070:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007076:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800707c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	2200      	movs	r2, #0
 8007082:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	2200      	movs	r2, #0
 800708a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	3354      	adds	r3, #84	@ 0x54
 8007092:	224c      	movs	r2, #76	@ 0x4c
 8007094:	2100      	movs	r1, #0
 8007096:	4618      	mov	r0, r3
 8007098:	f002 faff 	bl	800969a <memset>
 800709c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709e:	4a0d      	ldr	r2, [pc, #52]	@ (80070d4 <prvInitialiseNewTask+0x144>)
 80070a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80070a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a4:	4a0c      	ldr	r2, [pc, #48]	@ (80070d8 <prvInitialiseNewTask+0x148>)
 80070a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80070a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070aa:	4a0c      	ldr	r2, [pc, #48]	@ (80070dc <prvInitialiseNewTask+0x14c>)
 80070ac:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	68f9      	ldr	r1, [r7, #12]
 80070b2:	69b8      	ldr	r0, [r7, #24]
 80070b4:	f001 f99e 	bl	80083f4 <pxPortInitialiseStack>
 80070b8:	4602      	mov	r2, r0
 80070ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d002      	beq.n	80070ca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070ca:	bf00      	nop
 80070cc:	3720      	adds	r7, #32
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20001da4 	.word	0x20001da4
 80070d8:	20001e0c 	.word	0x20001e0c
 80070dc:	20001e74 	.word	0x20001e74

080070e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80070e8:	f001 fa78 	bl	80085dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80070ec:	4b2d      	ldr	r3, [pc, #180]	@ (80071a4 <prvAddNewTaskToReadyList+0xc4>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	3301      	adds	r3, #1
 80070f2:	4a2c      	ldr	r2, [pc, #176]	@ (80071a4 <prvAddNewTaskToReadyList+0xc4>)
 80070f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80070f6:	4b2c      	ldr	r3, [pc, #176]	@ (80071a8 <prvAddNewTaskToReadyList+0xc8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d109      	bne.n	8007112 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80070fe:	4a2a      	ldr	r2, [pc, #168]	@ (80071a8 <prvAddNewTaskToReadyList+0xc8>)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007104:	4b27      	ldr	r3, [pc, #156]	@ (80071a4 <prvAddNewTaskToReadyList+0xc4>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d110      	bne.n	800712e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800710c:	f000 fc74 	bl	80079f8 <prvInitialiseTaskLists>
 8007110:	e00d      	b.n	800712e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007112:	4b26      	ldr	r3, [pc, #152]	@ (80071ac <prvAddNewTaskToReadyList+0xcc>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d109      	bne.n	800712e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800711a:	4b23      	ldr	r3, [pc, #140]	@ (80071a8 <prvAddNewTaskToReadyList+0xc8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007124:	429a      	cmp	r2, r3
 8007126:	d802      	bhi.n	800712e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007128:	4a1f      	ldr	r2, [pc, #124]	@ (80071a8 <prvAddNewTaskToReadyList+0xc8>)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800712e:	4b20      	ldr	r3, [pc, #128]	@ (80071b0 <prvAddNewTaskToReadyList+0xd0>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	4a1e      	ldr	r2, [pc, #120]	@ (80071b0 <prvAddNewTaskToReadyList+0xd0>)
 8007136:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007138:	4b1d      	ldr	r3, [pc, #116]	@ (80071b0 <prvAddNewTaskToReadyList+0xd0>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007144:	4b1b      	ldr	r3, [pc, #108]	@ (80071b4 <prvAddNewTaskToReadyList+0xd4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	429a      	cmp	r2, r3
 800714a:	d903      	bls.n	8007154 <prvAddNewTaskToReadyList+0x74>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007150:	4a18      	ldr	r2, [pc, #96]	@ (80071b4 <prvAddNewTaskToReadyList+0xd4>)
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007158:	4613      	mov	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4a15      	ldr	r2, [pc, #84]	@ (80071b8 <prvAddNewTaskToReadyList+0xd8>)
 8007162:	441a      	add	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3304      	adds	r3, #4
 8007168:	4619      	mov	r1, r3
 800716a:	4610      	mov	r0, r2
 800716c:	f7ff f8ed 	bl	800634a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007170:	f001 fa64 	bl	800863c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007174:	4b0d      	ldr	r3, [pc, #52]	@ (80071ac <prvAddNewTaskToReadyList+0xcc>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00e      	beq.n	800719a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800717c:	4b0a      	ldr	r3, [pc, #40]	@ (80071a8 <prvAddNewTaskToReadyList+0xc8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007186:	429a      	cmp	r2, r3
 8007188:	d207      	bcs.n	800719a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800718a:	4b0c      	ldr	r3, [pc, #48]	@ (80071bc <prvAddNewTaskToReadyList+0xdc>)
 800718c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800719a:	bf00      	nop
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	20001024 	.word	0x20001024
 80071a8:	20000b50 	.word	0x20000b50
 80071ac:	20001030 	.word	0x20001030
 80071b0:	20001040 	.word	0x20001040
 80071b4:	2000102c 	.word	0x2000102c
 80071b8:	20000b54 	.word	0x20000b54
 80071bc:	e000ed04 	.word	0xe000ed04

080071c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08a      	sub	sp, #40	@ 0x28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10b      	bne.n	80071ec <vTaskDelayUntil+0x2c>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d8:	f383 8811 	msr	BASEPRI, r3
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	f3bf 8f4f 	dsb	sy
 80071e4:	617b      	str	r3, [r7, #20]
}
 80071e6:	bf00      	nop
 80071e8:	bf00      	nop
 80071ea:	e7fd      	b.n	80071e8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <vTaskDelayUntil+0x4a>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	613b      	str	r3, [r7, #16]
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop
 8007208:	e7fd      	b.n	8007206 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800720a:	4b2a      	ldr	r3, [pc, #168]	@ (80072b4 <vTaskDelayUntil+0xf4>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <vTaskDelayUntil+0x6a>
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	60fb      	str	r3, [r7, #12]
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	e7fd      	b.n	8007226 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800722a:	f000 f8b9 	bl	80073a0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800722e:	4b22      	ldr	r3, [pc, #136]	@ (80072b8 <vTaskDelayUntil+0xf8>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	4413      	add	r3, r2
 800723c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6a3a      	ldr	r2, [r7, #32]
 8007244:	429a      	cmp	r2, r3
 8007246:	d20b      	bcs.n	8007260 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69fa      	ldr	r2, [r7, #28]
 800724e:	429a      	cmp	r2, r3
 8007250:	d211      	bcs.n	8007276 <vTaskDelayUntil+0xb6>
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	429a      	cmp	r2, r3
 8007258:	d90d      	bls.n	8007276 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800725a:	2301      	movs	r3, #1
 800725c:	627b      	str	r3, [r7, #36]	@ 0x24
 800725e:	e00a      	b.n	8007276 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	429a      	cmp	r2, r3
 8007268:	d303      	bcc.n	8007272 <vTaskDelayUntil+0xb2>
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	429a      	cmp	r2, r3
 8007270:	d901      	bls.n	8007276 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007272:	2301      	movs	r3, #1
 8007274:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	2b00      	cmp	r3, #0
 8007280:	d006      	beq.n	8007290 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2100      	movs	r1, #0
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fd06 	bl	8007c9c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007290:	f000 f894 	bl	80073bc <xTaskResumeAll>
 8007294:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d107      	bne.n	80072ac <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800729c:	4b07      	ldr	r3, [pc, #28]	@ (80072bc <vTaskDelayUntil+0xfc>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072ac:	bf00      	nop
 80072ae:	3728      	adds	r7, #40	@ 0x28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	2000104c 	.word	0x2000104c
 80072b8:	20001028 	.word	0x20001028
 80072bc:	e000ed04 	.word	0xe000ed04

080072c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08a      	sub	sp, #40	@ 0x28
 80072c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072ce:	463a      	mov	r2, r7
 80072d0:	1d39      	adds	r1, r7, #4
 80072d2:	f107 0308 	add.w	r3, r7, #8
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fe ffda 	bl	8006290 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	9202      	str	r2, [sp, #8]
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	2300      	movs	r3, #0
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	2300      	movs	r3, #0
 80072ec:	460a      	mov	r2, r1
 80072ee:	4924      	ldr	r1, [pc, #144]	@ (8007380 <vTaskStartScheduler+0xc0>)
 80072f0:	4824      	ldr	r0, [pc, #144]	@ (8007384 <vTaskStartScheduler+0xc4>)
 80072f2:	f7ff fda7 	bl	8006e44 <xTaskCreateStatic>
 80072f6:	4603      	mov	r3, r0
 80072f8:	4a23      	ldr	r2, [pc, #140]	@ (8007388 <vTaskStartScheduler+0xc8>)
 80072fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072fc:	4b22      	ldr	r3, [pc, #136]	@ (8007388 <vTaskStartScheduler+0xc8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007304:	2301      	movs	r3, #1
 8007306:	617b      	str	r3, [r7, #20]
 8007308:	e001      	b.n	800730e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d102      	bne.n	800731a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007314:	f000 fd16 	bl	8007d44 <xTimerCreateTimerTask>
 8007318:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d11b      	bne.n	8007358 <vTaskStartScheduler+0x98>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	613b      	str	r3, [r7, #16]
}
 8007332:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007334:	4b15      	ldr	r3, [pc, #84]	@ (800738c <vTaskStartScheduler+0xcc>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3354      	adds	r3, #84	@ 0x54
 800733a:	4a15      	ldr	r2, [pc, #84]	@ (8007390 <vTaskStartScheduler+0xd0>)
 800733c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800733e:	4b15      	ldr	r3, [pc, #84]	@ (8007394 <vTaskStartScheduler+0xd4>)
 8007340:	f04f 32ff 	mov.w	r2, #4294967295
 8007344:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007346:	4b14      	ldr	r3, [pc, #80]	@ (8007398 <vTaskStartScheduler+0xd8>)
 8007348:	2201      	movs	r2, #1
 800734a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800734c:	4b13      	ldr	r3, [pc, #76]	@ (800739c <vTaskStartScheduler+0xdc>)
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007352:	f001 f8d1 	bl	80084f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007356:	e00f      	b.n	8007378 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735e:	d10b      	bne.n	8007378 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	60fb      	str	r3, [r7, #12]
}
 8007372:	bf00      	nop
 8007374:	bf00      	nop
 8007376:	e7fd      	b.n	8007374 <vTaskStartScheduler+0xb4>
}
 8007378:	bf00      	nop
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	0800ba50 	.word	0x0800ba50
 8007384:	080079c9 	.word	0x080079c9
 8007388:	20001048 	.word	0x20001048
 800738c:	20000b50 	.word	0x20000b50
 8007390:	20000034 	.word	0x20000034
 8007394:	20001044 	.word	0x20001044
 8007398:	20001030 	.word	0x20001030
 800739c:	20001028 	.word	0x20001028

080073a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80073a4:	4b04      	ldr	r3, [pc, #16]	@ (80073b8 <vTaskSuspendAll+0x18>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3301      	adds	r3, #1
 80073aa:	4a03      	ldr	r2, [pc, #12]	@ (80073b8 <vTaskSuspendAll+0x18>)
 80073ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80073ae:	bf00      	nop
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	2000104c 	.word	0x2000104c

080073bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073ca:	4b42      	ldr	r3, [pc, #264]	@ (80074d4 <xTaskResumeAll+0x118>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10b      	bne.n	80073ea <xTaskResumeAll+0x2e>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	603b      	str	r3, [r7, #0]
}
 80073e4:	bf00      	nop
 80073e6:	bf00      	nop
 80073e8:	e7fd      	b.n	80073e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073ea:	f001 f8f7 	bl	80085dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073ee:	4b39      	ldr	r3, [pc, #228]	@ (80074d4 <xTaskResumeAll+0x118>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	4a37      	ldr	r2, [pc, #220]	@ (80074d4 <xTaskResumeAll+0x118>)
 80073f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073f8:	4b36      	ldr	r3, [pc, #216]	@ (80074d4 <xTaskResumeAll+0x118>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d162      	bne.n	80074c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007400:	4b35      	ldr	r3, [pc, #212]	@ (80074d8 <xTaskResumeAll+0x11c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d05e      	beq.n	80074c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007408:	e02f      	b.n	800746a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800740a:	4b34      	ldr	r3, [pc, #208]	@ (80074dc <xTaskResumeAll+0x120>)
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3318      	adds	r3, #24
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe fff2 	bl	8006400 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3304      	adds	r3, #4
 8007420:	4618      	mov	r0, r3
 8007422:	f7fe ffed 	bl	8006400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800742a:	4b2d      	ldr	r3, [pc, #180]	@ (80074e0 <xTaskResumeAll+0x124>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d903      	bls.n	800743a <xTaskResumeAll+0x7e>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007436:	4a2a      	ldr	r2, [pc, #168]	@ (80074e0 <xTaskResumeAll+0x124>)
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800743e:	4613      	mov	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4a27      	ldr	r2, [pc, #156]	@ (80074e4 <xTaskResumeAll+0x128>)
 8007448:	441a      	add	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3304      	adds	r3, #4
 800744e:	4619      	mov	r1, r3
 8007450:	4610      	mov	r0, r2
 8007452:	f7fe ff7a 	bl	800634a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800745a:	4b23      	ldr	r3, [pc, #140]	@ (80074e8 <xTaskResumeAll+0x12c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007460:	429a      	cmp	r2, r3
 8007462:	d302      	bcc.n	800746a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007464:	4b21      	ldr	r3, [pc, #132]	@ (80074ec <xTaskResumeAll+0x130>)
 8007466:	2201      	movs	r2, #1
 8007468:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800746a:	4b1c      	ldr	r3, [pc, #112]	@ (80074dc <xTaskResumeAll+0x120>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1cb      	bne.n	800740a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007478:	f000 fb62 	bl	8007b40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800747c:	4b1c      	ldr	r3, [pc, #112]	@ (80074f0 <xTaskResumeAll+0x134>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d010      	beq.n	80074aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007488:	f000 f844 	bl	8007514 <xTaskIncrementTick>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007492:	4b16      	ldr	r3, [pc, #88]	@ (80074ec <xTaskResumeAll+0x130>)
 8007494:	2201      	movs	r2, #1
 8007496:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3b01      	subs	r3, #1
 800749c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1f1      	bne.n	8007488 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80074a4:	4b12      	ldr	r3, [pc, #72]	@ (80074f0 <xTaskResumeAll+0x134>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074aa:	4b10      	ldr	r3, [pc, #64]	@ (80074ec <xTaskResumeAll+0x130>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074b2:	2301      	movs	r3, #1
 80074b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074b6:	4b0f      	ldr	r3, [pc, #60]	@ (80074f4 <xTaskResumeAll+0x138>)
 80074b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074c6:	f001 f8b9 	bl	800863c <vPortExitCritical>

	return xAlreadyYielded;
 80074ca:	68bb      	ldr	r3, [r7, #8]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	2000104c 	.word	0x2000104c
 80074d8:	20001024 	.word	0x20001024
 80074dc:	20000fe4 	.word	0x20000fe4
 80074e0:	2000102c 	.word	0x2000102c
 80074e4:	20000b54 	.word	0x20000b54
 80074e8:	20000b50 	.word	0x20000b50
 80074ec:	20001038 	.word	0x20001038
 80074f0:	20001034 	.word	0x20001034
 80074f4:	e000ed04 	.word	0xe000ed04

080074f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074fe:	4b04      	ldr	r3, [pc, #16]	@ (8007510 <xTaskGetTickCount+0x18>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007504:	687b      	ldr	r3, [r7, #4]
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr
 8007510:	20001028 	.word	0x20001028

08007514 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800751a:	2300      	movs	r3, #0
 800751c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800751e:	4b4f      	ldr	r3, [pc, #316]	@ (800765c <xTaskIncrementTick+0x148>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f040 8090 	bne.w	8007648 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007528:	4b4d      	ldr	r3, [pc, #308]	@ (8007660 <xTaskIncrementTick+0x14c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3301      	adds	r3, #1
 800752e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007530:	4a4b      	ldr	r2, [pc, #300]	@ (8007660 <xTaskIncrementTick+0x14c>)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d121      	bne.n	8007580 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800753c:	4b49      	ldr	r3, [pc, #292]	@ (8007664 <xTaskIncrementTick+0x150>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	603b      	str	r3, [r7, #0]
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <xTaskIncrementTick+0x46>
 800755e:	4b41      	ldr	r3, [pc, #260]	@ (8007664 <xTaskIncrementTick+0x150>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	4b40      	ldr	r3, [pc, #256]	@ (8007668 <xTaskIncrementTick+0x154>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a3e      	ldr	r2, [pc, #248]	@ (8007664 <xTaskIncrementTick+0x150>)
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	4a3e      	ldr	r2, [pc, #248]	@ (8007668 <xTaskIncrementTick+0x154>)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6013      	str	r3, [r2, #0]
 8007572:	4b3e      	ldr	r3, [pc, #248]	@ (800766c <xTaskIncrementTick+0x158>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3301      	adds	r3, #1
 8007578:	4a3c      	ldr	r2, [pc, #240]	@ (800766c <xTaskIncrementTick+0x158>)
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	f000 fae0 	bl	8007b40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007580:	4b3b      	ldr	r3, [pc, #236]	@ (8007670 <xTaskIncrementTick+0x15c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	429a      	cmp	r2, r3
 8007588:	d349      	bcc.n	800761e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800758a:	4b36      	ldr	r3, [pc, #216]	@ (8007664 <xTaskIncrementTick+0x150>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d104      	bne.n	800759e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007594:	4b36      	ldr	r3, [pc, #216]	@ (8007670 <xTaskIncrementTick+0x15c>)
 8007596:	f04f 32ff 	mov.w	r2, #4294967295
 800759a:	601a      	str	r2, [r3, #0]
					break;
 800759c:	e03f      	b.n	800761e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759e:	4b31      	ldr	r3, [pc, #196]	@ (8007664 <xTaskIncrementTick+0x150>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d203      	bcs.n	80075be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075b6:	4a2e      	ldr	r2, [pc, #184]	@ (8007670 <xTaskIncrementTick+0x15c>)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80075bc:	e02f      	b.n	800761e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	3304      	adds	r3, #4
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe ff1c 	bl	8006400 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d004      	beq.n	80075da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	3318      	adds	r3, #24
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe ff13 	bl	8006400 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075de:	4b25      	ldr	r3, [pc, #148]	@ (8007674 <xTaskIncrementTick+0x160>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d903      	bls.n	80075ee <xTaskIncrementTick+0xda>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ea:	4a22      	ldr	r2, [pc, #136]	@ (8007674 <xTaskIncrementTick+0x160>)
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f2:	4613      	mov	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4a1f      	ldr	r2, [pc, #124]	@ (8007678 <xTaskIncrementTick+0x164>)
 80075fc:	441a      	add	r2, r3
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	3304      	adds	r3, #4
 8007602:	4619      	mov	r1, r3
 8007604:	4610      	mov	r0, r2
 8007606:	f7fe fea0 	bl	800634a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800760e:	4b1b      	ldr	r3, [pc, #108]	@ (800767c <xTaskIncrementTick+0x168>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	429a      	cmp	r2, r3
 8007616:	d3b8      	bcc.n	800758a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007618:	2301      	movs	r3, #1
 800761a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800761c:	e7b5      	b.n	800758a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800761e:	4b17      	ldr	r3, [pc, #92]	@ (800767c <xTaskIncrementTick+0x168>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007624:	4914      	ldr	r1, [pc, #80]	@ (8007678 <xTaskIncrementTick+0x164>)
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d901      	bls.n	800763a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007636:	2301      	movs	r3, #1
 8007638:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800763a:	4b11      	ldr	r3, [pc, #68]	@ (8007680 <xTaskIncrementTick+0x16c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007642:	2301      	movs	r3, #1
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	e004      	b.n	8007652 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007648:	4b0e      	ldr	r3, [pc, #56]	@ (8007684 <xTaskIncrementTick+0x170>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3301      	adds	r3, #1
 800764e:	4a0d      	ldr	r2, [pc, #52]	@ (8007684 <xTaskIncrementTick+0x170>)
 8007650:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007652:	697b      	ldr	r3, [r7, #20]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	2000104c 	.word	0x2000104c
 8007660:	20001028 	.word	0x20001028
 8007664:	20000fdc 	.word	0x20000fdc
 8007668:	20000fe0 	.word	0x20000fe0
 800766c:	2000103c 	.word	0x2000103c
 8007670:	20001044 	.word	0x20001044
 8007674:	2000102c 	.word	0x2000102c
 8007678:	20000b54 	.word	0x20000b54
 800767c:	20000b50 	.word	0x20000b50
 8007680:	20001038 	.word	0x20001038
 8007684:	20001034 	.word	0x20001034

08007688 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800768e:	4b2a      	ldr	r3, [pc, #168]	@ (8007738 <vTaskSwitchContext+0xb0>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007696:	4b29      	ldr	r3, [pc, #164]	@ (800773c <vTaskSwitchContext+0xb4>)
 8007698:	2201      	movs	r2, #1
 800769a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800769c:	e047      	b.n	800772e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800769e:	4b27      	ldr	r3, [pc, #156]	@ (800773c <vTaskSwitchContext+0xb4>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076a4:	4b26      	ldr	r3, [pc, #152]	@ (8007740 <vTaskSwitchContext+0xb8>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	e011      	b.n	80076d0 <vTaskSwitchContext+0x48>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10b      	bne.n	80076ca <vTaskSwitchContext+0x42>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	607b      	str	r3, [r7, #4]
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop
 80076c8:	e7fd      	b.n	80076c6 <vTaskSwitchContext+0x3e>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	491c      	ldr	r1, [pc, #112]	@ (8007744 <vTaskSwitchContext+0xbc>)
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d0e3      	beq.n	80076ac <vTaskSwitchContext+0x24>
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4613      	mov	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	4413      	add	r3, r2
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4a15      	ldr	r2, [pc, #84]	@ (8007744 <vTaskSwitchContext+0xbc>)
 80076f0:	4413      	add	r3, r2
 80076f2:	60bb      	str	r3, [r7, #8]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	605a      	str	r2, [r3, #4]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	3308      	adds	r3, #8
 8007706:	429a      	cmp	r2, r3
 8007708:	d104      	bne.n	8007714 <vTaskSwitchContext+0x8c>
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	605a      	str	r2, [r3, #4]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	4a0b      	ldr	r2, [pc, #44]	@ (8007748 <vTaskSwitchContext+0xc0>)
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	4a08      	ldr	r2, [pc, #32]	@ (8007740 <vTaskSwitchContext+0xb8>)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007724:	4b08      	ldr	r3, [pc, #32]	@ (8007748 <vTaskSwitchContext+0xc0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3354      	adds	r3, #84	@ 0x54
 800772a:	4a08      	ldr	r2, [pc, #32]	@ (800774c <vTaskSwitchContext+0xc4>)
 800772c:	6013      	str	r3, [r2, #0]
}
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	bc80      	pop	{r7}
 8007736:	4770      	bx	lr
 8007738:	2000104c 	.word	0x2000104c
 800773c:	20001038 	.word	0x20001038
 8007740:	2000102c 	.word	0x2000102c
 8007744:	20000b54 	.word	0x20000b54
 8007748:	20000b50 	.word	0x20000b50
 800774c:	20000034 	.word	0x20000034

08007750 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10b      	bne.n	8007778 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	60fb      	str	r3, [r7, #12]
}
 8007772:	bf00      	nop
 8007774:	bf00      	nop
 8007776:	e7fd      	b.n	8007774 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007778:	4b07      	ldr	r3, [pc, #28]	@ (8007798 <vTaskPlaceOnEventList+0x48>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3318      	adds	r3, #24
 800777e:	4619      	mov	r1, r3
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7fe fe05 	bl	8006390 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007786:	2101      	movs	r1, #1
 8007788:	6838      	ldr	r0, [r7, #0]
 800778a:	f000 fa87 	bl	8007c9c <prvAddCurrentTaskToDelayedList>
}
 800778e:	bf00      	nop
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20000b50 	.word	0x20000b50

0800779c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10b      	bne.n	80077c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	617b      	str	r3, [r7, #20]
}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	e7fd      	b.n	80077c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077c6:	4b0a      	ldr	r3, [pc, #40]	@ (80077f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3318      	adds	r3, #24
 80077cc:	4619      	mov	r1, r3
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f7fe fdbb 	bl	800634a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80077da:	f04f 33ff 	mov.w	r3, #4294967295
 80077de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077e0:	6879      	ldr	r1, [r7, #4]
 80077e2:	68b8      	ldr	r0, [r7, #8]
 80077e4:	f000 fa5a 	bl	8007c9c <prvAddCurrentTaskToDelayedList>
	}
 80077e8:	bf00      	nop
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20000b50 	.word	0x20000b50

080077f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	60fb      	str	r3, [r7, #12]
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	3318      	adds	r3, #24
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fdea 	bl	8006400 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800782c:	4b1d      	ldr	r3, [pc, #116]	@ (80078a4 <xTaskRemoveFromEventList+0xb0>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d11d      	bne.n	8007870 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	3304      	adds	r3, #4
 8007838:	4618      	mov	r0, r3
 800783a:	f7fe fde1 	bl	8006400 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007842:	4b19      	ldr	r3, [pc, #100]	@ (80078a8 <xTaskRemoveFromEventList+0xb4>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	429a      	cmp	r2, r3
 8007848:	d903      	bls.n	8007852 <xTaskRemoveFromEventList+0x5e>
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784e:	4a16      	ldr	r2, [pc, #88]	@ (80078a8 <xTaskRemoveFromEventList+0xb4>)
 8007850:	6013      	str	r3, [r2, #0]
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4a13      	ldr	r2, [pc, #76]	@ (80078ac <xTaskRemoveFromEventList+0xb8>)
 8007860:	441a      	add	r2, r3
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	3304      	adds	r3, #4
 8007866:	4619      	mov	r1, r3
 8007868:	4610      	mov	r0, r2
 800786a:	f7fe fd6e 	bl	800634a <vListInsertEnd>
 800786e:	e005      	b.n	800787c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	3318      	adds	r3, #24
 8007874:	4619      	mov	r1, r3
 8007876:	480e      	ldr	r0, [pc, #56]	@ (80078b0 <xTaskRemoveFromEventList+0xbc>)
 8007878:	f7fe fd67 	bl	800634a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007880:	4b0c      	ldr	r3, [pc, #48]	@ (80078b4 <xTaskRemoveFromEventList+0xc0>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007886:	429a      	cmp	r2, r3
 8007888:	d905      	bls.n	8007896 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800788a:	2301      	movs	r3, #1
 800788c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800788e:	4b0a      	ldr	r3, [pc, #40]	@ (80078b8 <xTaskRemoveFromEventList+0xc4>)
 8007890:	2201      	movs	r2, #1
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	e001      	b.n	800789a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800789a:	697b      	ldr	r3, [r7, #20]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	2000104c 	.word	0x2000104c
 80078a8:	2000102c 	.word	0x2000102c
 80078ac:	20000b54 	.word	0x20000b54
 80078b0:	20000fe4 	.word	0x20000fe4
 80078b4:	20000b50 	.word	0x20000b50
 80078b8:	20001038 	.word	0x20001038

080078bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078c4:	4b06      	ldr	r3, [pc, #24]	@ (80078e0 <vTaskInternalSetTimeOutState+0x24>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80078cc:	4b05      	ldr	r3, [pc, #20]	@ (80078e4 <vTaskInternalSetTimeOutState+0x28>)
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	605a      	str	r2, [r3, #4]
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	bc80      	pop	{r7}
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	2000103c 	.word	0x2000103c
 80078e4:	20001028 	.word	0x20001028

080078e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10b      	bne.n	8007910 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	613b      	str	r3, [r7, #16]
}
 800790a:	bf00      	nop
 800790c:	bf00      	nop
 800790e:	e7fd      	b.n	800790c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10b      	bne.n	800792e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	60fb      	str	r3, [r7, #12]
}
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	e7fd      	b.n	800792a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800792e:	f000 fe55 	bl	80085dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007932:	4b1d      	ldr	r3, [pc, #116]	@ (80079a8 <xTaskCheckForTimeOut+0xc0>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794a:	d102      	bne.n	8007952 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800794c:	2300      	movs	r3, #0
 800794e:	61fb      	str	r3, [r7, #28]
 8007950:	e023      	b.n	800799a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	4b15      	ldr	r3, [pc, #84]	@ (80079ac <xTaskCheckForTimeOut+0xc4>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d007      	beq.n	800796e <xTaskCheckForTimeOut+0x86>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	429a      	cmp	r2, r3
 8007966:	d302      	bcc.n	800796e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007968:	2301      	movs	r3, #1
 800796a:	61fb      	str	r3, [r7, #28]
 800796c:	e015      	b.n	800799a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	429a      	cmp	r2, r3
 8007976:	d20b      	bcs.n	8007990 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f7ff ff99 	bl	80078bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800798a:	2300      	movs	r3, #0
 800798c:	61fb      	str	r3, [r7, #28]
 800798e:	e004      	b.n	800799a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007996:	2301      	movs	r3, #1
 8007998:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800799a:	f000 fe4f 	bl	800863c <vPortExitCritical>

	return xReturn;
 800799e:	69fb      	ldr	r3, [r7, #28]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3720      	adds	r7, #32
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20001028 	.word	0x20001028
 80079ac:	2000103c 	.word	0x2000103c

080079b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079b4:	4b03      	ldr	r3, [pc, #12]	@ (80079c4 <vTaskMissedYield+0x14>)
 80079b6:	2201      	movs	r2, #1
 80079b8:	601a      	str	r2, [r3, #0]
}
 80079ba:	bf00      	nop
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	20001038 	.word	0x20001038

080079c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079d0:	f000 f852 	bl	8007a78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079d4:	4b06      	ldr	r3, [pc, #24]	@ (80079f0 <prvIdleTask+0x28>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d9f9      	bls.n	80079d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079dc:	4b05      	ldr	r3, [pc, #20]	@ (80079f4 <prvIdleTask+0x2c>)
 80079de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079ec:	e7f0      	b.n	80079d0 <prvIdleTask+0x8>
 80079ee:	bf00      	nop
 80079f0:	20000b54 	.word	0x20000b54
 80079f4:	e000ed04 	.word	0xe000ed04

080079f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079fe:	2300      	movs	r3, #0
 8007a00:	607b      	str	r3, [r7, #4]
 8007a02:	e00c      	b.n	8007a1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4a12      	ldr	r2, [pc, #72]	@ (8007a58 <prvInitialiseTaskLists+0x60>)
 8007a10:	4413      	add	r3, r2
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe fc6e 	bl	80062f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	607b      	str	r3, [r7, #4]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b37      	cmp	r3, #55	@ 0x37
 8007a22:	d9ef      	bls.n	8007a04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a24:	480d      	ldr	r0, [pc, #52]	@ (8007a5c <prvInitialiseTaskLists+0x64>)
 8007a26:	f7fe fc65 	bl	80062f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a2a:	480d      	ldr	r0, [pc, #52]	@ (8007a60 <prvInitialiseTaskLists+0x68>)
 8007a2c:	f7fe fc62 	bl	80062f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a30:	480c      	ldr	r0, [pc, #48]	@ (8007a64 <prvInitialiseTaskLists+0x6c>)
 8007a32:	f7fe fc5f 	bl	80062f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a36:	480c      	ldr	r0, [pc, #48]	@ (8007a68 <prvInitialiseTaskLists+0x70>)
 8007a38:	f7fe fc5c 	bl	80062f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a3c:	480b      	ldr	r0, [pc, #44]	@ (8007a6c <prvInitialiseTaskLists+0x74>)
 8007a3e:	f7fe fc59 	bl	80062f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a42:	4b0b      	ldr	r3, [pc, #44]	@ (8007a70 <prvInitialiseTaskLists+0x78>)
 8007a44:	4a05      	ldr	r2, [pc, #20]	@ (8007a5c <prvInitialiseTaskLists+0x64>)
 8007a46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a48:	4b0a      	ldr	r3, [pc, #40]	@ (8007a74 <prvInitialiseTaskLists+0x7c>)
 8007a4a:	4a05      	ldr	r2, [pc, #20]	@ (8007a60 <prvInitialiseTaskLists+0x68>)
 8007a4c:	601a      	str	r2, [r3, #0]
}
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20000b54 	.word	0x20000b54
 8007a5c:	20000fb4 	.word	0x20000fb4
 8007a60:	20000fc8 	.word	0x20000fc8
 8007a64:	20000fe4 	.word	0x20000fe4
 8007a68:	20000ff8 	.word	0x20000ff8
 8007a6c:	20001010 	.word	0x20001010
 8007a70:	20000fdc 	.word	0x20000fdc
 8007a74:	20000fe0 	.word	0x20000fe0

08007a78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a7e:	e019      	b.n	8007ab4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a80:	f000 fdac 	bl	80085dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a84:	4b10      	ldr	r3, [pc, #64]	@ (8007ac8 <prvCheckTasksWaitingTermination+0x50>)
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe fcb5 	bl	8006400 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a96:	4b0d      	ldr	r3, [pc, #52]	@ (8007acc <prvCheckTasksWaitingTermination+0x54>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	4a0b      	ldr	r2, [pc, #44]	@ (8007acc <prvCheckTasksWaitingTermination+0x54>)
 8007a9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ad0 <prvCheckTasksWaitingTermination+0x58>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8007ad0 <prvCheckTasksWaitingTermination+0x58>)
 8007aa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007aaa:	f000 fdc7 	bl	800863c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f810 	bl	8007ad4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ab4:	4b06      	ldr	r3, [pc, #24]	@ (8007ad0 <prvCheckTasksWaitingTermination+0x58>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e1      	bne.n	8007a80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007abc:	bf00      	nop
 8007abe:	bf00      	nop
 8007ac0:	3708      	adds	r7, #8
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000ff8 	.word	0x20000ff8
 8007acc:	20001024 	.word	0x20001024
 8007ad0:	2000100c 	.word	0x2000100c

08007ad4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3354      	adds	r3, #84	@ 0x54
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f001 fdf7 	bl	80096d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d108      	bne.n	8007b02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 ff41 	bl	800897c <vPortFree>
				vPortFree( pxTCB );
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 ff3e 	bl	800897c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b00:	e019      	b.n	8007b36 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d103      	bne.n	8007b14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 ff35 	bl	800897c <vPortFree>
	}
 8007b12:	e010      	b.n	8007b36 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d00b      	beq.n	8007b36 <prvDeleteTCB+0x62>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	60fb      	str	r3, [r7, #12]
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	e7fd      	b.n	8007b32 <prvDeleteTCB+0x5e>
	}
 8007b36:	bf00      	nop
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b46:	4b0c      	ldr	r3, [pc, #48]	@ (8007b78 <prvResetNextTaskUnblockTime+0x38>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d104      	bne.n	8007b5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b50:	4b0a      	ldr	r3, [pc, #40]	@ (8007b7c <prvResetNextTaskUnblockTime+0x3c>)
 8007b52:	f04f 32ff 	mov.w	r2, #4294967295
 8007b56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b58:	e008      	b.n	8007b6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b5a:	4b07      	ldr	r3, [pc, #28]	@ (8007b78 <prvResetNextTaskUnblockTime+0x38>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	4a04      	ldr	r2, [pc, #16]	@ (8007b7c <prvResetNextTaskUnblockTime+0x3c>)
 8007b6a:	6013      	str	r3, [r2, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bc80      	pop	{r7}
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	20000fdc 	.word	0x20000fdc
 8007b7c:	20001044 	.word	0x20001044

08007b80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b86:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb4 <xTaskGetSchedulerState+0x34>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d102      	bne.n	8007b94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	607b      	str	r3, [r7, #4]
 8007b92:	e008      	b.n	8007ba6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b94:	4b08      	ldr	r3, [pc, #32]	@ (8007bb8 <xTaskGetSchedulerState+0x38>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d102      	bne.n	8007ba2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	607b      	str	r3, [r7, #4]
 8007ba0:	e001      	b.n	8007ba6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ba6:	687b      	ldr	r3, [r7, #4]
	}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bc80      	pop	{r7}
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20001030 	.word	0x20001030
 8007bb8:	2000104c 	.word	0x2000104c

08007bbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d058      	beq.n	8007c84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8007c90 <xTaskPriorityDisinherit+0xd4>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d00b      	beq.n	8007bf4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	60fb      	str	r3, [r7, #12]
}
 8007bee:	bf00      	nop
 8007bf0:	bf00      	nop
 8007bf2:	e7fd      	b.n	8007bf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10b      	bne.n	8007c14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	60bb      	str	r3, [r7, #8]
}
 8007c0e:	bf00      	nop
 8007c10:	bf00      	nop
 8007c12:	e7fd      	b.n	8007c10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c18:	1e5a      	subs	r2, r3, #1
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d02c      	beq.n	8007c84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d128      	bne.n	8007c84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	3304      	adds	r3, #4
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fbe2 	bl	8006400 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c54:	4b0f      	ldr	r3, [pc, #60]	@ (8007c94 <xTaskPriorityDisinherit+0xd8>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d903      	bls.n	8007c64 <xTaskPriorityDisinherit+0xa8>
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c60:	4a0c      	ldr	r2, [pc, #48]	@ (8007c94 <xTaskPriorityDisinherit+0xd8>)
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c68:	4613      	mov	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4a09      	ldr	r2, [pc, #36]	@ (8007c98 <xTaskPriorityDisinherit+0xdc>)
 8007c72:	441a      	add	r2, r3
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f7fe fb65 	bl	800634a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c80:	2301      	movs	r3, #1
 8007c82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c84:	697b      	ldr	r3, [r7, #20]
	}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20000b50 	.word	0x20000b50
 8007c94:	2000102c 	.word	0x2000102c
 8007c98:	20000b54 	.word	0x20000b54

08007c9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ca6:	4b21      	ldr	r3, [pc, #132]	@ (8007d2c <prvAddCurrentTaskToDelayedList+0x90>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cac:	4b20      	ldr	r3, [pc, #128]	@ (8007d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe fba4 	bl	8006400 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cbe:	d10a      	bne.n	8007cd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4819      	ldr	r0, [pc, #100]	@ (8007d34 <prvAddCurrentTaskToDelayedList+0x98>)
 8007cd0:	f7fe fb3b 	bl	800634a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cd4:	e026      	b.n	8007d24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4413      	add	r3, r2
 8007cdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cde:	4b14      	ldr	r3, [pc, #80]	@ (8007d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d209      	bcs.n	8007d02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cee:	4b12      	ldr	r3, [pc, #72]	@ (8007d38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8007d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f7fe fb48 	bl	8006390 <vListInsert>
}
 8007d00:	e010      	b.n	8007d24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d02:	4b0e      	ldr	r3, [pc, #56]	@ (8007d3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b0a      	ldr	r3, [pc, #40]	@ (8007d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3304      	adds	r3, #4
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4610      	mov	r0, r2
 8007d10:	f7fe fb3e 	bl	8006390 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d14:	4b0a      	ldr	r3, [pc, #40]	@ (8007d40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d202      	bcs.n	8007d24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d1e:	4a08      	ldr	r2, [pc, #32]	@ (8007d40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	6013      	str	r3, [r2, #0]
}
 8007d24:	bf00      	nop
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20001028 	.word	0x20001028
 8007d30:	20000b50 	.word	0x20000b50
 8007d34:	20001010 	.word	0x20001010
 8007d38:	20000fe0 	.word	0x20000fe0
 8007d3c:	20000fdc 	.word	0x20000fdc
 8007d40:	20001044 	.word	0x20001044

08007d44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08a      	sub	sp, #40	@ 0x28
 8007d48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d4e:	f000 fb11 	bl	8008374 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d52:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc8 <xTimerCreateTimerTask+0x84>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d021      	beq.n	8007d9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d62:	1d3a      	adds	r2, r7, #4
 8007d64:	f107 0108 	add.w	r1, r7, #8
 8007d68:	f107 030c 	add.w	r3, r7, #12
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fe faa7 	bl	80062c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d72:	6879      	ldr	r1, [r7, #4]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	9202      	str	r2, [sp, #8]
 8007d7a:	9301      	str	r3, [sp, #4]
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	2300      	movs	r3, #0
 8007d82:	460a      	mov	r2, r1
 8007d84:	4911      	ldr	r1, [pc, #68]	@ (8007dcc <xTimerCreateTimerTask+0x88>)
 8007d86:	4812      	ldr	r0, [pc, #72]	@ (8007dd0 <xTimerCreateTimerTask+0x8c>)
 8007d88:	f7ff f85c 	bl	8006e44 <xTaskCreateStatic>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	4a11      	ldr	r2, [pc, #68]	@ (8007dd4 <xTimerCreateTimerTask+0x90>)
 8007d90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d92:	4b10      	ldr	r3, [pc, #64]	@ (8007dd4 <xTimerCreateTimerTask+0x90>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10b      	bne.n	8007dbc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	613b      	str	r3, [r7, #16]
}
 8007db6:	bf00      	nop
 8007db8:	bf00      	nop
 8007dba:	e7fd      	b.n	8007db8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007dbc:	697b      	ldr	r3, [r7, #20]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20001080 	.word	0x20001080
 8007dcc:	0800ba58 	.word	0x0800ba58
 8007dd0:	08007f11 	.word	0x08007f11
 8007dd4:	20001084 	.word	0x20001084

08007dd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08a      	sub	sp, #40	@ 0x28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10b      	bne.n	8007e08 <xTimerGenericCommand+0x30>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	623b      	str	r3, [r7, #32]
}
 8007e02:	bf00      	nop
 8007e04:	bf00      	nop
 8007e06:	e7fd      	b.n	8007e04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e08:	4b19      	ldr	r3, [pc, #100]	@ (8007e70 <xTimerGenericCommand+0x98>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d02a      	beq.n	8007e66 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	2b05      	cmp	r3, #5
 8007e20:	dc18      	bgt.n	8007e54 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e22:	f7ff fead 	bl	8007b80 <xTaskGetSchedulerState>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d109      	bne.n	8007e40 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e2c:	4b10      	ldr	r3, [pc, #64]	@ (8007e70 <xTimerGenericCommand+0x98>)
 8007e2e:	6818      	ldr	r0, [r3, #0]
 8007e30:	f107 0110 	add.w	r1, r7, #16
 8007e34:	2300      	movs	r3, #0
 8007e36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e38:	f7fe fc16 	bl	8006668 <xQueueGenericSend>
 8007e3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e3e:	e012      	b.n	8007e66 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e40:	4b0b      	ldr	r3, [pc, #44]	@ (8007e70 <xTimerGenericCommand+0x98>)
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	f107 0110 	add.w	r1, r7, #16
 8007e48:	2300      	movs	r3, #0
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f7fe fc0c 	bl	8006668 <xQueueGenericSend>
 8007e50:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e52:	e008      	b.n	8007e66 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e54:	4b06      	ldr	r3, [pc, #24]	@ (8007e70 <xTimerGenericCommand+0x98>)
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	f107 0110 	add.w	r1, r7, #16
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	f7fe fd04 	bl	800686c <xQueueGenericSendFromISR>
 8007e64:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3728      	adds	r7, #40	@ 0x28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	20001080 	.word	0x20001080

08007e74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b088      	sub	sp, #32
 8007e78:	af02      	add	r7, sp, #8
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e7e:	4b23      	ldr	r3, [pc, #140]	@ (8007f0c <prvProcessExpiredTimer+0x98>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe fab7 	bl	8006400 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d023      	beq.n	8007ee8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	699a      	ldr	r2, [r3, #24]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	18d1      	adds	r1, r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	6978      	ldr	r0, [r7, #20]
 8007eae:	f000 f8d3 	bl	8008058 <prvInsertTimerInActiveList>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d020      	beq.n	8007efa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	6978      	ldr	r0, [r7, #20]
 8007ec4:	f7ff ff88 	bl	8007dd8 <xTimerGenericCommand>
 8007ec8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d114      	bne.n	8007efa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	60fb      	str	r3, [r7, #12]
}
 8007ee2:	bf00      	nop
 8007ee4:	bf00      	nop
 8007ee6:	e7fd      	b.n	8007ee4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007eee:	f023 0301 	bic.w	r3, r3, #1
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	6a1b      	ldr	r3, [r3, #32]
 8007efe:	6978      	ldr	r0, [r7, #20]
 8007f00:	4798      	blx	r3
}
 8007f02:	bf00      	nop
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20001078 	.word	0x20001078

08007f10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f18:	f107 0308 	add.w	r3, r7, #8
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 f859 	bl	8007fd4 <prvGetNextExpireTime>
 8007f22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4619      	mov	r1, r3
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 f805 	bl	8007f38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f2e:	f000 f8d5 	bl	80080dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f32:	bf00      	nop
 8007f34:	e7f0      	b.n	8007f18 <prvTimerTask+0x8>
	...

08007f38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f42:	f7ff fa2d 	bl	80073a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f46:	f107 0308 	add.w	r3, r7, #8
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 f864 	bl	8008018 <prvSampleTimeNow>
 8007f50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d130      	bne.n	8007fba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10a      	bne.n	8007f74 <prvProcessTimerOrBlockTask+0x3c>
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d806      	bhi.n	8007f74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f66:	f7ff fa29 	bl	80073bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f6a:	68f9      	ldr	r1, [r7, #12]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff ff81 	bl	8007e74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f72:	e024      	b.n	8007fbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d008      	beq.n	8007f8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f7a:	4b13      	ldr	r3, [pc, #76]	@ (8007fc8 <prvProcessTimerOrBlockTask+0x90>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <prvProcessTimerOrBlockTask+0x50>
 8007f84:	2301      	movs	r3, #1
 8007f86:	e000      	b.n	8007f8a <prvProcessTimerOrBlockTask+0x52>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8007fcc <prvProcessTimerOrBlockTask+0x94>)
 8007f8e:	6818      	ldr	r0, [r3, #0]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	f7fe ff1f 	bl	8006ddc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f9e:	f7ff fa0d 	bl	80073bc <xTaskResumeAll>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10a      	bne.n	8007fbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fa8:	4b09      	ldr	r3, [pc, #36]	@ (8007fd0 <prvProcessTimerOrBlockTask+0x98>)
 8007faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	f3bf 8f6f 	isb	sy
}
 8007fb8:	e001      	b.n	8007fbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007fba:	f7ff f9ff 	bl	80073bc <xTaskResumeAll>
}
 8007fbe:	bf00      	nop
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	2000107c 	.word	0x2000107c
 8007fcc:	20001080 	.word	0x20001080
 8007fd0:	e000ed04 	.word	0xe000ed04

08007fd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8008014 <prvGetNextExpireTime+0x40>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <prvGetNextExpireTime+0x16>
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	e000      	b.n	8007fec <prvGetNextExpireTime+0x18>
 8007fea:	2200      	movs	r2, #0
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d105      	bne.n	8008004 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ff8:	4b06      	ldr	r3, [pc, #24]	@ (8008014 <prvGetNextExpireTime+0x40>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	e001      	b.n	8008008 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008008:	68fb      	ldr	r3, [r7, #12]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	bc80      	pop	{r7}
 8008012:	4770      	bx	lr
 8008014:	20001078 	.word	0x20001078

08008018 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008020:	f7ff fa6a 	bl	80074f8 <xTaskGetTickCount>
 8008024:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008026:	4b0b      	ldr	r3, [pc, #44]	@ (8008054 <prvSampleTimeNow+0x3c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	429a      	cmp	r2, r3
 800802e:	d205      	bcs.n	800803c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008030:	f000 f93a 	bl	80082a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	e002      	b.n	8008042 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008042:	4a04      	ldr	r2, [pc, #16]	@ (8008054 <prvSampleTimeNow+0x3c>)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008048:	68fb      	ldr	r3, [r7, #12]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20001088 	.word	0x20001088

08008058 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
 8008064:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008066:	2300      	movs	r3, #0
 8008068:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	429a      	cmp	r2, r3
 800807c:	d812      	bhi.n	80080a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	1ad2      	subs	r2, r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	429a      	cmp	r2, r3
 800808a:	d302      	bcc.n	8008092 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800808c:	2301      	movs	r3, #1
 800808e:	617b      	str	r3, [r7, #20]
 8008090:	e01b      	b.n	80080ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008092:	4b10      	ldr	r3, [pc, #64]	@ (80080d4 <prvInsertTimerInActiveList+0x7c>)
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3304      	adds	r3, #4
 800809a:	4619      	mov	r1, r3
 800809c:	4610      	mov	r0, r2
 800809e:	f7fe f977 	bl	8006390 <vListInsert>
 80080a2:	e012      	b.n	80080ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d206      	bcs.n	80080ba <prvInsertTimerInActiveList+0x62>
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d302      	bcc.n	80080ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080b4:	2301      	movs	r3, #1
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	e007      	b.n	80080ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080ba:	4b07      	ldr	r3, [pc, #28]	@ (80080d8 <prvInsertTimerInActiveList+0x80>)
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3304      	adds	r3, #4
 80080c2:	4619      	mov	r1, r3
 80080c4:	4610      	mov	r0, r2
 80080c6:	f7fe f963 	bl	8006390 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80080ca:	697b      	ldr	r3, [r7, #20]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	2000107c 	.word	0x2000107c
 80080d8:	20001078 	.word	0x20001078

080080dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b08e      	sub	sp, #56	@ 0x38
 80080e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080e2:	e0ce      	b.n	8008282 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da19      	bge.n	800811e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80080ea:	1d3b      	adds	r3, r7, #4
 80080ec:	3304      	adds	r3, #4
 80080ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80080f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10b      	bne.n	800810e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	61fb      	str	r3, [r7, #28]
}
 8008108:	bf00      	nop
 800810a:	bf00      	nop
 800810c:	e7fd      	b.n	800810a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800810e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008114:	6850      	ldr	r0, [r2, #4]
 8008116:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008118:	6892      	ldr	r2, [r2, #8]
 800811a:	4611      	mov	r1, r2
 800811c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	f2c0 80ae 	blt.w	8008282 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800812a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d004      	beq.n	800813c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008134:	3304      	adds	r3, #4
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe f962 	bl	8006400 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800813c:	463b      	mov	r3, r7
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff ff6a 	bl	8008018 <prvSampleTimeNow>
 8008144:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2b09      	cmp	r3, #9
 800814a:	f200 8097 	bhi.w	800827c <prvProcessReceivedCommands+0x1a0>
 800814e:	a201      	add	r2, pc, #4	@ (adr r2, 8008154 <prvProcessReceivedCommands+0x78>)
 8008150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008154:	0800817d 	.word	0x0800817d
 8008158:	0800817d 	.word	0x0800817d
 800815c:	0800817d 	.word	0x0800817d
 8008160:	080081f3 	.word	0x080081f3
 8008164:	08008207 	.word	0x08008207
 8008168:	08008253 	.word	0x08008253
 800816c:	0800817d 	.word	0x0800817d
 8008170:	0800817d 	.word	0x0800817d
 8008174:	080081f3 	.word	0x080081f3
 8008178:	08008207 	.word	0x08008207
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800817c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008182:	f043 0301 	orr.w	r3, r3, #1
 8008186:	b2da      	uxtb	r2, r3
 8008188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	18d1      	adds	r1, r2, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800819a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800819c:	f7ff ff5c 	bl	8008058 <prvInsertTimerInActiveList>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d06c      	beq.n	8008280 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081b4:	f003 0304 	and.w	r3, r3, #4
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d061      	beq.n	8008280 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	441a      	add	r2, r3
 80081c4:	2300      	movs	r3, #0
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	2300      	movs	r3, #0
 80081ca:	2100      	movs	r1, #0
 80081cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081ce:	f7ff fe03 	bl	8007dd8 <xTimerGenericCommand>
 80081d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d152      	bne.n	8008280 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	61bb      	str	r3, [r7, #24]
}
 80081ec:	bf00      	nop
 80081ee:	bf00      	nop
 80081f0:	e7fd      	b.n	80081ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008200:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008204:	e03d      	b.n	8008282 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008208:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	b2da      	uxtb	r2, r3
 8008212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008214:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800821e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10b      	bne.n	800823e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	617b      	str	r3, [r7, #20]
}
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	e7fd      	b.n	800823a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800823e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008244:	18d1      	adds	r1, r2, r3
 8008246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800824a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800824c:	f7ff ff04 	bl	8008058 <prvInsertTimerInActiveList>
					break;
 8008250:	e017      	b.n	8008282 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008254:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008258:	f003 0302 	and.w	r3, r3, #2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d103      	bne.n	8008268 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008262:	f000 fb8b 	bl	800897c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008266:	e00c      	b.n	8008282 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800826e:	f023 0301 	bic.w	r3, r3, #1
 8008272:	b2da      	uxtb	r2, r3
 8008274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008276:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800827a:	e002      	b.n	8008282 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800827c:	bf00      	nop
 800827e:	e000      	b.n	8008282 <prvProcessReceivedCommands+0x1a6>
					break;
 8008280:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008282:	4b08      	ldr	r3, [pc, #32]	@ (80082a4 <prvProcessReceivedCommands+0x1c8>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	1d39      	adds	r1, r7, #4
 8008288:	2200      	movs	r2, #0
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe fb8c 	bl	80069a8 <xQueueReceive>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	f47f af26 	bne.w	80080e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008298:	bf00      	nop
 800829a:	bf00      	nop
 800829c:	3730      	adds	r7, #48	@ 0x30
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20001080 	.word	0x20001080

080082a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b088      	sub	sp, #32
 80082ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082ae:	e049      	b.n	8008344 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082b0:	4b2e      	ldr	r3, [pc, #184]	@ (800836c <prvSwitchTimerLists+0xc4>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ba:	4b2c      	ldr	r3, [pc, #176]	@ (800836c <prvSwitchTimerLists+0xc4>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3304      	adds	r3, #4
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fe f899 	bl	8006400 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082dc:	f003 0304 	and.w	r3, r3, #4
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d02f      	beq.n	8008344 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	4413      	add	r3, r2
 80082ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d90e      	bls.n	8008314 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008302:	4b1a      	ldr	r3, [pc, #104]	@ (800836c <prvSwitchTimerLists+0xc4>)
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	3304      	adds	r3, #4
 800830a:	4619      	mov	r1, r3
 800830c:	4610      	mov	r0, r2
 800830e:	f7fe f83f 	bl	8006390 <vListInsert>
 8008312:	e017      	b.n	8008344 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008314:	2300      	movs	r3, #0
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	2300      	movs	r3, #0
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	2100      	movs	r1, #0
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f7ff fd5a 	bl	8007dd8 <xTimerGenericCommand>
 8008324:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10b      	bne.n	8008344 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	603b      	str	r3, [r7, #0]
}
 800833e:	bf00      	nop
 8008340:	bf00      	nop
 8008342:	e7fd      	b.n	8008340 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008344:	4b09      	ldr	r3, [pc, #36]	@ (800836c <prvSwitchTimerLists+0xc4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1b0      	bne.n	80082b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800834e:	4b07      	ldr	r3, [pc, #28]	@ (800836c <prvSwitchTimerLists+0xc4>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008354:	4b06      	ldr	r3, [pc, #24]	@ (8008370 <prvSwitchTimerLists+0xc8>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a04      	ldr	r2, [pc, #16]	@ (800836c <prvSwitchTimerLists+0xc4>)
 800835a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800835c:	4a04      	ldr	r2, [pc, #16]	@ (8008370 <prvSwitchTimerLists+0xc8>)
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	6013      	str	r3, [r2, #0]
}
 8008362:	bf00      	nop
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	20001078 	.word	0x20001078
 8008370:	2000107c 	.word	0x2000107c

08008374 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800837a:	f000 f92f 	bl	80085dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800837e:	4b15      	ldr	r3, [pc, #84]	@ (80083d4 <prvCheckForValidListAndQueue+0x60>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d120      	bne.n	80083c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008386:	4814      	ldr	r0, [pc, #80]	@ (80083d8 <prvCheckForValidListAndQueue+0x64>)
 8008388:	f7fd ffb4 	bl	80062f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800838c:	4813      	ldr	r0, [pc, #76]	@ (80083dc <prvCheckForValidListAndQueue+0x68>)
 800838e:	f7fd ffb1 	bl	80062f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008392:	4b13      	ldr	r3, [pc, #76]	@ (80083e0 <prvCheckForValidListAndQueue+0x6c>)
 8008394:	4a10      	ldr	r2, [pc, #64]	@ (80083d8 <prvCheckForValidListAndQueue+0x64>)
 8008396:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008398:	4b12      	ldr	r3, [pc, #72]	@ (80083e4 <prvCheckForValidListAndQueue+0x70>)
 800839a:	4a10      	ldr	r2, [pc, #64]	@ (80083dc <prvCheckForValidListAndQueue+0x68>)
 800839c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800839e:	2300      	movs	r3, #0
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	4b11      	ldr	r3, [pc, #68]	@ (80083e8 <prvCheckForValidListAndQueue+0x74>)
 80083a4:	4a11      	ldr	r2, [pc, #68]	@ (80083ec <prvCheckForValidListAndQueue+0x78>)
 80083a6:	2110      	movs	r1, #16
 80083a8:	200a      	movs	r0, #10
 80083aa:	f7fe f8bd 	bl	8006528 <xQueueGenericCreateStatic>
 80083ae:	4603      	mov	r3, r0
 80083b0:	4a08      	ldr	r2, [pc, #32]	@ (80083d4 <prvCheckForValidListAndQueue+0x60>)
 80083b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80083b4:	4b07      	ldr	r3, [pc, #28]	@ (80083d4 <prvCheckForValidListAndQueue+0x60>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d005      	beq.n	80083c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80083bc:	4b05      	ldr	r3, [pc, #20]	@ (80083d4 <prvCheckForValidListAndQueue+0x60>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	490b      	ldr	r1, [pc, #44]	@ (80083f0 <prvCheckForValidListAndQueue+0x7c>)
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fce2 	bl	8006d8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083c8:	f000 f938 	bl	800863c <vPortExitCritical>
}
 80083cc:	bf00      	nop
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20001080 	.word	0x20001080
 80083d8:	20001050 	.word	0x20001050
 80083dc:	20001064 	.word	0x20001064
 80083e0:	20001078 	.word	0x20001078
 80083e4:	2000107c 	.word	0x2000107c
 80083e8:	2000112c 	.word	0x2000112c
 80083ec:	2000108c 	.word	0x2000108c
 80083f0:	0800ba60 	.word	0x0800ba60

080083f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3b04      	subs	r3, #4
 8008404:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800840c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	3b04      	subs	r3, #4
 8008412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	f023 0201 	bic.w	r2, r3, #1
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3b04      	subs	r3, #4
 8008422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008424:	4a08      	ldr	r2, [pc, #32]	@ (8008448 <pxPortInitialiseStack+0x54>)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3b14      	subs	r3, #20
 800842e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3b20      	subs	r3, #32
 800843a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800843c:	68fb      	ldr	r3, [r7, #12]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr
 8008448:	0800844d 	.word	0x0800844d

0800844c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008452:	2300      	movs	r3, #0
 8008454:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008456:	4b12      	ldr	r3, [pc, #72]	@ (80084a0 <prvTaskExitError+0x54>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845e:	d00b      	beq.n	8008478 <prvTaskExitError+0x2c>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	60fb      	str	r3, [r7, #12]
}
 8008472:	bf00      	nop
 8008474:	bf00      	nop
 8008476:	e7fd      	b.n	8008474 <prvTaskExitError+0x28>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	60bb      	str	r3, [r7, #8]
}
 800848a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800848c:	bf00      	nop
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d0fc      	beq.n	800848e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr
 80084a0:	20000024 	.word	0x20000024
	...

080084b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80084b0:	4b07      	ldr	r3, [pc, #28]	@ (80084d0 <pxCurrentTCBConst2>)
 80084b2:	6819      	ldr	r1, [r3, #0]
 80084b4:	6808      	ldr	r0, [r1, #0]
 80084b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084ba:	f380 8809 	msr	PSP, r0
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f04f 0000 	mov.w	r0, #0
 80084c6:	f380 8811 	msr	BASEPRI, r0
 80084ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80084ce:	4770      	bx	lr

080084d0 <pxCurrentTCBConst2>:
 80084d0:	20000b50 	.word	0x20000b50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop

080084d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80084d8:	4806      	ldr	r0, [pc, #24]	@ (80084f4 <prvPortStartFirstTask+0x1c>)
 80084da:	6800      	ldr	r0, [r0, #0]
 80084dc:	6800      	ldr	r0, [r0, #0]
 80084de:	f380 8808 	msr	MSP, r0
 80084e2:	b662      	cpsie	i
 80084e4:	b661      	cpsie	f
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	df00      	svc	0
 80084f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084f2:	bf00      	nop
 80084f4:	e000ed08 	.word	0xe000ed08

080084f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084fe:	4b32      	ldr	r3, [pc, #200]	@ (80085c8 <xPortStartScheduler+0xd0>)
 8008500:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	b2db      	uxtb	r3, r3
 8008508:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	22ff      	movs	r2, #255	@ 0xff
 800850e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	b2db      	uxtb	r3, r3
 8008516:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	b2db      	uxtb	r3, r3
 800851c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008520:	b2da      	uxtb	r2, r3
 8008522:	4b2a      	ldr	r3, [pc, #168]	@ (80085cc <xPortStartScheduler+0xd4>)
 8008524:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008526:	4b2a      	ldr	r3, [pc, #168]	@ (80085d0 <xPortStartScheduler+0xd8>)
 8008528:	2207      	movs	r2, #7
 800852a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800852c:	e009      	b.n	8008542 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800852e:	4b28      	ldr	r3, [pc, #160]	@ (80085d0 <xPortStartScheduler+0xd8>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3b01      	subs	r3, #1
 8008534:	4a26      	ldr	r2, [pc, #152]	@ (80085d0 <xPortStartScheduler+0xd8>)
 8008536:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008538:	78fb      	ldrb	r3, [r7, #3]
 800853a:	b2db      	uxtb	r3, r3
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	b2db      	uxtb	r3, r3
 8008540:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008542:	78fb      	ldrb	r3, [r7, #3]
 8008544:	b2db      	uxtb	r3, r3
 8008546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800854a:	2b80      	cmp	r3, #128	@ 0x80
 800854c:	d0ef      	beq.n	800852e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800854e:	4b20      	ldr	r3, [pc, #128]	@ (80085d0 <xPortStartScheduler+0xd8>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f1c3 0307 	rsb	r3, r3, #7
 8008556:	2b04      	cmp	r3, #4
 8008558:	d00b      	beq.n	8008572 <xPortStartScheduler+0x7a>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	60bb      	str	r3, [r7, #8]
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	e7fd      	b.n	800856e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008572:	4b17      	ldr	r3, [pc, #92]	@ (80085d0 <xPortStartScheduler+0xd8>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	021b      	lsls	r3, r3, #8
 8008578:	4a15      	ldr	r2, [pc, #84]	@ (80085d0 <xPortStartScheduler+0xd8>)
 800857a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800857c:	4b14      	ldr	r3, [pc, #80]	@ (80085d0 <xPortStartScheduler+0xd8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008584:	4a12      	ldr	r2, [pc, #72]	@ (80085d0 <xPortStartScheduler+0xd8>)
 8008586:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	b2da      	uxtb	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008590:	4b10      	ldr	r3, [pc, #64]	@ (80085d4 <xPortStartScheduler+0xdc>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a0f      	ldr	r2, [pc, #60]	@ (80085d4 <xPortStartScheduler+0xdc>)
 8008596:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800859a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800859c:	4b0d      	ldr	r3, [pc, #52]	@ (80085d4 <xPortStartScheduler+0xdc>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a0c      	ldr	r2, [pc, #48]	@ (80085d4 <xPortStartScheduler+0xdc>)
 80085a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80085a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80085a8:	f000 f8b8 	bl	800871c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80085ac:	4b0a      	ldr	r3, [pc, #40]	@ (80085d8 <xPortStartScheduler+0xe0>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80085b2:	f7ff ff91 	bl	80084d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80085b6:	f7ff f867 	bl	8007688 <vTaskSwitchContext>
	prvTaskExitError();
 80085ba:	f7ff ff47 	bl	800844c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	e000e400 	.word	0xe000e400
 80085cc:	2000117c 	.word	0x2000117c
 80085d0:	20001180 	.word	0x20001180
 80085d4:	e000ed20 	.word	0xe000ed20
 80085d8:	20000024 	.word	0x20000024

080085dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	607b      	str	r3, [r7, #4]
}
 80085f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008634 <vPortEnterCritical+0x58>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3301      	adds	r3, #1
 80085fc:	4a0d      	ldr	r2, [pc, #52]	@ (8008634 <vPortEnterCritical+0x58>)
 80085fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008600:	4b0c      	ldr	r3, [pc, #48]	@ (8008634 <vPortEnterCritical+0x58>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d110      	bne.n	800862a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008608:	4b0b      	ldr	r3, [pc, #44]	@ (8008638 <vPortEnterCritical+0x5c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00b      	beq.n	800862a <vPortEnterCritical+0x4e>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008616:	f383 8811 	msr	BASEPRI, r3
 800861a:	f3bf 8f6f 	isb	sy
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	603b      	str	r3, [r7, #0]
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop
 8008628:	e7fd      	b.n	8008626 <vPortEnterCritical+0x4a>
	}
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	bc80      	pop	{r7}
 8008632:	4770      	bx	lr
 8008634:	20000024 	.word	0x20000024
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008642:	4b12      	ldr	r3, [pc, #72]	@ (800868c <vPortExitCritical+0x50>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10b      	bne.n	8008662 <vPortExitCritical+0x26>
	__asm volatile
 800864a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	607b      	str	r3, [r7, #4]
}
 800865c:	bf00      	nop
 800865e:	bf00      	nop
 8008660:	e7fd      	b.n	800865e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008662:	4b0a      	ldr	r3, [pc, #40]	@ (800868c <vPortExitCritical+0x50>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	3b01      	subs	r3, #1
 8008668:	4a08      	ldr	r2, [pc, #32]	@ (800868c <vPortExitCritical+0x50>)
 800866a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800866c:	4b07      	ldr	r3, [pc, #28]	@ (800868c <vPortExitCritical+0x50>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d105      	bne.n	8008680 <vPortExitCritical+0x44>
 8008674:	2300      	movs	r3, #0
 8008676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	f383 8811 	msr	BASEPRI, r3
}
 800867e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	bc80      	pop	{r7}
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	20000024 	.word	0x20000024

08008690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008690:	f3ef 8009 	mrs	r0, PSP
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	4b0d      	ldr	r3, [pc, #52]	@ (80086d0 <pxCurrentTCBConst>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80086a0:	6010      	str	r0, [r2, #0]
 80086a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80086a6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80086aa:	f380 8811 	msr	BASEPRI, r0
 80086ae:	f7fe ffeb 	bl	8007688 <vTaskSwitchContext>
 80086b2:	f04f 0000 	mov.w	r0, #0
 80086b6:	f380 8811 	msr	BASEPRI, r0
 80086ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80086be:	6819      	ldr	r1, [r3, #0]
 80086c0:	6808      	ldr	r0, [r1, #0]
 80086c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80086c6:	f380 8809 	msr	PSP, r0
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	4770      	bx	lr

080086d0 <pxCurrentTCBConst>:
 80086d0:	20000b50 	.word	0x20000b50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086d4:	bf00      	nop
 80086d6:	bf00      	nop

080086d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
	__asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	607b      	str	r3, [r7, #4]
}
 80086f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086f2:	f7fe ff0f 	bl	8007514 <xTaskIncrementTick>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086fc:	4b06      	ldr	r3, [pc, #24]	@ (8008718 <xPortSysTickHandler+0x40>)
 80086fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	2300      	movs	r3, #0
 8008706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	f383 8811 	msr	BASEPRI, r3
}
 800870e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008710:	bf00      	nop
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	e000ed04 	.word	0xe000ed04

0800871c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008720:	4b0a      	ldr	r3, [pc, #40]	@ (800874c <vPortSetupTimerInterrupt+0x30>)
 8008722:	2200      	movs	r2, #0
 8008724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008726:	4b0a      	ldr	r3, [pc, #40]	@ (8008750 <vPortSetupTimerInterrupt+0x34>)
 8008728:	2200      	movs	r2, #0
 800872a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800872c:	4b09      	ldr	r3, [pc, #36]	@ (8008754 <vPortSetupTimerInterrupt+0x38>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a09      	ldr	r2, [pc, #36]	@ (8008758 <vPortSetupTimerInterrupt+0x3c>)
 8008732:	fba2 2303 	umull	r2, r3, r2, r3
 8008736:	099b      	lsrs	r3, r3, #6
 8008738:	4a08      	ldr	r2, [pc, #32]	@ (800875c <vPortSetupTimerInterrupt+0x40>)
 800873a:	3b01      	subs	r3, #1
 800873c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800873e:	4b03      	ldr	r3, [pc, #12]	@ (800874c <vPortSetupTimerInterrupt+0x30>)
 8008740:	2207      	movs	r2, #7
 8008742:	601a      	str	r2, [r3, #0]
}
 8008744:	bf00      	nop
 8008746:	46bd      	mov	sp, r7
 8008748:	bc80      	pop	{r7}
 800874a:	4770      	bx	lr
 800874c:	e000e010 	.word	0xe000e010
 8008750:	e000e018 	.word	0xe000e018
 8008754:	20000018 	.word	0x20000018
 8008758:	10624dd3 	.word	0x10624dd3
 800875c:	e000e014 	.word	0xe000e014

08008760 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008766:	f3ef 8305 	mrs	r3, IPSR
 800876a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2b0f      	cmp	r3, #15
 8008770:	d915      	bls.n	800879e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008772:	4a17      	ldr	r2, [pc, #92]	@ (80087d0 <vPortValidateInterruptPriority+0x70>)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4413      	add	r3, r2
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800877c:	4b15      	ldr	r3, [pc, #84]	@ (80087d4 <vPortValidateInterruptPriority+0x74>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	7afa      	ldrb	r2, [r7, #11]
 8008782:	429a      	cmp	r2, r3
 8008784:	d20b      	bcs.n	800879e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	607b      	str	r3, [r7, #4]
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	e7fd      	b.n	800879a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800879e:	4b0e      	ldr	r3, [pc, #56]	@ (80087d8 <vPortValidateInterruptPriority+0x78>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80087a6:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <vPortValidateInterruptPriority+0x7c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d90b      	bls.n	80087c6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	603b      	str	r3, [r7, #0]
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	e7fd      	b.n	80087c2 <vPortValidateInterruptPriority+0x62>
	}
 80087c6:	bf00      	nop
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bc80      	pop	{r7}
 80087ce:	4770      	bx	lr
 80087d0:	e000e3f0 	.word	0xe000e3f0
 80087d4:	2000117c 	.word	0x2000117c
 80087d8:	e000ed0c 	.word	0xe000ed0c
 80087dc:	20001180 	.word	0x20001180

080087e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08a      	sub	sp, #40	@ 0x28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087ec:	f7fe fdd8 	bl	80073a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087f0:	4b5c      	ldr	r3, [pc, #368]	@ (8008964 <pvPortMalloc+0x184>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d101      	bne.n	80087fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087f8:	f000 f924 	bl	8008a44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087fc:	4b5a      	ldr	r3, [pc, #360]	@ (8008968 <pvPortMalloc+0x188>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4013      	ands	r3, r2
 8008804:	2b00      	cmp	r3, #0
 8008806:	f040 8095 	bne.w	8008934 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d01e      	beq.n	800884e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008810:	2208      	movs	r2, #8
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4413      	add	r3, r2
 8008816:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f003 0307 	and.w	r3, r3, #7
 800881e:	2b00      	cmp	r3, #0
 8008820:	d015      	beq.n	800884e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f023 0307 	bic.w	r3, r3, #7
 8008828:	3308      	adds	r3, #8
 800882a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00b      	beq.n	800884e <pvPortMalloc+0x6e>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	617b      	str	r3, [r7, #20]
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	e7fd      	b.n	800884a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d06f      	beq.n	8008934 <pvPortMalloc+0x154>
 8008854:	4b45      	ldr	r3, [pc, #276]	@ (800896c <pvPortMalloc+0x18c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	429a      	cmp	r2, r3
 800885c:	d86a      	bhi.n	8008934 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800885e:	4b44      	ldr	r3, [pc, #272]	@ (8008970 <pvPortMalloc+0x190>)
 8008860:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008862:	4b43      	ldr	r3, [pc, #268]	@ (8008970 <pvPortMalloc+0x190>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008868:	e004      	b.n	8008874 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800886a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800886e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	429a      	cmp	r2, r3
 800887c:	d903      	bls.n	8008886 <pvPortMalloc+0xa6>
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1f1      	bne.n	800886a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008886:	4b37      	ldr	r3, [pc, #220]	@ (8008964 <pvPortMalloc+0x184>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800888c:	429a      	cmp	r2, r3
 800888e:	d051      	beq.n	8008934 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008890:	6a3b      	ldr	r3, [r7, #32]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2208      	movs	r2, #8
 8008896:	4413      	add	r3, r2
 8008898:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800889a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	1ad2      	subs	r2, r2, r3
 80088aa:	2308      	movs	r3, #8
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d920      	bls.n	80088f4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4413      	add	r3, r2
 80088b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	f003 0307 	and.w	r3, r3, #7
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00b      	beq.n	80088dc <pvPortMalloc+0xfc>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	613b      	str	r3, [r7, #16]
}
 80088d6:	bf00      	nop
 80088d8:	bf00      	nop
 80088da:	e7fd      	b.n	80088d8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	1ad2      	subs	r2, r2, r3
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088ee:	69b8      	ldr	r0, [r7, #24]
 80088f0:	f000 f90a 	bl	8008b08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088f4:	4b1d      	ldr	r3, [pc, #116]	@ (800896c <pvPortMalloc+0x18c>)
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	4a1b      	ldr	r2, [pc, #108]	@ (800896c <pvPortMalloc+0x18c>)
 8008900:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008902:	4b1a      	ldr	r3, [pc, #104]	@ (800896c <pvPortMalloc+0x18c>)
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	4b1b      	ldr	r3, [pc, #108]	@ (8008974 <pvPortMalloc+0x194>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d203      	bcs.n	8008916 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800890e:	4b17      	ldr	r3, [pc, #92]	@ (800896c <pvPortMalloc+0x18c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a18      	ldr	r2, [pc, #96]	@ (8008974 <pvPortMalloc+0x194>)
 8008914:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	4b13      	ldr	r3, [pc, #76]	@ (8008968 <pvPortMalloc+0x188>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	431a      	orrs	r2, r3
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	2200      	movs	r2, #0
 8008928:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800892a:	4b13      	ldr	r3, [pc, #76]	@ (8008978 <pvPortMalloc+0x198>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3301      	adds	r3, #1
 8008930:	4a11      	ldr	r2, [pc, #68]	@ (8008978 <pvPortMalloc+0x198>)
 8008932:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008934:	f7fe fd42 	bl	80073bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00b      	beq.n	800895a <pvPortMalloc+0x17a>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	60fb      	str	r3, [r7, #12]
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop
 8008958:	e7fd      	b.n	8008956 <pvPortMalloc+0x176>
	return pvReturn;
 800895a:	69fb      	ldr	r3, [r7, #28]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3728      	adds	r7, #40	@ 0x28
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20001d8c 	.word	0x20001d8c
 8008968:	20001da0 	.word	0x20001da0
 800896c:	20001d90 	.word	0x20001d90
 8008970:	20001d84 	.word	0x20001d84
 8008974:	20001d94 	.word	0x20001d94
 8008978:	20001d98 	.word	0x20001d98

0800897c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d04f      	beq.n	8008a2e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800898e:	2308      	movs	r3, #8
 8008990:	425b      	negs	r3, r3
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	4413      	add	r3, r2
 8008996:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	685a      	ldr	r2, [r3, #4]
 80089a0:	4b25      	ldr	r3, [pc, #148]	@ (8008a38 <vPortFree+0xbc>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4013      	ands	r3, r2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10b      	bne.n	80089c2 <vPortFree+0x46>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	60fb      	str	r3, [r7, #12]
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	e7fd      	b.n	80089be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00b      	beq.n	80089e2 <vPortFree+0x66>
	__asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	60bb      	str	r3, [r7, #8]
}
 80089dc:	bf00      	nop
 80089de:	bf00      	nop
 80089e0:	e7fd      	b.n	80089de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	4b14      	ldr	r3, [pc, #80]	@ (8008a38 <vPortFree+0xbc>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4013      	ands	r3, r2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d01e      	beq.n	8008a2e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d11a      	bne.n	8008a2e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008a38 <vPortFree+0xbc>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	43db      	mvns	r3, r3
 8008a02:	401a      	ands	r2, r3
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a08:	f7fe fcca 	bl	80073a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	685a      	ldr	r2, [r3, #4]
 8008a10:	4b0a      	ldr	r3, [pc, #40]	@ (8008a3c <vPortFree+0xc0>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4413      	add	r3, r2
 8008a16:	4a09      	ldr	r2, [pc, #36]	@ (8008a3c <vPortFree+0xc0>)
 8008a18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a1a:	6938      	ldr	r0, [r7, #16]
 8008a1c:	f000 f874 	bl	8008b08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008a20:	4b07      	ldr	r3, [pc, #28]	@ (8008a40 <vPortFree+0xc4>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3301      	adds	r3, #1
 8008a26:	4a06      	ldr	r2, [pc, #24]	@ (8008a40 <vPortFree+0xc4>)
 8008a28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008a2a:	f7fe fcc7 	bl	80073bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a2e:	bf00      	nop
 8008a30:	3718      	adds	r7, #24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	20001da0 	.word	0x20001da0
 8008a3c:	20001d90 	.word	0x20001d90
 8008a40:	20001d9c 	.word	0x20001d9c

08008a44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a4a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008a4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a50:	4b27      	ldr	r3, [pc, #156]	@ (8008af0 <prvHeapInit+0xac>)
 8008a52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00c      	beq.n	8008a78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	3307      	adds	r3, #7
 8008a62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 0307 	bic.w	r3, r3, #7
 8008a6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	4a1f      	ldr	r2, [pc, #124]	@ (8008af0 <prvHeapInit+0xac>)
 8008a74:	4413      	add	r3, r2
 8008a76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008af4 <prvHeapInit+0xb0>)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a82:	4b1c      	ldr	r3, [pc, #112]	@ (8008af4 <prvHeapInit+0xb0>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a90:	2208      	movs	r2, #8
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	1a9b      	subs	r3, r3, r2
 8008a96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f023 0307 	bic.w	r3, r3, #7
 8008a9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4a15      	ldr	r2, [pc, #84]	@ (8008af8 <prvHeapInit+0xb4>)
 8008aa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008aa6:	4b14      	ldr	r3, [pc, #80]	@ (8008af8 <prvHeapInit+0xb4>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008aae:	4b12      	ldr	r3, [pc, #72]	@ (8008af8 <prvHeapInit+0xb4>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	1ad2      	subs	r2, r2, r3
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8008af8 <prvHeapInit+0xb4>)
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8008afc <prvHeapInit+0xb8>)
 8008ad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	4a09      	ldr	r2, [pc, #36]	@ (8008b00 <prvHeapInit+0xbc>)
 8008ada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008adc:	4b09      	ldr	r3, [pc, #36]	@ (8008b04 <prvHeapInit+0xc0>)
 8008ade:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008ae2:	601a      	str	r2, [r3, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	3714      	adds	r7, #20
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bc80      	pop	{r7}
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	20001184 	.word	0x20001184
 8008af4:	20001d84 	.word	0x20001d84
 8008af8:	20001d8c 	.word	0x20001d8c
 8008afc:	20001d94 	.word	0x20001d94
 8008b00:	20001d90 	.word	0x20001d90
 8008b04:	20001da0 	.word	0x20001da0

08008b08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b10:	4b27      	ldr	r3, [pc, #156]	@ (8008bb0 <prvInsertBlockIntoFreeList+0xa8>)
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	e002      	b.n	8008b1c <prvInsertBlockIntoFreeList+0x14>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	60fb      	str	r3, [r7, #12]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d8f7      	bhi.n	8008b16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	4413      	add	r3, r2
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d108      	bne.n	8008b4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	685a      	ldr	r2, [r3, #4]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	441a      	add	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	441a      	add	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d118      	bne.n	8008b90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	4b14      	ldr	r3, [pc, #80]	@ (8008bb4 <prvInsertBlockIntoFreeList+0xac>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d00d      	beq.n	8008b86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	441a      	add	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	e008      	b.n	8008b98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b86:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb4 <prvInsertBlockIntoFreeList+0xac>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	e003      	b.n	8008b98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d002      	beq.n	8008ba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ba6:	bf00      	nop
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bc80      	pop	{r7}
 8008bae:	4770      	bx	lr
 8008bb0:	20001d84 	.word	0x20001d84
 8008bb4:	20001d8c 	.word	0x20001d8c

08008bb8 <__cvt>:
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bbe:	461d      	mov	r5, r3
 8008bc0:	bfbb      	ittet	lt
 8008bc2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008bc6:	461d      	movlt	r5, r3
 8008bc8:	2300      	movge	r3, #0
 8008bca:	232d      	movlt	r3, #45	@ 0x2d
 8008bcc:	b088      	sub	sp, #32
 8008bce:	4614      	mov	r4, r2
 8008bd0:	bfb8      	it	lt
 8008bd2:	4614      	movlt	r4, r2
 8008bd4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008bd6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008bd8:	7013      	strb	r3, [r2, #0]
 8008bda:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008bdc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008be0:	f023 0820 	bic.w	r8, r3, #32
 8008be4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008be8:	d005      	beq.n	8008bf6 <__cvt+0x3e>
 8008bea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008bee:	d100      	bne.n	8008bf2 <__cvt+0x3a>
 8008bf0:	3601      	adds	r6, #1
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	e000      	b.n	8008bf8 <__cvt+0x40>
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	aa07      	add	r2, sp, #28
 8008bfa:	9204      	str	r2, [sp, #16]
 8008bfc:	aa06      	add	r2, sp, #24
 8008bfe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008c02:	e9cd 3600 	strd	r3, r6, [sp]
 8008c06:	4622      	mov	r2, r4
 8008c08:	462b      	mov	r3, r5
 8008c0a:	f000 fec9 	bl	80099a0 <_dtoa_r>
 8008c0e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008c12:	4607      	mov	r7, r0
 8008c14:	d119      	bne.n	8008c4a <__cvt+0x92>
 8008c16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c18:	07db      	lsls	r3, r3, #31
 8008c1a:	d50e      	bpl.n	8008c3a <__cvt+0x82>
 8008c1c:	eb00 0906 	add.w	r9, r0, r6
 8008c20:	2200      	movs	r2, #0
 8008c22:	2300      	movs	r3, #0
 8008c24:	4620      	mov	r0, r4
 8008c26:	4629      	mov	r1, r5
 8008c28:	f7f7 febe 	bl	80009a8 <__aeabi_dcmpeq>
 8008c2c:	b108      	cbz	r0, 8008c32 <__cvt+0x7a>
 8008c2e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008c32:	2230      	movs	r2, #48	@ 0x30
 8008c34:	9b07      	ldr	r3, [sp, #28]
 8008c36:	454b      	cmp	r3, r9
 8008c38:	d31e      	bcc.n	8008c78 <__cvt+0xc0>
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	9b07      	ldr	r3, [sp, #28]
 8008c3e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008c40:	1bdb      	subs	r3, r3, r7
 8008c42:	6013      	str	r3, [r2, #0]
 8008c44:	b008      	add	sp, #32
 8008c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c4a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c4e:	eb00 0906 	add.w	r9, r0, r6
 8008c52:	d1e5      	bne.n	8008c20 <__cvt+0x68>
 8008c54:	7803      	ldrb	r3, [r0, #0]
 8008c56:	2b30      	cmp	r3, #48	@ 0x30
 8008c58:	d10a      	bne.n	8008c70 <__cvt+0xb8>
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	4620      	mov	r0, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7f7 fea1 	bl	80009a8 <__aeabi_dcmpeq>
 8008c66:	b918      	cbnz	r0, 8008c70 <__cvt+0xb8>
 8008c68:	f1c6 0601 	rsb	r6, r6, #1
 8008c6c:	f8ca 6000 	str.w	r6, [sl]
 8008c70:	f8da 3000 	ldr.w	r3, [sl]
 8008c74:	4499      	add	r9, r3
 8008c76:	e7d3      	b.n	8008c20 <__cvt+0x68>
 8008c78:	1c59      	adds	r1, r3, #1
 8008c7a:	9107      	str	r1, [sp, #28]
 8008c7c:	701a      	strb	r2, [r3, #0]
 8008c7e:	e7d9      	b.n	8008c34 <__cvt+0x7c>

08008c80 <__exponent>:
 8008c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c82:	2900      	cmp	r1, #0
 8008c84:	bfb6      	itet	lt
 8008c86:	232d      	movlt	r3, #45	@ 0x2d
 8008c88:	232b      	movge	r3, #43	@ 0x2b
 8008c8a:	4249      	neglt	r1, r1
 8008c8c:	2909      	cmp	r1, #9
 8008c8e:	7002      	strb	r2, [r0, #0]
 8008c90:	7043      	strb	r3, [r0, #1]
 8008c92:	dd29      	ble.n	8008ce8 <__exponent+0x68>
 8008c94:	f10d 0307 	add.w	r3, sp, #7
 8008c98:	461d      	mov	r5, r3
 8008c9a:	270a      	movs	r7, #10
 8008c9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	fb07 1416 	mls	r4, r7, r6, r1
 8008ca6:	3430      	adds	r4, #48	@ 0x30
 8008ca8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008cac:	460c      	mov	r4, r1
 8008cae:	2c63      	cmp	r4, #99	@ 0x63
 8008cb0:	4631      	mov	r1, r6
 8008cb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cb6:	dcf1      	bgt.n	8008c9c <__exponent+0x1c>
 8008cb8:	3130      	adds	r1, #48	@ 0x30
 8008cba:	1e94      	subs	r4, r2, #2
 8008cbc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008cc0:	4623      	mov	r3, r4
 8008cc2:	1c41      	adds	r1, r0, #1
 8008cc4:	42ab      	cmp	r3, r5
 8008cc6:	d30a      	bcc.n	8008cde <__exponent+0x5e>
 8008cc8:	f10d 0309 	add.w	r3, sp, #9
 8008ccc:	1a9b      	subs	r3, r3, r2
 8008cce:	42ac      	cmp	r4, r5
 8008cd0:	bf88      	it	hi
 8008cd2:	2300      	movhi	r3, #0
 8008cd4:	3302      	adds	r3, #2
 8008cd6:	4403      	add	r3, r0
 8008cd8:	1a18      	subs	r0, r3, r0
 8008cda:	b003      	add	sp, #12
 8008cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cde:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ce2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008ce6:	e7ed      	b.n	8008cc4 <__exponent+0x44>
 8008ce8:	2330      	movs	r3, #48	@ 0x30
 8008cea:	3130      	adds	r1, #48	@ 0x30
 8008cec:	7083      	strb	r3, [r0, #2]
 8008cee:	70c1      	strb	r1, [r0, #3]
 8008cf0:	1d03      	adds	r3, r0, #4
 8008cf2:	e7f1      	b.n	8008cd8 <__exponent+0x58>

08008cf4 <_printf_float>:
 8008cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	b091      	sub	sp, #68	@ 0x44
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008d00:	4616      	mov	r6, r2
 8008d02:	461f      	mov	r7, r3
 8008d04:	4605      	mov	r5, r0
 8008d06:	f000 fcd1 	bl	80096ac <_localeconv_r>
 8008d0a:	6803      	ldr	r3, [r0, #0]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	9308      	str	r3, [sp, #32]
 8008d10:	f7f7 fa1e 	bl	8000150 <strlen>
 8008d14:	2300      	movs	r3, #0
 8008d16:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d18:	f8d8 3000 	ldr.w	r3, [r8]
 8008d1c:	9009      	str	r0, [sp, #36]	@ 0x24
 8008d1e:	3307      	adds	r3, #7
 8008d20:	f023 0307 	bic.w	r3, r3, #7
 8008d24:	f103 0208 	add.w	r2, r3, #8
 8008d28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d2c:	f8d4 b000 	ldr.w	fp, [r4]
 8008d30:	f8c8 2000 	str.w	r2, [r8]
 8008d34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008d3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d3e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008d42:	f04f 32ff 	mov.w	r2, #4294967295
 8008d46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008d4e:	4b9c      	ldr	r3, [pc, #624]	@ (8008fc0 <_printf_float+0x2cc>)
 8008d50:	f7f7 fe5c 	bl	8000a0c <__aeabi_dcmpun>
 8008d54:	bb70      	cbnz	r0, 8008db4 <_printf_float+0xc0>
 8008d56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5e:	4b98      	ldr	r3, [pc, #608]	@ (8008fc0 <_printf_float+0x2cc>)
 8008d60:	f7f7 fe36 	bl	80009d0 <__aeabi_dcmple>
 8008d64:	bb30      	cbnz	r0, 8008db4 <_printf_float+0xc0>
 8008d66:	2200      	movs	r2, #0
 8008d68:	2300      	movs	r3, #0
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	f7f7 fe25 	bl	80009bc <__aeabi_dcmplt>
 8008d72:	b110      	cbz	r0, 8008d7a <_printf_float+0x86>
 8008d74:	232d      	movs	r3, #45	@ 0x2d
 8008d76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d7a:	4a92      	ldr	r2, [pc, #584]	@ (8008fc4 <_printf_float+0x2d0>)
 8008d7c:	4b92      	ldr	r3, [pc, #584]	@ (8008fc8 <_printf_float+0x2d4>)
 8008d7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008d82:	bf8c      	ite	hi
 8008d84:	4690      	movhi	r8, r2
 8008d86:	4698      	movls	r8, r3
 8008d88:	2303      	movs	r3, #3
 8008d8a:	f04f 0900 	mov.w	r9, #0
 8008d8e:	6123      	str	r3, [r4, #16]
 8008d90:	f02b 0304 	bic.w	r3, fp, #4
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	4633      	mov	r3, r6
 8008d98:	4621      	mov	r1, r4
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	9700      	str	r7, [sp, #0]
 8008d9e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008da0:	f000 f9d4 	bl	800914c <_printf_common>
 8008da4:	3001      	adds	r0, #1
 8008da6:	f040 8090 	bne.w	8008eca <_printf_float+0x1d6>
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dae:	b011      	add	sp, #68	@ 0x44
 8008db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db4:	4642      	mov	r2, r8
 8008db6:	464b      	mov	r3, r9
 8008db8:	4640      	mov	r0, r8
 8008dba:	4649      	mov	r1, r9
 8008dbc:	f7f7 fe26 	bl	8000a0c <__aeabi_dcmpun>
 8008dc0:	b148      	cbz	r0, 8008dd6 <_printf_float+0xe2>
 8008dc2:	464b      	mov	r3, r9
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	bfb8      	it	lt
 8008dc8:	232d      	movlt	r3, #45	@ 0x2d
 8008dca:	4a80      	ldr	r2, [pc, #512]	@ (8008fcc <_printf_float+0x2d8>)
 8008dcc:	bfb8      	it	lt
 8008dce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008dd2:	4b7f      	ldr	r3, [pc, #508]	@ (8008fd0 <_printf_float+0x2dc>)
 8008dd4:	e7d3      	b.n	8008d7e <_printf_float+0x8a>
 8008dd6:	6863      	ldr	r3, [r4, #4]
 8008dd8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8008ddc:	1c5a      	adds	r2, r3, #1
 8008dde:	d13f      	bne.n	8008e60 <_printf_float+0x16c>
 8008de0:	2306      	movs	r3, #6
 8008de2:	6063      	str	r3, [r4, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8008dea:	6023      	str	r3, [r4, #0]
 8008dec:	9206      	str	r2, [sp, #24]
 8008dee:	aa0e      	add	r2, sp, #56	@ 0x38
 8008df0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008df4:	aa0d      	add	r2, sp, #52	@ 0x34
 8008df6:	9203      	str	r2, [sp, #12]
 8008df8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008dfc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008e00:	6863      	ldr	r3, [r4, #4]
 8008e02:	4642      	mov	r2, r8
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	4628      	mov	r0, r5
 8008e08:	464b      	mov	r3, r9
 8008e0a:	910a      	str	r1, [sp, #40]	@ 0x28
 8008e0c:	f7ff fed4 	bl	8008bb8 <__cvt>
 8008e10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e12:	4680      	mov	r8, r0
 8008e14:	2947      	cmp	r1, #71	@ 0x47
 8008e16:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008e18:	d128      	bne.n	8008e6c <_printf_float+0x178>
 8008e1a:	1cc8      	adds	r0, r1, #3
 8008e1c:	db02      	blt.n	8008e24 <_printf_float+0x130>
 8008e1e:	6863      	ldr	r3, [r4, #4]
 8008e20:	4299      	cmp	r1, r3
 8008e22:	dd40      	ble.n	8008ea6 <_printf_float+0x1b2>
 8008e24:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e28:	fa5f fa8a 	uxtb.w	sl, sl
 8008e2c:	4652      	mov	r2, sl
 8008e2e:	3901      	subs	r1, #1
 8008e30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008e34:	910d      	str	r1, [sp, #52]	@ 0x34
 8008e36:	f7ff ff23 	bl	8008c80 <__exponent>
 8008e3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e3c:	4681      	mov	r9, r0
 8008e3e:	1813      	adds	r3, r2, r0
 8008e40:	2a01      	cmp	r2, #1
 8008e42:	6123      	str	r3, [r4, #16]
 8008e44:	dc02      	bgt.n	8008e4c <_printf_float+0x158>
 8008e46:	6822      	ldr	r2, [r4, #0]
 8008e48:	07d2      	lsls	r2, r2, #31
 8008e4a:	d501      	bpl.n	8008e50 <_printf_float+0x15c>
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	6123      	str	r3, [r4, #16]
 8008e50:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d09e      	beq.n	8008d96 <_printf_float+0xa2>
 8008e58:	232d      	movs	r3, #45	@ 0x2d
 8008e5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e5e:	e79a      	b.n	8008d96 <_printf_float+0xa2>
 8008e60:	2947      	cmp	r1, #71	@ 0x47
 8008e62:	d1bf      	bne.n	8008de4 <_printf_float+0xf0>
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1bd      	bne.n	8008de4 <_printf_float+0xf0>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e7ba      	b.n	8008de2 <_printf_float+0xee>
 8008e6c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e70:	d9dc      	bls.n	8008e2c <_printf_float+0x138>
 8008e72:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008e76:	d118      	bne.n	8008eaa <_printf_float+0x1b6>
 8008e78:	2900      	cmp	r1, #0
 8008e7a:	6863      	ldr	r3, [r4, #4]
 8008e7c:	dd0b      	ble.n	8008e96 <_printf_float+0x1a2>
 8008e7e:	6121      	str	r1, [r4, #16]
 8008e80:	b913      	cbnz	r3, 8008e88 <_printf_float+0x194>
 8008e82:	6822      	ldr	r2, [r4, #0]
 8008e84:	07d0      	lsls	r0, r2, #31
 8008e86:	d502      	bpl.n	8008e8e <_printf_float+0x19a>
 8008e88:	3301      	adds	r3, #1
 8008e8a:	440b      	add	r3, r1
 8008e8c:	6123      	str	r3, [r4, #16]
 8008e8e:	f04f 0900 	mov.w	r9, #0
 8008e92:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008e94:	e7dc      	b.n	8008e50 <_printf_float+0x15c>
 8008e96:	b913      	cbnz	r3, 8008e9e <_printf_float+0x1aa>
 8008e98:	6822      	ldr	r2, [r4, #0]
 8008e9a:	07d2      	lsls	r2, r2, #31
 8008e9c:	d501      	bpl.n	8008ea2 <_printf_float+0x1ae>
 8008e9e:	3302      	adds	r3, #2
 8008ea0:	e7f4      	b.n	8008e8c <_printf_float+0x198>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e7f2      	b.n	8008e8c <_printf_float+0x198>
 8008ea6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008eaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eac:	4299      	cmp	r1, r3
 8008eae:	db05      	blt.n	8008ebc <_printf_float+0x1c8>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	6121      	str	r1, [r4, #16]
 8008eb4:	07d8      	lsls	r0, r3, #31
 8008eb6:	d5ea      	bpl.n	8008e8e <_printf_float+0x19a>
 8008eb8:	1c4b      	adds	r3, r1, #1
 8008eba:	e7e7      	b.n	8008e8c <_printf_float+0x198>
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	bfcc      	ite	gt
 8008ec0:	2201      	movgt	r2, #1
 8008ec2:	f1c1 0202 	rsble	r2, r1, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	e7e0      	b.n	8008e8c <_printf_float+0x198>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	055a      	lsls	r2, r3, #21
 8008ece:	d407      	bmi.n	8008ee0 <_printf_float+0x1ec>
 8008ed0:	6923      	ldr	r3, [r4, #16]
 8008ed2:	4642      	mov	r2, r8
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	47b8      	blx	r7
 8008eda:	3001      	adds	r0, #1
 8008edc:	d12b      	bne.n	8008f36 <_printf_float+0x242>
 8008ede:	e764      	b.n	8008daa <_printf_float+0xb6>
 8008ee0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ee4:	f240 80dc 	bls.w	80090a0 <_printf_float+0x3ac>
 8008ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008eec:	2200      	movs	r2, #0
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f7f7 fd5a 	bl	80009a8 <__aeabi_dcmpeq>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d033      	beq.n	8008f60 <_printf_float+0x26c>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	4631      	mov	r1, r6
 8008efc:	4628      	mov	r0, r5
 8008efe:	4a35      	ldr	r2, [pc, #212]	@ (8008fd4 <_printf_float+0x2e0>)
 8008f00:	47b8      	blx	r7
 8008f02:	3001      	adds	r0, #1
 8008f04:	f43f af51 	beq.w	8008daa <_printf_float+0xb6>
 8008f08:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008f0c:	4543      	cmp	r3, r8
 8008f0e:	db02      	blt.n	8008f16 <_printf_float+0x222>
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	07d8      	lsls	r0, r3, #31
 8008f14:	d50f      	bpl.n	8008f36 <_printf_float+0x242>
 8008f16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	47b8      	blx	r7
 8008f20:	3001      	adds	r0, #1
 8008f22:	f43f af42 	beq.w	8008daa <_printf_float+0xb6>
 8008f26:	f04f 0900 	mov.w	r9, #0
 8008f2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f2e:	f104 0a1a 	add.w	sl, r4, #26
 8008f32:	45c8      	cmp	r8, r9
 8008f34:	dc09      	bgt.n	8008f4a <_printf_float+0x256>
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	079b      	lsls	r3, r3, #30
 8008f3a:	f100 8102 	bmi.w	8009142 <_printf_float+0x44e>
 8008f3e:	68e0      	ldr	r0, [r4, #12]
 8008f40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f42:	4298      	cmp	r0, r3
 8008f44:	bfb8      	it	lt
 8008f46:	4618      	movlt	r0, r3
 8008f48:	e731      	b.n	8008dae <_printf_float+0xba>
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	4652      	mov	r2, sl
 8008f4e:	4631      	mov	r1, r6
 8008f50:	4628      	mov	r0, r5
 8008f52:	47b8      	blx	r7
 8008f54:	3001      	adds	r0, #1
 8008f56:	f43f af28 	beq.w	8008daa <_printf_float+0xb6>
 8008f5a:	f109 0901 	add.w	r9, r9, #1
 8008f5e:	e7e8      	b.n	8008f32 <_printf_float+0x23e>
 8008f60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	dc38      	bgt.n	8008fd8 <_printf_float+0x2e4>
 8008f66:	2301      	movs	r3, #1
 8008f68:	4631      	mov	r1, r6
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	4a19      	ldr	r2, [pc, #100]	@ (8008fd4 <_printf_float+0x2e0>)
 8008f6e:	47b8      	blx	r7
 8008f70:	3001      	adds	r0, #1
 8008f72:	f43f af1a 	beq.w	8008daa <_printf_float+0xb6>
 8008f76:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008f7a:	ea59 0303 	orrs.w	r3, r9, r3
 8008f7e:	d102      	bne.n	8008f86 <_printf_float+0x292>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	07d9      	lsls	r1, r3, #31
 8008f84:	d5d7      	bpl.n	8008f36 <_printf_float+0x242>
 8008f86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	47b8      	blx	r7
 8008f90:	3001      	adds	r0, #1
 8008f92:	f43f af0a 	beq.w	8008daa <_printf_float+0xb6>
 8008f96:	f04f 0a00 	mov.w	sl, #0
 8008f9a:	f104 0b1a 	add.w	fp, r4, #26
 8008f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fa0:	425b      	negs	r3, r3
 8008fa2:	4553      	cmp	r3, sl
 8008fa4:	dc01      	bgt.n	8008faa <_printf_float+0x2b6>
 8008fa6:	464b      	mov	r3, r9
 8008fa8:	e793      	b.n	8008ed2 <_printf_float+0x1de>
 8008faa:	2301      	movs	r3, #1
 8008fac:	465a      	mov	r2, fp
 8008fae:	4631      	mov	r1, r6
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	47b8      	blx	r7
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	f43f aef8 	beq.w	8008daa <_printf_float+0xb6>
 8008fba:	f10a 0a01 	add.w	sl, sl, #1
 8008fbe:	e7ee      	b.n	8008f9e <_printf_float+0x2aa>
 8008fc0:	7fefffff 	.word	0x7fefffff
 8008fc4:	0800bade 	.word	0x0800bade
 8008fc8:	0800bada 	.word	0x0800bada
 8008fcc:	0800bae6 	.word	0x0800bae6
 8008fd0:	0800bae2 	.word	0x0800bae2
 8008fd4:	0800baea 	.word	0x0800baea
 8008fd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008fda:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008fde:	4553      	cmp	r3, sl
 8008fe0:	bfa8      	it	ge
 8008fe2:	4653      	movge	r3, sl
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	4699      	mov	r9, r3
 8008fe8:	dc36      	bgt.n	8009058 <_printf_float+0x364>
 8008fea:	f04f 0b00 	mov.w	fp, #0
 8008fee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ff2:	f104 021a 	add.w	r2, r4, #26
 8008ff6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ff8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ffa:	eba3 0309 	sub.w	r3, r3, r9
 8008ffe:	455b      	cmp	r3, fp
 8009000:	dc31      	bgt.n	8009066 <_printf_float+0x372>
 8009002:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009004:	459a      	cmp	sl, r3
 8009006:	dc3a      	bgt.n	800907e <_printf_float+0x38a>
 8009008:	6823      	ldr	r3, [r4, #0]
 800900a:	07da      	lsls	r2, r3, #31
 800900c:	d437      	bmi.n	800907e <_printf_float+0x38a>
 800900e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009010:	ebaa 0903 	sub.w	r9, sl, r3
 8009014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009016:	ebaa 0303 	sub.w	r3, sl, r3
 800901a:	4599      	cmp	r9, r3
 800901c:	bfa8      	it	ge
 800901e:	4699      	movge	r9, r3
 8009020:	f1b9 0f00 	cmp.w	r9, #0
 8009024:	dc33      	bgt.n	800908e <_printf_float+0x39a>
 8009026:	f04f 0800 	mov.w	r8, #0
 800902a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800902e:	f104 0b1a 	add.w	fp, r4, #26
 8009032:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009034:	ebaa 0303 	sub.w	r3, sl, r3
 8009038:	eba3 0309 	sub.w	r3, r3, r9
 800903c:	4543      	cmp	r3, r8
 800903e:	f77f af7a 	ble.w	8008f36 <_printf_float+0x242>
 8009042:	2301      	movs	r3, #1
 8009044:	465a      	mov	r2, fp
 8009046:	4631      	mov	r1, r6
 8009048:	4628      	mov	r0, r5
 800904a:	47b8      	blx	r7
 800904c:	3001      	adds	r0, #1
 800904e:	f43f aeac 	beq.w	8008daa <_printf_float+0xb6>
 8009052:	f108 0801 	add.w	r8, r8, #1
 8009056:	e7ec      	b.n	8009032 <_printf_float+0x33e>
 8009058:	4642      	mov	r2, r8
 800905a:	4631      	mov	r1, r6
 800905c:	4628      	mov	r0, r5
 800905e:	47b8      	blx	r7
 8009060:	3001      	adds	r0, #1
 8009062:	d1c2      	bne.n	8008fea <_printf_float+0x2f6>
 8009064:	e6a1      	b.n	8008daa <_printf_float+0xb6>
 8009066:	2301      	movs	r3, #1
 8009068:	4631      	mov	r1, r6
 800906a:	4628      	mov	r0, r5
 800906c:	920a      	str	r2, [sp, #40]	@ 0x28
 800906e:	47b8      	blx	r7
 8009070:	3001      	adds	r0, #1
 8009072:	f43f ae9a 	beq.w	8008daa <_printf_float+0xb6>
 8009076:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009078:	f10b 0b01 	add.w	fp, fp, #1
 800907c:	e7bb      	b.n	8008ff6 <_printf_float+0x302>
 800907e:	4631      	mov	r1, r6
 8009080:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009084:	4628      	mov	r0, r5
 8009086:	47b8      	blx	r7
 8009088:	3001      	adds	r0, #1
 800908a:	d1c0      	bne.n	800900e <_printf_float+0x31a>
 800908c:	e68d      	b.n	8008daa <_printf_float+0xb6>
 800908e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009090:	464b      	mov	r3, r9
 8009092:	4631      	mov	r1, r6
 8009094:	4628      	mov	r0, r5
 8009096:	4442      	add	r2, r8
 8009098:	47b8      	blx	r7
 800909a:	3001      	adds	r0, #1
 800909c:	d1c3      	bne.n	8009026 <_printf_float+0x332>
 800909e:	e684      	b.n	8008daa <_printf_float+0xb6>
 80090a0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80090a4:	f1ba 0f01 	cmp.w	sl, #1
 80090a8:	dc01      	bgt.n	80090ae <_printf_float+0x3ba>
 80090aa:	07db      	lsls	r3, r3, #31
 80090ac:	d536      	bpl.n	800911c <_printf_float+0x428>
 80090ae:	2301      	movs	r3, #1
 80090b0:	4642      	mov	r2, r8
 80090b2:	4631      	mov	r1, r6
 80090b4:	4628      	mov	r0, r5
 80090b6:	47b8      	blx	r7
 80090b8:	3001      	adds	r0, #1
 80090ba:	f43f ae76 	beq.w	8008daa <_printf_float+0xb6>
 80090be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80090c2:	4631      	mov	r1, r6
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b8      	blx	r7
 80090c8:	3001      	adds	r0, #1
 80090ca:	f43f ae6e 	beq.w	8008daa <_printf_float+0xb6>
 80090ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090d2:	2200      	movs	r2, #0
 80090d4:	2300      	movs	r3, #0
 80090d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090da:	f7f7 fc65 	bl	80009a8 <__aeabi_dcmpeq>
 80090de:	b9c0      	cbnz	r0, 8009112 <_printf_float+0x41e>
 80090e0:	4653      	mov	r3, sl
 80090e2:	f108 0201 	add.w	r2, r8, #1
 80090e6:	4631      	mov	r1, r6
 80090e8:	4628      	mov	r0, r5
 80090ea:	47b8      	blx	r7
 80090ec:	3001      	adds	r0, #1
 80090ee:	d10c      	bne.n	800910a <_printf_float+0x416>
 80090f0:	e65b      	b.n	8008daa <_printf_float+0xb6>
 80090f2:	2301      	movs	r3, #1
 80090f4:	465a      	mov	r2, fp
 80090f6:	4631      	mov	r1, r6
 80090f8:	4628      	mov	r0, r5
 80090fa:	47b8      	blx	r7
 80090fc:	3001      	adds	r0, #1
 80090fe:	f43f ae54 	beq.w	8008daa <_printf_float+0xb6>
 8009102:	f108 0801 	add.w	r8, r8, #1
 8009106:	45d0      	cmp	r8, sl
 8009108:	dbf3      	blt.n	80090f2 <_printf_float+0x3fe>
 800910a:	464b      	mov	r3, r9
 800910c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009110:	e6e0      	b.n	8008ed4 <_printf_float+0x1e0>
 8009112:	f04f 0800 	mov.w	r8, #0
 8009116:	f104 0b1a 	add.w	fp, r4, #26
 800911a:	e7f4      	b.n	8009106 <_printf_float+0x412>
 800911c:	2301      	movs	r3, #1
 800911e:	4642      	mov	r2, r8
 8009120:	e7e1      	b.n	80090e6 <_printf_float+0x3f2>
 8009122:	2301      	movs	r3, #1
 8009124:	464a      	mov	r2, r9
 8009126:	4631      	mov	r1, r6
 8009128:	4628      	mov	r0, r5
 800912a:	47b8      	blx	r7
 800912c:	3001      	adds	r0, #1
 800912e:	f43f ae3c 	beq.w	8008daa <_printf_float+0xb6>
 8009132:	f108 0801 	add.w	r8, r8, #1
 8009136:	68e3      	ldr	r3, [r4, #12]
 8009138:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800913a:	1a5b      	subs	r3, r3, r1
 800913c:	4543      	cmp	r3, r8
 800913e:	dcf0      	bgt.n	8009122 <_printf_float+0x42e>
 8009140:	e6fd      	b.n	8008f3e <_printf_float+0x24a>
 8009142:	f04f 0800 	mov.w	r8, #0
 8009146:	f104 0919 	add.w	r9, r4, #25
 800914a:	e7f4      	b.n	8009136 <_printf_float+0x442>

0800914c <_printf_common>:
 800914c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009150:	4616      	mov	r6, r2
 8009152:	4698      	mov	r8, r3
 8009154:	688a      	ldr	r2, [r1, #8]
 8009156:	690b      	ldr	r3, [r1, #16]
 8009158:	4607      	mov	r7, r0
 800915a:	4293      	cmp	r3, r2
 800915c:	bfb8      	it	lt
 800915e:	4613      	movlt	r3, r2
 8009160:	6033      	str	r3, [r6, #0]
 8009162:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009166:	460c      	mov	r4, r1
 8009168:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800916c:	b10a      	cbz	r2, 8009172 <_printf_common+0x26>
 800916e:	3301      	adds	r3, #1
 8009170:	6033      	str	r3, [r6, #0]
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	0699      	lsls	r1, r3, #26
 8009176:	bf42      	ittt	mi
 8009178:	6833      	ldrmi	r3, [r6, #0]
 800917a:	3302      	addmi	r3, #2
 800917c:	6033      	strmi	r3, [r6, #0]
 800917e:	6825      	ldr	r5, [r4, #0]
 8009180:	f015 0506 	ands.w	r5, r5, #6
 8009184:	d106      	bne.n	8009194 <_printf_common+0x48>
 8009186:	f104 0a19 	add.w	sl, r4, #25
 800918a:	68e3      	ldr	r3, [r4, #12]
 800918c:	6832      	ldr	r2, [r6, #0]
 800918e:	1a9b      	subs	r3, r3, r2
 8009190:	42ab      	cmp	r3, r5
 8009192:	dc2b      	bgt.n	80091ec <_printf_common+0xa0>
 8009194:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009198:	6822      	ldr	r2, [r4, #0]
 800919a:	3b00      	subs	r3, #0
 800919c:	bf18      	it	ne
 800919e:	2301      	movne	r3, #1
 80091a0:	0692      	lsls	r2, r2, #26
 80091a2:	d430      	bmi.n	8009206 <_printf_common+0xba>
 80091a4:	4641      	mov	r1, r8
 80091a6:	4638      	mov	r0, r7
 80091a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091ac:	47c8      	blx	r9
 80091ae:	3001      	adds	r0, #1
 80091b0:	d023      	beq.n	80091fa <_printf_common+0xae>
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	6922      	ldr	r2, [r4, #16]
 80091b6:	f003 0306 	and.w	r3, r3, #6
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	bf14      	ite	ne
 80091be:	2500      	movne	r5, #0
 80091c0:	6833      	ldreq	r3, [r6, #0]
 80091c2:	f04f 0600 	mov.w	r6, #0
 80091c6:	bf08      	it	eq
 80091c8:	68e5      	ldreq	r5, [r4, #12]
 80091ca:	f104 041a 	add.w	r4, r4, #26
 80091ce:	bf08      	it	eq
 80091d0:	1aed      	subeq	r5, r5, r3
 80091d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80091d6:	bf08      	it	eq
 80091d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091dc:	4293      	cmp	r3, r2
 80091de:	bfc4      	itt	gt
 80091e0:	1a9b      	subgt	r3, r3, r2
 80091e2:	18ed      	addgt	r5, r5, r3
 80091e4:	42b5      	cmp	r5, r6
 80091e6:	d11a      	bne.n	800921e <_printf_common+0xd2>
 80091e8:	2000      	movs	r0, #0
 80091ea:	e008      	b.n	80091fe <_printf_common+0xb2>
 80091ec:	2301      	movs	r3, #1
 80091ee:	4652      	mov	r2, sl
 80091f0:	4641      	mov	r1, r8
 80091f2:	4638      	mov	r0, r7
 80091f4:	47c8      	blx	r9
 80091f6:	3001      	adds	r0, #1
 80091f8:	d103      	bne.n	8009202 <_printf_common+0xb6>
 80091fa:	f04f 30ff 	mov.w	r0, #4294967295
 80091fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009202:	3501      	adds	r5, #1
 8009204:	e7c1      	b.n	800918a <_printf_common+0x3e>
 8009206:	2030      	movs	r0, #48	@ 0x30
 8009208:	18e1      	adds	r1, r4, r3
 800920a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800920e:	1c5a      	adds	r2, r3, #1
 8009210:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009214:	4422      	add	r2, r4
 8009216:	3302      	adds	r3, #2
 8009218:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800921c:	e7c2      	b.n	80091a4 <_printf_common+0x58>
 800921e:	2301      	movs	r3, #1
 8009220:	4622      	mov	r2, r4
 8009222:	4641      	mov	r1, r8
 8009224:	4638      	mov	r0, r7
 8009226:	47c8      	blx	r9
 8009228:	3001      	adds	r0, #1
 800922a:	d0e6      	beq.n	80091fa <_printf_common+0xae>
 800922c:	3601      	adds	r6, #1
 800922e:	e7d9      	b.n	80091e4 <_printf_common+0x98>

08009230 <_printf_i>:
 8009230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009234:	7e0f      	ldrb	r7, [r1, #24]
 8009236:	4691      	mov	r9, r2
 8009238:	2f78      	cmp	r7, #120	@ 0x78
 800923a:	4680      	mov	r8, r0
 800923c:	460c      	mov	r4, r1
 800923e:	469a      	mov	sl, r3
 8009240:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009242:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009246:	d807      	bhi.n	8009258 <_printf_i+0x28>
 8009248:	2f62      	cmp	r7, #98	@ 0x62
 800924a:	d80a      	bhi.n	8009262 <_printf_i+0x32>
 800924c:	2f00      	cmp	r7, #0
 800924e:	f000 80d1 	beq.w	80093f4 <_printf_i+0x1c4>
 8009252:	2f58      	cmp	r7, #88	@ 0x58
 8009254:	f000 80b8 	beq.w	80093c8 <_printf_i+0x198>
 8009258:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800925c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009260:	e03a      	b.n	80092d8 <_printf_i+0xa8>
 8009262:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009266:	2b15      	cmp	r3, #21
 8009268:	d8f6      	bhi.n	8009258 <_printf_i+0x28>
 800926a:	a101      	add	r1, pc, #4	@ (adr r1, 8009270 <_printf_i+0x40>)
 800926c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009270:	080092c9 	.word	0x080092c9
 8009274:	080092dd 	.word	0x080092dd
 8009278:	08009259 	.word	0x08009259
 800927c:	08009259 	.word	0x08009259
 8009280:	08009259 	.word	0x08009259
 8009284:	08009259 	.word	0x08009259
 8009288:	080092dd 	.word	0x080092dd
 800928c:	08009259 	.word	0x08009259
 8009290:	08009259 	.word	0x08009259
 8009294:	08009259 	.word	0x08009259
 8009298:	08009259 	.word	0x08009259
 800929c:	080093db 	.word	0x080093db
 80092a0:	08009307 	.word	0x08009307
 80092a4:	08009395 	.word	0x08009395
 80092a8:	08009259 	.word	0x08009259
 80092ac:	08009259 	.word	0x08009259
 80092b0:	080093fd 	.word	0x080093fd
 80092b4:	08009259 	.word	0x08009259
 80092b8:	08009307 	.word	0x08009307
 80092bc:	08009259 	.word	0x08009259
 80092c0:	08009259 	.word	0x08009259
 80092c4:	0800939d 	.word	0x0800939d
 80092c8:	6833      	ldr	r3, [r6, #0]
 80092ca:	1d1a      	adds	r2, r3, #4
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6032      	str	r2, [r6, #0]
 80092d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80092d8:	2301      	movs	r3, #1
 80092da:	e09c      	b.n	8009416 <_printf_i+0x1e6>
 80092dc:	6833      	ldr	r3, [r6, #0]
 80092de:	6820      	ldr	r0, [r4, #0]
 80092e0:	1d19      	adds	r1, r3, #4
 80092e2:	6031      	str	r1, [r6, #0]
 80092e4:	0606      	lsls	r6, r0, #24
 80092e6:	d501      	bpl.n	80092ec <_printf_i+0xbc>
 80092e8:	681d      	ldr	r5, [r3, #0]
 80092ea:	e003      	b.n	80092f4 <_printf_i+0xc4>
 80092ec:	0645      	lsls	r5, r0, #25
 80092ee:	d5fb      	bpl.n	80092e8 <_printf_i+0xb8>
 80092f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80092f4:	2d00      	cmp	r5, #0
 80092f6:	da03      	bge.n	8009300 <_printf_i+0xd0>
 80092f8:	232d      	movs	r3, #45	@ 0x2d
 80092fa:	426d      	negs	r5, r5
 80092fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009300:	230a      	movs	r3, #10
 8009302:	4858      	ldr	r0, [pc, #352]	@ (8009464 <_printf_i+0x234>)
 8009304:	e011      	b.n	800932a <_printf_i+0xfa>
 8009306:	6821      	ldr	r1, [r4, #0]
 8009308:	6833      	ldr	r3, [r6, #0]
 800930a:	0608      	lsls	r0, r1, #24
 800930c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009310:	d402      	bmi.n	8009318 <_printf_i+0xe8>
 8009312:	0649      	lsls	r1, r1, #25
 8009314:	bf48      	it	mi
 8009316:	b2ad      	uxthmi	r5, r5
 8009318:	2f6f      	cmp	r7, #111	@ 0x6f
 800931a:	6033      	str	r3, [r6, #0]
 800931c:	bf14      	ite	ne
 800931e:	230a      	movne	r3, #10
 8009320:	2308      	moveq	r3, #8
 8009322:	4850      	ldr	r0, [pc, #320]	@ (8009464 <_printf_i+0x234>)
 8009324:	2100      	movs	r1, #0
 8009326:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800932a:	6866      	ldr	r6, [r4, #4]
 800932c:	2e00      	cmp	r6, #0
 800932e:	60a6      	str	r6, [r4, #8]
 8009330:	db05      	blt.n	800933e <_printf_i+0x10e>
 8009332:	6821      	ldr	r1, [r4, #0]
 8009334:	432e      	orrs	r6, r5
 8009336:	f021 0104 	bic.w	r1, r1, #4
 800933a:	6021      	str	r1, [r4, #0]
 800933c:	d04b      	beq.n	80093d6 <_printf_i+0x1a6>
 800933e:	4616      	mov	r6, r2
 8009340:	fbb5 f1f3 	udiv	r1, r5, r3
 8009344:	fb03 5711 	mls	r7, r3, r1, r5
 8009348:	5dc7      	ldrb	r7, [r0, r7]
 800934a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800934e:	462f      	mov	r7, r5
 8009350:	42bb      	cmp	r3, r7
 8009352:	460d      	mov	r5, r1
 8009354:	d9f4      	bls.n	8009340 <_printf_i+0x110>
 8009356:	2b08      	cmp	r3, #8
 8009358:	d10b      	bne.n	8009372 <_printf_i+0x142>
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	07df      	lsls	r7, r3, #31
 800935e:	d508      	bpl.n	8009372 <_printf_i+0x142>
 8009360:	6923      	ldr	r3, [r4, #16]
 8009362:	6861      	ldr	r1, [r4, #4]
 8009364:	4299      	cmp	r1, r3
 8009366:	bfde      	ittt	le
 8009368:	2330      	movle	r3, #48	@ 0x30
 800936a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800936e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009372:	1b92      	subs	r2, r2, r6
 8009374:	6122      	str	r2, [r4, #16]
 8009376:	464b      	mov	r3, r9
 8009378:	4621      	mov	r1, r4
 800937a:	4640      	mov	r0, r8
 800937c:	f8cd a000 	str.w	sl, [sp]
 8009380:	aa03      	add	r2, sp, #12
 8009382:	f7ff fee3 	bl	800914c <_printf_common>
 8009386:	3001      	adds	r0, #1
 8009388:	d14a      	bne.n	8009420 <_printf_i+0x1f0>
 800938a:	f04f 30ff 	mov.w	r0, #4294967295
 800938e:	b004      	add	sp, #16
 8009390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	f043 0320 	orr.w	r3, r3, #32
 800939a:	6023      	str	r3, [r4, #0]
 800939c:	2778      	movs	r7, #120	@ 0x78
 800939e:	4832      	ldr	r0, [pc, #200]	@ (8009468 <_printf_i+0x238>)
 80093a0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	6831      	ldr	r1, [r6, #0]
 80093a8:	061f      	lsls	r7, r3, #24
 80093aa:	f851 5b04 	ldr.w	r5, [r1], #4
 80093ae:	d402      	bmi.n	80093b6 <_printf_i+0x186>
 80093b0:	065f      	lsls	r7, r3, #25
 80093b2:	bf48      	it	mi
 80093b4:	b2ad      	uxthmi	r5, r5
 80093b6:	6031      	str	r1, [r6, #0]
 80093b8:	07d9      	lsls	r1, r3, #31
 80093ba:	bf44      	itt	mi
 80093bc:	f043 0320 	orrmi.w	r3, r3, #32
 80093c0:	6023      	strmi	r3, [r4, #0]
 80093c2:	b11d      	cbz	r5, 80093cc <_printf_i+0x19c>
 80093c4:	2310      	movs	r3, #16
 80093c6:	e7ad      	b.n	8009324 <_printf_i+0xf4>
 80093c8:	4826      	ldr	r0, [pc, #152]	@ (8009464 <_printf_i+0x234>)
 80093ca:	e7e9      	b.n	80093a0 <_printf_i+0x170>
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	f023 0320 	bic.w	r3, r3, #32
 80093d2:	6023      	str	r3, [r4, #0]
 80093d4:	e7f6      	b.n	80093c4 <_printf_i+0x194>
 80093d6:	4616      	mov	r6, r2
 80093d8:	e7bd      	b.n	8009356 <_printf_i+0x126>
 80093da:	6833      	ldr	r3, [r6, #0]
 80093dc:	6825      	ldr	r5, [r4, #0]
 80093de:	1d18      	adds	r0, r3, #4
 80093e0:	6961      	ldr	r1, [r4, #20]
 80093e2:	6030      	str	r0, [r6, #0]
 80093e4:	062e      	lsls	r6, r5, #24
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	d501      	bpl.n	80093ee <_printf_i+0x1be>
 80093ea:	6019      	str	r1, [r3, #0]
 80093ec:	e002      	b.n	80093f4 <_printf_i+0x1c4>
 80093ee:	0668      	lsls	r0, r5, #25
 80093f0:	d5fb      	bpl.n	80093ea <_printf_i+0x1ba>
 80093f2:	8019      	strh	r1, [r3, #0]
 80093f4:	2300      	movs	r3, #0
 80093f6:	4616      	mov	r6, r2
 80093f8:	6123      	str	r3, [r4, #16]
 80093fa:	e7bc      	b.n	8009376 <_printf_i+0x146>
 80093fc:	6833      	ldr	r3, [r6, #0]
 80093fe:	2100      	movs	r1, #0
 8009400:	1d1a      	adds	r2, r3, #4
 8009402:	6032      	str	r2, [r6, #0]
 8009404:	681e      	ldr	r6, [r3, #0]
 8009406:	6862      	ldr	r2, [r4, #4]
 8009408:	4630      	mov	r0, r6
 800940a:	f000 fa24 	bl	8009856 <memchr>
 800940e:	b108      	cbz	r0, 8009414 <_printf_i+0x1e4>
 8009410:	1b80      	subs	r0, r0, r6
 8009412:	6060      	str	r0, [r4, #4]
 8009414:	6863      	ldr	r3, [r4, #4]
 8009416:	6123      	str	r3, [r4, #16]
 8009418:	2300      	movs	r3, #0
 800941a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800941e:	e7aa      	b.n	8009376 <_printf_i+0x146>
 8009420:	4632      	mov	r2, r6
 8009422:	4649      	mov	r1, r9
 8009424:	4640      	mov	r0, r8
 8009426:	6923      	ldr	r3, [r4, #16]
 8009428:	47d0      	blx	sl
 800942a:	3001      	adds	r0, #1
 800942c:	d0ad      	beq.n	800938a <_printf_i+0x15a>
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	079b      	lsls	r3, r3, #30
 8009432:	d413      	bmi.n	800945c <_printf_i+0x22c>
 8009434:	68e0      	ldr	r0, [r4, #12]
 8009436:	9b03      	ldr	r3, [sp, #12]
 8009438:	4298      	cmp	r0, r3
 800943a:	bfb8      	it	lt
 800943c:	4618      	movlt	r0, r3
 800943e:	e7a6      	b.n	800938e <_printf_i+0x15e>
 8009440:	2301      	movs	r3, #1
 8009442:	4632      	mov	r2, r6
 8009444:	4649      	mov	r1, r9
 8009446:	4640      	mov	r0, r8
 8009448:	47d0      	blx	sl
 800944a:	3001      	adds	r0, #1
 800944c:	d09d      	beq.n	800938a <_printf_i+0x15a>
 800944e:	3501      	adds	r5, #1
 8009450:	68e3      	ldr	r3, [r4, #12]
 8009452:	9903      	ldr	r1, [sp, #12]
 8009454:	1a5b      	subs	r3, r3, r1
 8009456:	42ab      	cmp	r3, r5
 8009458:	dcf2      	bgt.n	8009440 <_printf_i+0x210>
 800945a:	e7eb      	b.n	8009434 <_printf_i+0x204>
 800945c:	2500      	movs	r5, #0
 800945e:	f104 0619 	add.w	r6, r4, #25
 8009462:	e7f5      	b.n	8009450 <_printf_i+0x220>
 8009464:	0800baec 	.word	0x0800baec
 8009468:	0800bafd 	.word	0x0800bafd

0800946c <std>:
 800946c:	2300      	movs	r3, #0
 800946e:	b510      	push	{r4, lr}
 8009470:	4604      	mov	r4, r0
 8009472:	e9c0 3300 	strd	r3, r3, [r0]
 8009476:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800947a:	6083      	str	r3, [r0, #8]
 800947c:	8181      	strh	r1, [r0, #12]
 800947e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009480:	81c2      	strh	r2, [r0, #14]
 8009482:	6183      	str	r3, [r0, #24]
 8009484:	4619      	mov	r1, r3
 8009486:	2208      	movs	r2, #8
 8009488:	305c      	adds	r0, #92	@ 0x5c
 800948a:	f000 f906 	bl	800969a <memset>
 800948e:	4b0d      	ldr	r3, [pc, #52]	@ (80094c4 <std+0x58>)
 8009490:	6224      	str	r4, [r4, #32]
 8009492:	6263      	str	r3, [r4, #36]	@ 0x24
 8009494:	4b0c      	ldr	r3, [pc, #48]	@ (80094c8 <std+0x5c>)
 8009496:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009498:	4b0c      	ldr	r3, [pc, #48]	@ (80094cc <std+0x60>)
 800949a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800949c:	4b0c      	ldr	r3, [pc, #48]	@ (80094d0 <std+0x64>)
 800949e:	6323      	str	r3, [r4, #48]	@ 0x30
 80094a0:	4b0c      	ldr	r3, [pc, #48]	@ (80094d4 <std+0x68>)
 80094a2:	429c      	cmp	r4, r3
 80094a4:	d006      	beq.n	80094b4 <std+0x48>
 80094a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80094aa:	4294      	cmp	r4, r2
 80094ac:	d002      	beq.n	80094b4 <std+0x48>
 80094ae:	33d0      	adds	r3, #208	@ 0xd0
 80094b0:	429c      	cmp	r4, r3
 80094b2:	d105      	bne.n	80094c0 <std+0x54>
 80094b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80094b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094bc:	f000 b9c8 	b.w	8009850 <__retarget_lock_init_recursive>
 80094c0:	bd10      	pop	{r4, pc}
 80094c2:	bf00      	nop
 80094c4:	08009615 	.word	0x08009615
 80094c8:	08009637 	.word	0x08009637
 80094cc:	0800966f 	.word	0x0800966f
 80094d0:	08009693 	.word	0x08009693
 80094d4:	20001da4 	.word	0x20001da4

080094d8 <stdio_exit_handler>:
 80094d8:	4a02      	ldr	r2, [pc, #8]	@ (80094e4 <stdio_exit_handler+0xc>)
 80094da:	4903      	ldr	r1, [pc, #12]	@ (80094e8 <stdio_exit_handler+0x10>)
 80094dc:	4803      	ldr	r0, [pc, #12]	@ (80094ec <stdio_exit_handler+0x14>)
 80094de:	f000 b869 	b.w	80095b4 <_fwalk_sglue>
 80094e2:	bf00      	nop
 80094e4:	20000028 	.word	0x20000028
 80094e8:	0800b1b9 	.word	0x0800b1b9
 80094ec:	20000038 	.word	0x20000038

080094f0 <cleanup_stdio>:
 80094f0:	6841      	ldr	r1, [r0, #4]
 80094f2:	4b0c      	ldr	r3, [pc, #48]	@ (8009524 <cleanup_stdio+0x34>)
 80094f4:	b510      	push	{r4, lr}
 80094f6:	4299      	cmp	r1, r3
 80094f8:	4604      	mov	r4, r0
 80094fa:	d001      	beq.n	8009500 <cleanup_stdio+0x10>
 80094fc:	f001 fe5c 	bl	800b1b8 <_fflush_r>
 8009500:	68a1      	ldr	r1, [r4, #8]
 8009502:	4b09      	ldr	r3, [pc, #36]	@ (8009528 <cleanup_stdio+0x38>)
 8009504:	4299      	cmp	r1, r3
 8009506:	d002      	beq.n	800950e <cleanup_stdio+0x1e>
 8009508:	4620      	mov	r0, r4
 800950a:	f001 fe55 	bl	800b1b8 <_fflush_r>
 800950e:	68e1      	ldr	r1, [r4, #12]
 8009510:	4b06      	ldr	r3, [pc, #24]	@ (800952c <cleanup_stdio+0x3c>)
 8009512:	4299      	cmp	r1, r3
 8009514:	d004      	beq.n	8009520 <cleanup_stdio+0x30>
 8009516:	4620      	mov	r0, r4
 8009518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800951c:	f001 be4c 	b.w	800b1b8 <_fflush_r>
 8009520:	bd10      	pop	{r4, pc}
 8009522:	bf00      	nop
 8009524:	20001da4 	.word	0x20001da4
 8009528:	20001e0c 	.word	0x20001e0c
 800952c:	20001e74 	.word	0x20001e74

08009530 <global_stdio_init.part.0>:
 8009530:	b510      	push	{r4, lr}
 8009532:	4b0b      	ldr	r3, [pc, #44]	@ (8009560 <global_stdio_init.part.0+0x30>)
 8009534:	4c0b      	ldr	r4, [pc, #44]	@ (8009564 <global_stdio_init.part.0+0x34>)
 8009536:	4a0c      	ldr	r2, [pc, #48]	@ (8009568 <global_stdio_init.part.0+0x38>)
 8009538:	4620      	mov	r0, r4
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	2104      	movs	r1, #4
 800953e:	2200      	movs	r2, #0
 8009540:	f7ff ff94 	bl	800946c <std>
 8009544:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009548:	2201      	movs	r2, #1
 800954a:	2109      	movs	r1, #9
 800954c:	f7ff ff8e 	bl	800946c <std>
 8009550:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009554:	2202      	movs	r2, #2
 8009556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800955a:	2112      	movs	r1, #18
 800955c:	f7ff bf86 	b.w	800946c <std>
 8009560:	20001edc 	.word	0x20001edc
 8009564:	20001da4 	.word	0x20001da4
 8009568:	080094d9 	.word	0x080094d9

0800956c <__sfp_lock_acquire>:
 800956c:	4801      	ldr	r0, [pc, #4]	@ (8009574 <__sfp_lock_acquire+0x8>)
 800956e:	f000 b970 	b.w	8009852 <__retarget_lock_acquire_recursive>
 8009572:	bf00      	nop
 8009574:	20001ee5 	.word	0x20001ee5

08009578 <__sfp_lock_release>:
 8009578:	4801      	ldr	r0, [pc, #4]	@ (8009580 <__sfp_lock_release+0x8>)
 800957a:	f000 b96b 	b.w	8009854 <__retarget_lock_release_recursive>
 800957e:	bf00      	nop
 8009580:	20001ee5 	.word	0x20001ee5

08009584 <__sinit>:
 8009584:	b510      	push	{r4, lr}
 8009586:	4604      	mov	r4, r0
 8009588:	f7ff fff0 	bl	800956c <__sfp_lock_acquire>
 800958c:	6a23      	ldr	r3, [r4, #32]
 800958e:	b11b      	cbz	r3, 8009598 <__sinit+0x14>
 8009590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009594:	f7ff bff0 	b.w	8009578 <__sfp_lock_release>
 8009598:	4b04      	ldr	r3, [pc, #16]	@ (80095ac <__sinit+0x28>)
 800959a:	6223      	str	r3, [r4, #32]
 800959c:	4b04      	ldr	r3, [pc, #16]	@ (80095b0 <__sinit+0x2c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1f5      	bne.n	8009590 <__sinit+0xc>
 80095a4:	f7ff ffc4 	bl	8009530 <global_stdio_init.part.0>
 80095a8:	e7f2      	b.n	8009590 <__sinit+0xc>
 80095aa:	bf00      	nop
 80095ac:	080094f1 	.word	0x080094f1
 80095b0:	20001edc 	.word	0x20001edc

080095b4 <_fwalk_sglue>:
 80095b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b8:	4607      	mov	r7, r0
 80095ba:	4688      	mov	r8, r1
 80095bc:	4614      	mov	r4, r2
 80095be:	2600      	movs	r6, #0
 80095c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095c4:	f1b9 0901 	subs.w	r9, r9, #1
 80095c8:	d505      	bpl.n	80095d6 <_fwalk_sglue+0x22>
 80095ca:	6824      	ldr	r4, [r4, #0]
 80095cc:	2c00      	cmp	r4, #0
 80095ce:	d1f7      	bne.n	80095c0 <_fwalk_sglue+0xc>
 80095d0:	4630      	mov	r0, r6
 80095d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095d6:	89ab      	ldrh	r3, [r5, #12]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d907      	bls.n	80095ec <_fwalk_sglue+0x38>
 80095dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095e0:	3301      	adds	r3, #1
 80095e2:	d003      	beq.n	80095ec <_fwalk_sglue+0x38>
 80095e4:	4629      	mov	r1, r5
 80095e6:	4638      	mov	r0, r7
 80095e8:	47c0      	blx	r8
 80095ea:	4306      	orrs	r6, r0
 80095ec:	3568      	adds	r5, #104	@ 0x68
 80095ee:	e7e9      	b.n	80095c4 <_fwalk_sglue+0x10>

080095f0 <iprintf>:
 80095f0:	b40f      	push	{r0, r1, r2, r3}
 80095f2:	b507      	push	{r0, r1, r2, lr}
 80095f4:	4906      	ldr	r1, [pc, #24]	@ (8009610 <iprintf+0x20>)
 80095f6:	ab04      	add	r3, sp, #16
 80095f8:	6808      	ldr	r0, [r1, #0]
 80095fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80095fe:	6881      	ldr	r1, [r0, #8]
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	f001 fc41 	bl	800ae88 <_vfiprintf_r>
 8009606:	b003      	add	sp, #12
 8009608:	f85d eb04 	ldr.w	lr, [sp], #4
 800960c:	b004      	add	sp, #16
 800960e:	4770      	bx	lr
 8009610:	20000034 	.word	0x20000034

08009614 <__sread>:
 8009614:	b510      	push	{r4, lr}
 8009616:	460c      	mov	r4, r1
 8009618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800961c:	f000 f8ca 	bl	80097b4 <_read_r>
 8009620:	2800      	cmp	r0, #0
 8009622:	bfab      	itete	ge
 8009624:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009626:	89a3      	ldrhlt	r3, [r4, #12]
 8009628:	181b      	addge	r3, r3, r0
 800962a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800962e:	bfac      	ite	ge
 8009630:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009632:	81a3      	strhlt	r3, [r4, #12]
 8009634:	bd10      	pop	{r4, pc}

08009636 <__swrite>:
 8009636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800963a:	461f      	mov	r7, r3
 800963c:	898b      	ldrh	r3, [r1, #12]
 800963e:	4605      	mov	r5, r0
 8009640:	05db      	lsls	r3, r3, #23
 8009642:	460c      	mov	r4, r1
 8009644:	4616      	mov	r6, r2
 8009646:	d505      	bpl.n	8009654 <__swrite+0x1e>
 8009648:	2302      	movs	r3, #2
 800964a:	2200      	movs	r2, #0
 800964c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009650:	f000 f89e 	bl	8009790 <_lseek_r>
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	4632      	mov	r2, r6
 8009658:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	4628      	mov	r0, r5
 8009660:	463b      	mov	r3, r7
 8009662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800966a:	f000 b8b5 	b.w	80097d8 <_write_r>

0800966e <__sseek>:
 800966e:	b510      	push	{r4, lr}
 8009670:	460c      	mov	r4, r1
 8009672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009676:	f000 f88b 	bl	8009790 <_lseek_r>
 800967a:	1c43      	adds	r3, r0, #1
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	bf15      	itete	ne
 8009680:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009682:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009686:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800968a:	81a3      	strheq	r3, [r4, #12]
 800968c:	bf18      	it	ne
 800968e:	81a3      	strhne	r3, [r4, #12]
 8009690:	bd10      	pop	{r4, pc}

08009692 <__sclose>:
 8009692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009696:	f000 b80d 	b.w	80096b4 <_close_r>

0800969a <memset>:
 800969a:	4603      	mov	r3, r0
 800969c:	4402      	add	r2, r0
 800969e:	4293      	cmp	r3, r2
 80096a0:	d100      	bne.n	80096a4 <memset+0xa>
 80096a2:	4770      	bx	lr
 80096a4:	f803 1b01 	strb.w	r1, [r3], #1
 80096a8:	e7f9      	b.n	800969e <memset+0x4>
	...

080096ac <_localeconv_r>:
 80096ac:	4800      	ldr	r0, [pc, #0]	@ (80096b0 <_localeconv_r+0x4>)
 80096ae:	4770      	bx	lr
 80096b0:	20000174 	.word	0x20000174

080096b4 <_close_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	2300      	movs	r3, #0
 80096b8:	4d05      	ldr	r5, [pc, #20]	@ (80096d0 <_close_r+0x1c>)
 80096ba:	4604      	mov	r4, r0
 80096bc:	4608      	mov	r0, r1
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	f7f8 fcb5 	bl	800202e <_close>
 80096c4:	1c43      	adds	r3, r0, #1
 80096c6:	d102      	bne.n	80096ce <_close_r+0x1a>
 80096c8:	682b      	ldr	r3, [r5, #0]
 80096ca:	b103      	cbz	r3, 80096ce <_close_r+0x1a>
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	20001ee0 	.word	0x20001ee0

080096d4 <_reclaim_reent>:
 80096d4:	4b2d      	ldr	r3, [pc, #180]	@ (800978c <_reclaim_reent+0xb8>)
 80096d6:	b570      	push	{r4, r5, r6, lr}
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4604      	mov	r4, r0
 80096dc:	4283      	cmp	r3, r0
 80096de:	d053      	beq.n	8009788 <_reclaim_reent+0xb4>
 80096e0:	69c3      	ldr	r3, [r0, #28]
 80096e2:	b31b      	cbz	r3, 800972c <_reclaim_reent+0x58>
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	b163      	cbz	r3, 8009702 <_reclaim_reent+0x2e>
 80096e8:	2500      	movs	r5, #0
 80096ea:	69e3      	ldr	r3, [r4, #28]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	5959      	ldr	r1, [r3, r5]
 80096f0:	b9b1      	cbnz	r1, 8009720 <_reclaim_reent+0x4c>
 80096f2:	3504      	adds	r5, #4
 80096f4:	2d80      	cmp	r5, #128	@ 0x80
 80096f6:	d1f8      	bne.n	80096ea <_reclaim_reent+0x16>
 80096f8:	69e3      	ldr	r3, [r4, #28]
 80096fa:	4620      	mov	r0, r4
 80096fc:	68d9      	ldr	r1, [r3, #12]
 80096fe:	f000 ff23 	bl	800a548 <_free_r>
 8009702:	69e3      	ldr	r3, [r4, #28]
 8009704:	6819      	ldr	r1, [r3, #0]
 8009706:	b111      	cbz	r1, 800970e <_reclaim_reent+0x3a>
 8009708:	4620      	mov	r0, r4
 800970a:	f000 ff1d 	bl	800a548 <_free_r>
 800970e:	69e3      	ldr	r3, [r4, #28]
 8009710:	689d      	ldr	r5, [r3, #8]
 8009712:	b15d      	cbz	r5, 800972c <_reclaim_reent+0x58>
 8009714:	4629      	mov	r1, r5
 8009716:	4620      	mov	r0, r4
 8009718:	682d      	ldr	r5, [r5, #0]
 800971a:	f000 ff15 	bl	800a548 <_free_r>
 800971e:	e7f8      	b.n	8009712 <_reclaim_reent+0x3e>
 8009720:	680e      	ldr	r6, [r1, #0]
 8009722:	4620      	mov	r0, r4
 8009724:	f000 ff10 	bl	800a548 <_free_r>
 8009728:	4631      	mov	r1, r6
 800972a:	e7e1      	b.n	80096f0 <_reclaim_reent+0x1c>
 800972c:	6961      	ldr	r1, [r4, #20]
 800972e:	b111      	cbz	r1, 8009736 <_reclaim_reent+0x62>
 8009730:	4620      	mov	r0, r4
 8009732:	f000 ff09 	bl	800a548 <_free_r>
 8009736:	69e1      	ldr	r1, [r4, #28]
 8009738:	b111      	cbz	r1, 8009740 <_reclaim_reent+0x6c>
 800973a:	4620      	mov	r0, r4
 800973c:	f000 ff04 	bl	800a548 <_free_r>
 8009740:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009742:	b111      	cbz	r1, 800974a <_reclaim_reent+0x76>
 8009744:	4620      	mov	r0, r4
 8009746:	f000 feff 	bl	800a548 <_free_r>
 800974a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800974c:	b111      	cbz	r1, 8009754 <_reclaim_reent+0x80>
 800974e:	4620      	mov	r0, r4
 8009750:	f000 fefa 	bl	800a548 <_free_r>
 8009754:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009756:	b111      	cbz	r1, 800975e <_reclaim_reent+0x8a>
 8009758:	4620      	mov	r0, r4
 800975a:	f000 fef5 	bl	800a548 <_free_r>
 800975e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009760:	b111      	cbz	r1, 8009768 <_reclaim_reent+0x94>
 8009762:	4620      	mov	r0, r4
 8009764:	f000 fef0 	bl	800a548 <_free_r>
 8009768:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800976a:	b111      	cbz	r1, 8009772 <_reclaim_reent+0x9e>
 800976c:	4620      	mov	r0, r4
 800976e:	f000 feeb 	bl	800a548 <_free_r>
 8009772:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009774:	b111      	cbz	r1, 800977c <_reclaim_reent+0xa8>
 8009776:	4620      	mov	r0, r4
 8009778:	f000 fee6 	bl	800a548 <_free_r>
 800977c:	6a23      	ldr	r3, [r4, #32]
 800977e:	b11b      	cbz	r3, 8009788 <_reclaim_reent+0xb4>
 8009780:	4620      	mov	r0, r4
 8009782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009786:	4718      	bx	r3
 8009788:	bd70      	pop	{r4, r5, r6, pc}
 800978a:	bf00      	nop
 800978c:	20000034 	.word	0x20000034

08009790 <_lseek_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4604      	mov	r4, r0
 8009794:	4608      	mov	r0, r1
 8009796:	4611      	mov	r1, r2
 8009798:	2200      	movs	r2, #0
 800979a:	4d05      	ldr	r5, [pc, #20]	@ (80097b0 <_lseek_r+0x20>)
 800979c:	602a      	str	r2, [r5, #0]
 800979e:	461a      	mov	r2, r3
 80097a0:	f7f8 fc69 	bl	8002076 <_lseek>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d102      	bne.n	80097ae <_lseek_r+0x1e>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	b103      	cbz	r3, 80097ae <_lseek_r+0x1e>
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	bd38      	pop	{r3, r4, r5, pc}
 80097b0:	20001ee0 	.word	0x20001ee0

080097b4 <_read_r>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	4604      	mov	r4, r0
 80097b8:	4608      	mov	r0, r1
 80097ba:	4611      	mov	r1, r2
 80097bc:	2200      	movs	r2, #0
 80097be:	4d05      	ldr	r5, [pc, #20]	@ (80097d4 <_read_r+0x20>)
 80097c0:	602a      	str	r2, [r5, #0]
 80097c2:	461a      	mov	r2, r3
 80097c4:	f7f8 fbfa 	bl	8001fbc <_read>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d102      	bne.n	80097d2 <_read_r+0x1e>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	b103      	cbz	r3, 80097d2 <_read_r+0x1e>
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	20001ee0 	.word	0x20001ee0

080097d8 <_write_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4604      	mov	r4, r0
 80097dc:	4608      	mov	r0, r1
 80097de:	4611      	mov	r1, r2
 80097e0:	2200      	movs	r2, #0
 80097e2:	4d05      	ldr	r5, [pc, #20]	@ (80097f8 <_write_r+0x20>)
 80097e4:	602a      	str	r2, [r5, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	f7f8 fc05 	bl	8001ff6 <_write>
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	d102      	bne.n	80097f6 <_write_r+0x1e>
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	b103      	cbz	r3, 80097f6 <_write_r+0x1e>
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	20001ee0 	.word	0x20001ee0

080097fc <__errno>:
 80097fc:	4b01      	ldr	r3, [pc, #4]	@ (8009804 <__errno+0x8>)
 80097fe:	6818      	ldr	r0, [r3, #0]
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	20000034 	.word	0x20000034

08009808 <__libc_init_array>:
 8009808:	b570      	push	{r4, r5, r6, lr}
 800980a:	2600      	movs	r6, #0
 800980c:	4d0c      	ldr	r5, [pc, #48]	@ (8009840 <__libc_init_array+0x38>)
 800980e:	4c0d      	ldr	r4, [pc, #52]	@ (8009844 <__libc_init_array+0x3c>)
 8009810:	1b64      	subs	r4, r4, r5
 8009812:	10a4      	asrs	r4, r4, #2
 8009814:	42a6      	cmp	r6, r4
 8009816:	d109      	bne.n	800982c <__libc_init_array+0x24>
 8009818:	f002 f8f2 	bl	800ba00 <_init>
 800981c:	2600      	movs	r6, #0
 800981e:	4d0a      	ldr	r5, [pc, #40]	@ (8009848 <__libc_init_array+0x40>)
 8009820:	4c0a      	ldr	r4, [pc, #40]	@ (800984c <__libc_init_array+0x44>)
 8009822:	1b64      	subs	r4, r4, r5
 8009824:	10a4      	asrs	r4, r4, #2
 8009826:	42a6      	cmp	r6, r4
 8009828:	d105      	bne.n	8009836 <__libc_init_array+0x2e>
 800982a:	bd70      	pop	{r4, r5, r6, pc}
 800982c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009830:	4798      	blx	r3
 8009832:	3601      	adds	r6, #1
 8009834:	e7ee      	b.n	8009814 <__libc_init_array+0xc>
 8009836:	f855 3b04 	ldr.w	r3, [r5], #4
 800983a:	4798      	blx	r3
 800983c:	3601      	adds	r6, #1
 800983e:	e7f2      	b.n	8009826 <__libc_init_array+0x1e>
 8009840:	0800be94 	.word	0x0800be94
 8009844:	0800be94 	.word	0x0800be94
 8009848:	0800be94 	.word	0x0800be94
 800984c:	0800be98 	.word	0x0800be98

08009850 <__retarget_lock_init_recursive>:
 8009850:	4770      	bx	lr

08009852 <__retarget_lock_acquire_recursive>:
 8009852:	4770      	bx	lr

08009854 <__retarget_lock_release_recursive>:
 8009854:	4770      	bx	lr

08009856 <memchr>:
 8009856:	4603      	mov	r3, r0
 8009858:	b510      	push	{r4, lr}
 800985a:	b2c9      	uxtb	r1, r1
 800985c:	4402      	add	r2, r0
 800985e:	4293      	cmp	r3, r2
 8009860:	4618      	mov	r0, r3
 8009862:	d101      	bne.n	8009868 <memchr+0x12>
 8009864:	2000      	movs	r0, #0
 8009866:	e003      	b.n	8009870 <memchr+0x1a>
 8009868:	7804      	ldrb	r4, [r0, #0]
 800986a:	3301      	adds	r3, #1
 800986c:	428c      	cmp	r4, r1
 800986e:	d1f6      	bne.n	800985e <memchr+0x8>
 8009870:	bd10      	pop	{r4, pc}

08009872 <memcpy>:
 8009872:	440a      	add	r2, r1
 8009874:	4291      	cmp	r1, r2
 8009876:	f100 33ff 	add.w	r3, r0, #4294967295
 800987a:	d100      	bne.n	800987e <memcpy+0xc>
 800987c:	4770      	bx	lr
 800987e:	b510      	push	{r4, lr}
 8009880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009884:	4291      	cmp	r1, r2
 8009886:	f803 4f01 	strb.w	r4, [r3, #1]!
 800988a:	d1f9      	bne.n	8009880 <memcpy+0xe>
 800988c:	bd10      	pop	{r4, pc}

0800988e <quorem>:
 800988e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009892:	6903      	ldr	r3, [r0, #16]
 8009894:	690c      	ldr	r4, [r1, #16]
 8009896:	4607      	mov	r7, r0
 8009898:	42a3      	cmp	r3, r4
 800989a:	db7e      	blt.n	800999a <quorem+0x10c>
 800989c:	3c01      	subs	r4, #1
 800989e:	00a3      	lsls	r3, r4, #2
 80098a0:	f100 0514 	add.w	r5, r0, #20
 80098a4:	f101 0814 	add.w	r8, r1, #20
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098b8:	3301      	adds	r3, #1
 80098ba:	429a      	cmp	r2, r3
 80098bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80098c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098c4:	d32e      	bcc.n	8009924 <quorem+0x96>
 80098c6:	f04f 0a00 	mov.w	sl, #0
 80098ca:	46c4      	mov	ip, r8
 80098cc:	46ae      	mov	lr, r5
 80098ce:	46d3      	mov	fp, sl
 80098d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098d4:	b298      	uxth	r0, r3
 80098d6:	fb06 a000 	mla	r0, r6, r0, sl
 80098da:	0c1b      	lsrs	r3, r3, #16
 80098dc:	0c02      	lsrs	r2, r0, #16
 80098de:	fb06 2303 	mla	r3, r6, r3, r2
 80098e2:	f8de 2000 	ldr.w	r2, [lr]
 80098e6:	b280      	uxth	r0, r0
 80098e8:	b292      	uxth	r2, r2
 80098ea:	1a12      	subs	r2, r2, r0
 80098ec:	445a      	add	r2, fp
 80098ee:	f8de 0000 	ldr.w	r0, [lr]
 80098f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80098fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009900:	b292      	uxth	r2, r2
 8009902:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009906:	45e1      	cmp	r9, ip
 8009908:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800990c:	f84e 2b04 	str.w	r2, [lr], #4
 8009910:	d2de      	bcs.n	80098d0 <quorem+0x42>
 8009912:	9b00      	ldr	r3, [sp, #0]
 8009914:	58eb      	ldr	r3, [r5, r3]
 8009916:	b92b      	cbnz	r3, 8009924 <quorem+0x96>
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	3b04      	subs	r3, #4
 800991c:	429d      	cmp	r5, r3
 800991e:	461a      	mov	r2, r3
 8009920:	d32f      	bcc.n	8009982 <quorem+0xf4>
 8009922:	613c      	str	r4, [r7, #16]
 8009924:	4638      	mov	r0, r7
 8009926:	f001 f97f 	bl	800ac28 <__mcmp>
 800992a:	2800      	cmp	r0, #0
 800992c:	db25      	blt.n	800997a <quorem+0xec>
 800992e:	4629      	mov	r1, r5
 8009930:	2000      	movs	r0, #0
 8009932:	f858 2b04 	ldr.w	r2, [r8], #4
 8009936:	f8d1 c000 	ldr.w	ip, [r1]
 800993a:	fa1f fe82 	uxth.w	lr, r2
 800993e:	fa1f f38c 	uxth.w	r3, ip
 8009942:	eba3 030e 	sub.w	r3, r3, lr
 8009946:	4403      	add	r3, r0
 8009948:	0c12      	lsrs	r2, r2, #16
 800994a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800994e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009952:	b29b      	uxth	r3, r3
 8009954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009958:	45c1      	cmp	r9, r8
 800995a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800995e:	f841 3b04 	str.w	r3, [r1], #4
 8009962:	d2e6      	bcs.n	8009932 <quorem+0xa4>
 8009964:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009968:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800996c:	b922      	cbnz	r2, 8009978 <quorem+0xea>
 800996e:	3b04      	subs	r3, #4
 8009970:	429d      	cmp	r5, r3
 8009972:	461a      	mov	r2, r3
 8009974:	d30b      	bcc.n	800998e <quorem+0x100>
 8009976:	613c      	str	r4, [r7, #16]
 8009978:	3601      	adds	r6, #1
 800997a:	4630      	mov	r0, r6
 800997c:	b003      	add	sp, #12
 800997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009982:	6812      	ldr	r2, [r2, #0]
 8009984:	3b04      	subs	r3, #4
 8009986:	2a00      	cmp	r2, #0
 8009988:	d1cb      	bne.n	8009922 <quorem+0x94>
 800998a:	3c01      	subs	r4, #1
 800998c:	e7c6      	b.n	800991c <quorem+0x8e>
 800998e:	6812      	ldr	r2, [r2, #0]
 8009990:	3b04      	subs	r3, #4
 8009992:	2a00      	cmp	r2, #0
 8009994:	d1ef      	bne.n	8009976 <quorem+0xe8>
 8009996:	3c01      	subs	r4, #1
 8009998:	e7ea      	b.n	8009970 <quorem+0xe2>
 800999a:	2000      	movs	r0, #0
 800999c:	e7ee      	b.n	800997c <quorem+0xee>
	...

080099a0 <_dtoa_r>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	4614      	mov	r4, r2
 80099a6:	461d      	mov	r5, r3
 80099a8:	69c7      	ldr	r7, [r0, #28]
 80099aa:	b097      	sub	sp, #92	@ 0x5c
 80099ac:	4681      	mov	r9, r0
 80099ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80099b2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80099b4:	b97f      	cbnz	r7, 80099d6 <_dtoa_r+0x36>
 80099b6:	2010      	movs	r0, #16
 80099b8:	f000 fe0e 	bl	800a5d8 <malloc>
 80099bc:	4602      	mov	r2, r0
 80099be:	f8c9 001c 	str.w	r0, [r9, #28]
 80099c2:	b920      	cbnz	r0, 80099ce <_dtoa_r+0x2e>
 80099c4:	21ef      	movs	r1, #239	@ 0xef
 80099c6:	4bac      	ldr	r3, [pc, #688]	@ (8009c78 <_dtoa_r+0x2d8>)
 80099c8:	48ac      	ldr	r0, [pc, #688]	@ (8009c7c <_dtoa_r+0x2dc>)
 80099ca:	f001 fcc1 	bl	800b350 <__assert_func>
 80099ce:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80099d2:	6007      	str	r7, [r0, #0]
 80099d4:	60c7      	str	r7, [r0, #12]
 80099d6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80099da:	6819      	ldr	r1, [r3, #0]
 80099dc:	b159      	cbz	r1, 80099f6 <_dtoa_r+0x56>
 80099de:	685a      	ldr	r2, [r3, #4]
 80099e0:	2301      	movs	r3, #1
 80099e2:	4093      	lsls	r3, r2
 80099e4:	604a      	str	r2, [r1, #4]
 80099e6:	608b      	str	r3, [r1, #8]
 80099e8:	4648      	mov	r0, r9
 80099ea:	f000 feeb 	bl	800a7c4 <_Bfree>
 80099ee:	2200      	movs	r2, #0
 80099f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80099f4:	601a      	str	r2, [r3, #0]
 80099f6:	1e2b      	subs	r3, r5, #0
 80099f8:	bfaf      	iteee	ge
 80099fa:	2300      	movge	r3, #0
 80099fc:	2201      	movlt	r2, #1
 80099fe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a02:	9307      	strlt	r3, [sp, #28]
 8009a04:	bfa8      	it	ge
 8009a06:	6033      	strge	r3, [r6, #0]
 8009a08:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8009a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8009c80 <_dtoa_r+0x2e0>)
 8009a0e:	bfb8      	it	lt
 8009a10:	6032      	strlt	r2, [r6, #0]
 8009a12:	ea33 0308 	bics.w	r3, r3, r8
 8009a16:	d112      	bne.n	8009a3e <_dtoa_r+0x9e>
 8009a18:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a1c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009a1e:	6013      	str	r3, [r2, #0]
 8009a20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009a24:	4323      	orrs	r3, r4
 8009a26:	f000 855e 	beq.w	800a4e6 <_dtoa_r+0xb46>
 8009a2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009a2c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009c84 <_dtoa_r+0x2e4>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 8560 	beq.w	800a4f6 <_dtoa_r+0xb56>
 8009a36:	f10a 0303 	add.w	r3, sl, #3
 8009a3a:	f000 bd5a 	b.w	800a4f2 <_dtoa_r+0xb52>
 8009a3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a42:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009a46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f7f6 ffab 	bl	80009a8 <__aeabi_dcmpeq>
 8009a52:	4607      	mov	r7, r0
 8009a54:	b158      	cbz	r0, 8009a6e <_dtoa_r+0xce>
 8009a56:	2301      	movs	r3, #1
 8009a58:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009a5e:	b113      	cbz	r3, 8009a66 <_dtoa_r+0xc6>
 8009a60:	4b89      	ldr	r3, [pc, #548]	@ (8009c88 <_dtoa_r+0x2e8>)
 8009a62:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8009c8c <_dtoa_r+0x2ec>
 8009a6a:	f000 bd44 	b.w	800a4f6 <_dtoa_r+0xb56>
 8009a6e:	ab14      	add	r3, sp, #80	@ 0x50
 8009a70:	9301      	str	r3, [sp, #4]
 8009a72:	ab15      	add	r3, sp, #84	@ 0x54
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	4648      	mov	r0, r9
 8009a78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009a7c:	f001 f984 	bl	800ad88 <__d2b>
 8009a80:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009a84:	9003      	str	r0, [sp, #12]
 8009a86:	2e00      	cmp	r6, #0
 8009a88:	d078      	beq.n	8009b7c <_dtoa_r+0x1dc>
 8009a8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a90:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a98:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009a9c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009aa0:	9712      	str	r7, [sp, #72]	@ 0x48
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8009c90 <_dtoa_r+0x2f0>)
 8009aa8:	f7f6 fb5e 	bl	8000168 <__aeabi_dsub>
 8009aac:	a36c      	add	r3, pc, #432	@ (adr r3, 8009c60 <_dtoa_r+0x2c0>)
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	f7f6 fd11 	bl	80004d8 <__aeabi_dmul>
 8009ab6:	a36c      	add	r3, pc, #432	@ (adr r3, 8009c68 <_dtoa_r+0x2c8>)
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	f7f6 fb56 	bl	800016c <__adddf3>
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	460d      	mov	r5, r1
 8009ac6:	f7f6 fc9d 	bl	8000404 <__aeabi_i2d>
 8009aca:	a369      	add	r3, pc, #420	@ (adr r3, 8009c70 <_dtoa_r+0x2d0>)
 8009acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad0:	f7f6 fd02 	bl	80004d8 <__aeabi_dmul>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	4620      	mov	r0, r4
 8009ada:	4629      	mov	r1, r5
 8009adc:	f7f6 fb46 	bl	800016c <__adddf3>
 8009ae0:	4604      	mov	r4, r0
 8009ae2:	460d      	mov	r5, r1
 8009ae4:	f7f6 ffa8 	bl	8000a38 <__aeabi_d2iz>
 8009ae8:	2200      	movs	r2, #0
 8009aea:	4607      	mov	r7, r0
 8009aec:	2300      	movs	r3, #0
 8009aee:	4620      	mov	r0, r4
 8009af0:	4629      	mov	r1, r5
 8009af2:	f7f6 ff63 	bl	80009bc <__aeabi_dcmplt>
 8009af6:	b140      	cbz	r0, 8009b0a <_dtoa_r+0x16a>
 8009af8:	4638      	mov	r0, r7
 8009afa:	f7f6 fc83 	bl	8000404 <__aeabi_i2d>
 8009afe:	4622      	mov	r2, r4
 8009b00:	462b      	mov	r3, r5
 8009b02:	f7f6 ff51 	bl	80009a8 <__aeabi_dcmpeq>
 8009b06:	b900      	cbnz	r0, 8009b0a <_dtoa_r+0x16a>
 8009b08:	3f01      	subs	r7, #1
 8009b0a:	2f16      	cmp	r7, #22
 8009b0c:	d854      	bhi.n	8009bb8 <_dtoa_r+0x218>
 8009b0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b12:	4b60      	ldr	r3, [pc, #384]	@ (8009c94 <_dtoa_r+0x2f4>)
 8009b14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	f7f6 ff4e 	bl	80009bc <__aeabi_dcmplt>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d04b      	beq.n	8009bbc <_dtoa_r+0x21c>
 8009b24:	2300      	movs	r3, #0
 8009b26:	3f01      	subs	r7, #1
 8009b28:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b2a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b2c:	1b9b      	subs	r3, r3, r6
 8009b2e:	1e5a      	subs	r2, r3, #1
 8009b30:	bf49      	itett	mi
 8009b32:	f1c3 0301 	rsbmi	r3, r3, #1
 8009b36:	2300      	movpl	r3, #0
 8009b38:	9304      	strmi	r3, [sp, #16]
 8009b3a:	2300      	movmi	r3, #0
 8009b3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b3e:	bf54      	ite	pl
 8009b40:	9304      	strpl	r3, [sp, #16]
 8009b42:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009b44:	2f00      	cmp	r7, #0
 8009b46:	db3b      	blt.n	8009bc0 <_dtoa_r+0x220>
 8009b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b4a:	970e      	str	r7, [sp, #56]	@ 0x38
 8009b4c:	443b      	add	r3, r7
 8009b4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b50:	2300      	movs	r3, #0
 8009b52:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b54:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009b56:	2b09      	cmp	r3, #9
 8009b58:	d865      	bhi.n	8009c26 <_dtoa_r+0x286>
 8009b5a:	2b05      	cmp	r3, #5
 8009b5c:	bfc4      	itt	gt
 8009b5e:	3b04      	subgt	r3, #4
 8009b60:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009b62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009b64:	bfc8      	it	gt
 8009b66:	2400      	movgt	r4, #0
 8009b68:	f1a3 0302 	sub.w	r3, r3, #2
 8009b6c:	bfd8      	it	le
 8009b6e:	2401      	movle	r4, #1
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d864      	bhi.n	8009c3e <_dtoa_r+0x29e>
 8009b74:	e8df f003 	tbb	[pc, r3]
 8009b78:	2c385553 	.word	0x2c385553
 8009b7c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009b80:	441e      	add	r6, r3
 8009b82:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009b86:	2b20      	cmp	r3, #32
 8009b88:	bfc1      	itttt	gt
 8009b8a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009b8e:	fa08 f803 	lslgt.w	r8, r8, r3
 8009b92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009b96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009b9a:	bfd6      	itet	le
 8009b9c:	f1c3 0320 	rsble	r3, r3, #32
 8009ba0:	ea48 0003 	orrgt.w	r0, r8, r3
 8009ba4:	fa04 f003 	lslle.w	r0, r4, r3
 8009ba8:	f7f6 fc1c 	bl	80003e4 <__aeabi_ui2d>
 8009bac:	2201      	movs	r2, #1
 8009bae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009bb2:	3e01      	subs	r6, #1
 8009bb4:	9212      	str	r2, [sp, #72]	@ 0x48
 8009bb6:	e774      	b.n	8009aa2 <_dtoa_r+0x102>
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e7b5      	b.n	8009b28 <_dtoa_r+0x188>
 8009bbc:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009bbe:	e7b4      	b.n	8009b2a <_dtoa_r+0x18a>
 8009bc0:	9b04      	ldr	r3, [sp, #16]
 8009bc2:	1bdb      	subs	r3, r3, r7
 8009bc4:	9304      	str	r3, [sp, #16]
 8009bc6:	427b      	negs	r3, r7
 8009bc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bca:	2300      	movs	r3, #0
 8009bcc:	930e      	str	r3, [sp, #56]	@ 0x38
 8009bce:	e7c1      	b.n	8009b54 <_dtoa_r+0x1b4>
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009bd6:	eb07 0b03 	add.w	fp, r7, r3
 8009bda:	f10b 0301 	add.w	r3, fp, #1
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	9308      	str	r3, [sp, #32]
 8009be2:	bfb8      	it	lt
 8009be4:	2301      	movlt	r3, #1
 8009be6:	e006      	b.n	8009bf6 <_dtoa_r+0x256>
 8009be8:	2301      	movs	r3, #1
 8009bea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	dd28      	ble.n	8009c44 <_dtoa_r+0x2a4>
 8009bf2:	469b      	mov	fp, r3
 8009bf4:	9308      	str	r3, [sp, #32]
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	2204      	movs	r2, #4
 8009bfa:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009bfe:	f102 0514 	add.w	r5, r2, #20
 8009c02:	429d      	cmp	r5, r3
 8009c04:	d926      	bls.n	8009c54 <_dtoa_r+0x2b4>
 8009c06:	6041      	str	r1, [r0, #4]
 8009c08:	4648      	mov	r0, r9
 8009c0a:	f000 fd9b 	bl	800a744 <_Balloc>
 8009c0e:	4682      	mov	sl, r0
 8009c10:	2800      	cmp	r0, #0
 8009c12:	d143      	bne.n	8009c9c <_dtoa_r+0x2fc>
 8009c14:	4602      	mov	r2, r0
 8009c16:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8009c98 <_dtoa_r+0x2f8>)
 8009c1c:	e6d4      	b.n	80099c8 <_dtoa_r+0x28>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	e7e3      	b.n	8009bea <_dtoa_r+0x24a>
 8009c22:	2300      	movs	r3, #0
 8009c24:	e7d5      	b.n	8009bd2 <_dtoa_r+0x232>
 8009c26:	2401      	movs	r4, #1
 8009c28:	2300      	movs	r3, #0
 8009c2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c2c:	9320      	str	r3, [sp, #128]	@ 0x80
 8009c2e:	f04f 3bff 	mov.w	fp, #4294967295
 8009c32:	2200      	movs	r2, #0
 8009c34:	2312      	movs	r3, #18
 8009c36:	f8cd b020 	str.w	fp, [sp, #32]
 8009c3a:	9221      	str	r2, [sp, #132]	@ 0x84
 8009c3c:	e7db      	b.n	8009bf6 <_dtoa_r+0x256>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c42:	e7f4      	b.n	8009c2e <_dtoa_r+0x28e>
 8009c44:	f04f 0b01 	mov.w	fp, #1
 8009c48:	465b      	mov	r3, fp
 8009c4a:	f8cd b020 	str.w	fp, [sp, #32]
 8009c4e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8009c52:	e7d0      	b.n	8009bf6 <_dtoa_r+0x256>
 8009c54:	3101      	adds	r1, #1
 8009c56:	0052      	lsls	r2, r2, #1
 8009c58:	e7d1      	b.n	8009bfe <_dtoa_r+0x25e>
 8009c5a:	bf00      	nop
 8009c5c:	f3af 8000 	nop.w
 8009c60:	636f4361 	.word	0x636f4361
 8009c64:	3fd287a7 	.word	0x3fd287a7
 8009c68:	8b60c8b3 	.word	0x8b60c8b3
 8009c6c:	3fc68a28 	.word	0x3fc68a28
 8009c70:	509f79fb 	.word	0x509f79fb
 8009c74:	3fd34413 	.word	0x3fd34413
 8009c78:	0800bb1b 	.word	0x0800bb1b
 8009c7c:	0800bb32 	.word	0x0800bb32
 8009c80:	7ff00000 	.word	0x7ff00000
 8009c84:	0800bb17 	.word	0x0800bb17
 8009c88:	0800baeb 	.word	0x0800baeb
 8009c8c:	0800baea 	.word	0x0800baea
 8009c90:	3ff80000 	.word	0x3ff80000
 8009c94:	0800bc80 	.word	0x0800bc80
 8009c98:	0800bb8a 	.word	0x0800bb8a
 8009c9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009ca0:	6018      	str	r0, [r3, #0]
 8009ca2:	9b08      	ldr	r3, [sp, #32]
 8009ca4:	2b0e      	cmp	r3, #14
 8009ca6:	f200 80a1 	bhi.w	8009dec <_dtoa_r+0x44c>
 8009caa:	2c00      	cmp	r4, #0
 8009cac:	f000 809e 	beq.w	8009dec <_dtoa_r+0x44c>
 8009cb0:	2f00      	cmp	r7, #0
 8009cb2:	dd33      	ble.n	8009d1c <_dtoa_r+0x37c>
 8009cb4:	4b9c      	ldr	r3, [pc, #624]	@ (8009f28 <_dtoa_r+0x588>)
 8009cb6:	f007 020f 	and.w	r2, r7, #15
 8009cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cbe:	05f8      	lsls	r0, r7, #23
 8009cc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009cc4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8009cc8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009ccc:	d516      	bpl.n	8009cfc <_dtoa_r+0x35c>
 8009cce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cd2:	4b96      	ldr	r3, [pc, #600]	@ (8009f2c <_dtoa_r+0x58c>)
 8009cd4:	2603      	movs	r6, #3
 8009cd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cda:	f7f6 fd27 	bl	800072c <__aeabi_ddiv>
 8009cde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009ce2:	f004 040f 	and.w	r4, r4, #15
 8009ce6:	4d91      	ldr	r5, [pc, #580]	@ (8009f2c <_dtoa_r+0x58c>)
 8009ce8:	b954      	cbnz	r4, 8009d00 <_dtoa_r+0x360>
 8009cea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009cee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cf2:	f7f6 fd1b 	bl	800072c <__aeabi_ddiv>
 8009cf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009cfa:	e028      	b.n	8009d4e <_dtoa_r+0x3ae>
 8009cfc:	2602      	movs	r6, #2
 8009cfe:	e7f2      	b.n	8009ce6 <_dtoa_r+0x346>
 8009d00:	07e1      	lsls	r1, r4, #31
 8009d02:	d508      	bpl.n	8009d16 <_dtoa_r+0x376>
 8009d04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d08:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d0c:	f7f6 fbe4 	bl	80004d8 <__aeabi_dmul>
 8009d10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d14:	3601      	adds	r6, #1
 8009d16:	1064      	asrs	r4, r4, #1
 8009d18:	3508      	adds	r5, #8
 8009d1a:	e7e5      	b.n	8009ce8 <_dtoa_r+0x348>
 8009d1c:	f000 80af 	beq.w	8009e7e <_dtoa_r+0x4de>
 8009d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d24:	427c      	negs	r4, r7
 8009d26:	4b80      	ldr	r3, [pc, #512]	@ (8009f28 <_dtoa_r+0x588>)
 8009d28:	f004 020f 	and.w	r2, r4, #15
 8009d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f7f6 fbd0 	bl	80004d8 <__aeabi_dmul>
 8009d38:	2602      	movs	r6, #2
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d40:	4d7a      	ldr	r5, [pc, #488]	@ (8009f2c <_dtoa_r+0x58c>)
 8009d42:	1124      	asrs	r4, r4, #4
 8009d44:	2c00      	cmp	r4, #0
 8009d46:	f040 808f 	bne.w	8009e68 <_dtoa_r+0x4c8>
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1d3      	bne.n	8009cf6 <_dtoa_r+0x356>
 8009d4e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009d52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 8094 	beq.w	8009e82 <_dtoa_r+0x4e2>
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	4629      	mov	r1, r5
 8009d60:	4b73      	ldr	r3, [pc, #460]	@ (8009f30 <_dtoa_r+0x590>)
 8009d62:	f7f6 fe2b 	bl	80009bc <__aeabi_dcmplt>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f000 808b 	beq.w	8009e82 <_dtoa_r+0x4e2>
 8009d6c:	9b08      	ldr	r3, [sp, #32]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f000 8087 	beq.w	8009e82 <_dtoa_r+0x4e2>
 8009d74:	f1bb 0f00 	cmp.w	fp, #0
 8009d78:	dd34      	ble.n	8009de4 <_dtoa_r+0x444>
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	4629      	mov	r1, r5
 8009d80:	4b6c      	ldr	r3, [pc, #432]	@ (8009f34 <_dtoa_r+0x594>)
 8009d82:	f7f6 fba9 	bl	80004d8 <__aeabi_dmul>
 8009d86:	465c      	mov	r4, fp
 8009d88:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d8c:	f107 38ff 	add.w	r8, r7, #4294967295
 8009d90:	3601      	adds	r6, #1
 8009d92:	4630      	mov	r0, r6
 8009d94:	f7f6 fb36 	bl	8000404 <__aeabi_i2d>
 8009d98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d9c:	f7f6 fb9c 	bl	80004d8 <__aeabi_dmul>
 8009da0:	2200      	movs	r2, #0
 8009da2:	4b65      	ldr	r3, [pc, #404]	@ (8009f38 <_dtoa_r+0x598>)
 8009da4:	f7f6 f9e2 	bl	800016c <__adddf3>
 8009da8:	4605      	mov	r5, r0
 8009daa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009dae:	2c00      	cmp	r4, #0
 8009db0:	d16a      	bne.n	8009e88 <_dtoa_r+0x4e8>
 8009db2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009db6:	2200      	movs	r2, #0
 8009db8:	4b60      	ldr	r3, [pc, #384]	@ (8009f3c <_dtoa_r+0x59c>)
 8009dba:	f7f6 f9d5 	bl	8000168 <__aeabi_dsub>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009dc6:	462a      	mov	r2, r5
 8009dc8:	4633      	mov	r3, r6
 8009dca:	f7f6 fe15 	bl	80009f8 <__aeabi_dcmpgt>
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	f040 8298 	bne.w	800a304 <_dtoa_r+0x964>
 8009dd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dd8:	462a      	mov	r2, r5
 8009dda:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009dde:	f7f6 fded 	bl	80009bc <__aeabi_dcmplt>
 8009de2:	bb38      	cbnz	r0, 8009e34 <_dtoa_r+0x494>
 8009de4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009de8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009dec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f2c0 8157 	blt.w	800a0a2 <_dtoa_r+0x702>
 8009df4:	2f0e      	cmp	r7, #14
 8009df6:	f300 8154 	bgt.w	800a0a2 <_dtoa_r+0x702>
 8009dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8009f28 <_dtoa_r+0x588>)
 8009dfc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e04:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009e08:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f280 80e5 	bge.w	8009fda <_dtoa_r+0x63a>
 8009e10:	9b08      	ldr	r3, [sp, #32]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f300 80e1 	bgt.w	8009fda <_dtoa_r+0x63a>
 8009e18:	d10c      	bne.n	8009e34 <_dtoa_r+0x494>
 8009e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	4b46      	ldr	r3, [pc, #280]	@ (8009f3c <_dtoa_r+0x59c>)
 8009e22:	f7f6 fb59 	bl	80004d8 <__aeabi_dmul>
 8009e26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e2a:	f7f6 fddb 	bl	80009e4 <__aeabi_dcmpge>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f000 8266 	beq.w	800a300 <_dtoa_r+0x960>
 8009e34:	2400      	movs	r4, #0
 8009e36:	4625      	mov	r5, r4
 8009e38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e3a:	4656      	mov	r6, sl
 8009e3c:	ea6f 0803 	mvn.w	r8, r3
 8009e40:	2700      	movs	r7, #0
 8009e42:	4621      	mov	r1, r4
 8009e44:	4648      	mov	r0, r9
 8009e46:	f000 fcbd 	bl	800a7c4 <_Bfree>
 8009e4a:	2d00      	cmp	r5, #0
 8009e4c:	f000 80bd 	beq.w	8009fca <_dtoa_r+0x62a>
 8009e50:	b12f      	cbz	r7, 8009e5e <_dtoa_r+0x4be>
 8009e52:	42af      	cmp	r7, r5
 8009e54:	d003      	beq.n	8009e5e <_dtoa_r+0x4be>
 8009e56:	4639      	mov	r1, r7
 8009e58:	4648      	mov	r0, r9
 8009e5a:	f000 fcb3 	bl	800a7c4 <_Bfree>
 8009e5e:	4629      	mov	r1, r5
 8009e60:	4648      	mov	r0, r9
 8009e62:	f000 fcaf 	bl	800a7c4 <_Bfree>
 8009e66:	e0b0      	b.n	8009fca <_dtoa_r+0x62a>
 8009e68:	07e2      	lsls	r2, r4, #31
 8009e6a:	d505      	bpl.n	8009e78 <_dtoa_r+0x4d8>
 8009e6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e70:	f7f6 fb32 	bl	80004d8 <__aeabi_dmul>
 8009e74:	2301      	movs	r3, #1
 8009e76:	3601      	adds	r6, #1
 8009e78:	1064      	asrs	r4, r4, #1
 8009e7a:	3508      	adds	r5, #8
 8009e7c:	e762      	b.n	8009d44 <_dtoa_r+0x3a4>
 8009e7e:	2602      	movs	r6, #2
 8009e80:	e765      	b.n	8009d4e <_dtoa_r+0x3ae>
 8009e82:	46b8      	mov	r8, r7
 8009e84:	9c08      	ldr	r4, [sp, #32]
 8009e86:	e784      	b.n	8009d92 <_dtoa_r+0x3f2>
 8009e88:	4b27      	ldr	r3, [pc, #156]	@ (8009f28 <_dtoa_r+0x588>)
 8009e8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e94:	4454      	add	r4, sl
 8009e96:	2900      	cmp	r1, #0
 8009e98:	d054      	beq.n	8009f44 <_dtoa_r+0x5a4>
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	4928      	ldr	r1, [pc, #160]	@ (8009f40 <_dtoa_r+0x5a0>)
 8009e9e:	f7f6 fc45 	bl	800072c <__aeabi_ddiv>
 8009ea2:	4633      	mov	r3, r6
 8009ea4:	462a      	mov	r2, r5
 8009ea6:	f7f6 f95f 	bl	8000168 <__aeabi_dsub>
 8009eaa:	4656      	mov	r6, sl
 8009eac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009eb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009eb4:	f7f6 fdc0 	bl	8000a38 <__aeabi_d2iz>
 8009eb8:	4605      	mov	r5, r0
 8009eba:	f7f6 faa3 	bl	8000404 <__aeabi_i2d>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ec6:	f7f6 f94f 	bl	8000168 <__aeabi_dsub>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	3530      	adds	r5, #48	@ 0x30
 8009ed0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ed4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ed8:	f806 5b01 	strb.w	r5, [r6], #1
 8009edc:	f7f6 fd6e 	bl	80009bc <__aeabi_dcmplt>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d172      	bne.n	8009fca <_dtoa_r+0x62a>
 8009ee4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ee8:	2000      	movs	r0, #0
 8009eea:	4911      	ldr	r1, [pc, #68]	@ (8009f30 <_dtoa_r+0x590>)
 8009eec:	f7f6 f93c 	bl	8000168 <__aeabi_dsub>
 8009ef0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ef4:	f7f6 fd62 	bl	80009bc <__aeabi_dcmplt>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	f040 80b4 	bne.w	800a066 <_dtoa_r+0x6c6>
 8009efe:	42a6      	cmp	r6, r4
 8009f00:	f43f af70 	beq.w	8009de4 <_dtoa_r+0x444>
 8009f04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f08:	2200      	movs	r2, #0
 8009f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f34 <_dtoa_r+0x594>)
 8009f0c:	f7f6 fae4 	bl	80004d8 <__aeabi_dmul>
 8009f10:	2200      	movs	r2, #0
 8009f12:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f1a:	4b06      	ldr	r3, [pc, #24]	@ (8009f34 <_dtoa_r+0x594>)
 8009f1c:	f7f6 fadc 	bl	80004d8 <__aeabi_dmul>
 8009f20:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009f24:	e7c4      	b.n	8009eb0 <_dtoa_r+0x510>
 8009f26:	bf00      	nop
 8009f28:	0800bc80 	.word	0x0800bc80
 8009f2c:	0800bc58 	.word	0x0800bc58
 8009f30:	3ff00000 	.word	0x3ff00000
 8009f34:	40240000 	.word	0x40240000
 8009f38:	401c0000 	.word	0x401c0000
 8009f3c:	40140000 	.word	0x40140000
 8009f40:	3fe00000 	.word	0x3fe00000
 8009f44:	4631      	mov	r1, r6
 8009f46:	4628      	mov	r0, r5
 8009f48:	f7f6 fac6 	bl	80004d8 <__aeabi_dmul>
 8009f4c:	4656      	mov	r6, sl
 8009f4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f52:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009f54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f58:	f7f6 fd6e 	bl	8000a38 <__aeabi_d2iz>
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	f7f6 fa51 	bl	8000404 <__aeabi_i2d>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f6a:	f7f6 f8fd 	bl	8000168 <__aeabi_dsub>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	3530      	adds	r5, #48	@ 0x30
 8009f74:	f806 5b01 	strb.w	r5, [r6], #1
 8009f78:	42a6      	cmp	r6, r4
 8009f7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f7e:	f04f 0200 	mov.w	r2, #0
 8009f82:	d124      	bne.n	8009fce <_dtoa_r+0x62e>
 8009f84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f88:	4bae      	ldr	r3, [pc, #696]	@ (800a244 <_dtoa_r+0x8a4>)
 8009f8a:	f7f6 f8ef 	bl	800016c <__adddf3>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	460b      	mov	r3, r1
 8009f92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f96:	f7f6 fd2f 	bl	80009f8 <__aeabi_dcmpgt>
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	d163      	bne.n	800a066 <_dtoa_r+0x6c6>
 8009f9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	49a7      	ldr	r1, [pc, #668]	@ (800a244 <_dtoa_r+0x8a4>)
 8009fa6:	f7f6 f8df 	bl	8000168 <__aeabi_dsub>
 8009faa:	4602      	mov	r2, r0
 8009fac:	460b      	mov	r3, r1
 8009fae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fb2:	f7f6 fd03 	bl	80009bc <__aeabi_dcmplt>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	f43f af14 	beq.w	8009de4 <_dtoa_r+0x444>
 8009fbc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009fbe:	1e73      	subs	r3, r6, #1
 8009fc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009fc2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009fc6:	2b30      	cmp	r3, #48	@ 0x30
 8009fc8:	d0f8      	beq.n	8009fbc <_dtoa_r+0x61c>
 8009fca:	4647      	mov	r7, r8
 8009fcc:	e03b      	b.n	800a046 <_dtoa_r+0x6a6>
 8009fce:	4b9e      	ldr	r3, [pc, #632]	@ (800a248 <_dtoa_r+0x8a8>)
 8009fd0:	f7f6 fa82 	bl	80004d8 <__aeabi_dmul>
 8009fd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009fd8:	e7bc      	b.n	8009f54 <_dtoa_r+0x5b4>
 8009fda:	4656      	mov	r6, sl
 8009fdc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	4629      	mov	r1, r5
 8009fe8:	f7f6 fba0 	bl	800072c <__aeabi_ddiv>
 8009fec:	f7f6 fd24 	bl	8000a38 <__aeabi_d2iz>
 8009ff0:	4680      	mov	r8, r0
 8009ff2:	f7f6 fa07 	bl	8000404 <__aeabi_i2d>
 8009ff6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ffa:	f7f6 fa6d 	bl	80004d8 <__aeabi_dmul>
 8009ffe:	4602      	mov	r2, r0
 800a000:	460b      	mov	r3, r1
 800a002:	4620      	mov	r0, r4
 800a004:	4629      	mov	r1, r5
 800a006:	f7f6 f8af 	bl	8000168 <__aeabi_dsub>
 800a00a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a00e:	9d08      	ldr	r5, [sp, #32]
 800a010:	f806 4b01 	strb.w	r4, [r6], #1
 800a014:	eba6 040a 	sub.w	r4, r6, sl
 800a018:	42a5      	cmp	r5, r4
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	d133      	bne.n	800a088 <_dtoa_r+0x6e8>
 800a020:	f7f6 f8a4 	bl	800016c <__adddf3>
 800a024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a028:	4604      	mov	r4, r0
 800a02a:	460d      	mov	r5, r1
 800a02c:	f7f6 fce4 	bl	80009f8 <__aeabi_dcmpgt>
 800a030:	b9c0      	cbnz	r0, 800a064 <_dtoa_r+0x6c4>
 800a032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a036:	4620      	mov	r0, r4
 800a038:	4629      	mov	r1, r5
 800a03a:	f7f6 fcb5 	bl	80009a8 <__aeabi_dcmpeq>
 800a03e:	b110      	cbz	r0, 800a046 <_dtoa_r+0x6a6>
 800a040:	f018 0f01 	tst.w	r8, #1
 800a044:	d10e      	bne.n	800a064 <_dtoa_r+0x6c4>
 800a046:	4648      	mov	r0, r9
 800a048:	9903      	ldr	r1, [sp, #12]
 800a04a:	f000 fbbb 	bl	800a7c4 <_Bfree>
 800a04e:	2300      	movs	r3, #0
 800a050:	7033      	strb	r3, [r6, #0]
 800a052:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a054:	3701      	adds	r7, #1
 800a056:	601f      	str	r7, [r3, #0]
 800a058:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	f000 824b 	beq.w	800a4f6 <_dtoa_r+0xb56>
 800a060:	601e      	str	r6, [r3, #0]
 800a062:	e248      	b.n	800a4f6 <_dtoa_r+0xb56>
 800a064:	46b8      	mov	r8, r7
 800a066:	4633      	mov	r3, r6
 800a068:	461e      	mov	r6, r3
 800a06a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a06e:	2a39      	cmp	r2, #57	@ 0x39
 800a070:	d106      	bne.n	800a080 <_dtoa_r+0x6e0>
 800a072:	459a      	cmp	sl, r3
 800a074:	d1f8      	bne.n	800a068 <_dtoa_r+0x6c8>
 800a076:	2230      	movs	r2, #48	@ 0x30
 800a078:	f108 0801 	add.w	r8, r8, #1
 800a07c:	f88a 2000 	strb.w	r2, [sl]
 800a080:	781a      	ldrb	r2, [r3, #0]
 800a082:	3201      	adds	r2, #1
 800a084:	701a      	strb	r2, [r3, #0]
 800a086:	e7a0      	b.n	8009fca <_dtoa_r+0x62a>
 800a088:	2200      	movs	r2, #0
 800a08a:	4b6f      	ldr	r3, [pc, #444]	@ (800a248 <_dtoa_r+0x8a8>)
 800a08c:	f7f6 fa24 	bl	80004d8 <__aeabi_dmul>
 800a090:	2200      	movs	r2, #0
 800a092:	2300      	movs	r3, #0
 800a094:	4604      	mov	r4, r0
 800a096:	460d      	mov	r5, r1
 800a098:	f7f6 fc86 	bl	80009a8 <__aeabi_dcmpeq>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d09f      	beq.n	8009fe0 <_dtoa_r+0x640>
 800a0a0:	e7d1      	b.n	800a046 <_dtoa_r+0x6a6>
 800a0a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a0a4:	2a00      	cmp	r2, #0
 800a0a6:	f000 80ea 	beq.w	800a27e <_dtoa_r+0x8de>
 800a0aa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a0ac:	2a01      	cmp	r2, #1
 800a0ae:	f300 80cd 	bgt.w	800a24c <_dtoa_r+0x8ac>
 800a0b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a0b4:	2a00      	cmp	r2, #0
 800a0b6:	f000 80c1 	beq.w	800a23c <_dtoa_r+0x89c>
 800a0ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a0be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a0c0:	9e04      	ldr	r6, [sp, #16]
 800a0c2:	9a04      	ldr	r2, [sp, #16]
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	441a      	add	r2, r3
 800a0c8:	9204      	str	r2, [sp, #16]
 800a0ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0cc:	4648      	mov	r0, r9
 800a0ce:	441a      	add	r2, r3
 800a0d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0d2:	f000 fc2b 	bl	800a92c <__i2b>
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	b166      	cbz	r6, 800a0f4 <_dtoa_r+0x754>
 800a0da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	dd09      	ble.n	800a0f4 <_dtoa_r+0x754>
 800a0e0:	42b3      	cmp	r3, r6
 800a0e2:	bfa8      	it	ge
 800a0e4:	4633      	movge	r3, r6
 800a0e6:	9a04      	ldr	r2, [sp, #16]
 800a0e8:	1af6      	subs	r6, r6, r3
 800a0ea:	1ad2      	subs	r2, r2, r3
 800a0ec:	9204      	str	r2, [sp, #16]
 800a0ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0f6:	b30b      	cbz	r3, 800a13c <_dtoa_r+0x79c>
 800a0f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 80c6 	beq.w	800a28c <_dtoa_r+0x8ec>
 800a100:	2c00      	cmp	r4, #0
 800a102:	f000 80c0 	beq.w	800a286 <_dtoa_r+0x8e6>
 800a106:	4629      	mov	r1, r5
 800a108:	4622      	mov	r2, r4
 800a10a:	4648      	mov	r0, r9
 800a10c:	f000 fcc6 	bl	800aa9c <__pow5mult>
 800a110:	9a03      	ldr	r2, [sp, #12]
 800a112:	4601      	mov	r1, r0
 800a114:	4605      	mov	r5, r0
 800a116:	4648      	mov	r0, r9
 800a118:	f000 fc1e 	bl	800a958 <__multiply>
 800a11c:	9903      	ldr	r1, [sp, #12]
 800a11e:	4680      	mov	r8, r0
 800a120:	4648      	mov	r0, r9
 800a122:	f000 fb4f 	bl	800a7c4 <_Bfree>
 800a126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a128:	1b1b      	subs	r3, r3, r4
 800a12a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a12c:	f000 80b1 	beq.w	800a292 <_dtoa_r+0x8f2>
 800a130:	4641      	mov	r1, r8
 800a132:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a134:	4648      	mov	r0, r9
 800a136:	f000 fcb1 	bl	800aa9c <__pow5mult>
 800a13a:	9003      	str	r0, [sp, #12]
 800a13c:	2101      	movs	r1, #1
 800a13e:	4648      	mov	r0, r9
 800a140:	f000 fbf4 	bl	800a92c <__i2b>
 800a144:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a146:	4604      	mov	r4, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 81d8 	beq.w	800a4fe <_dtoa_r+0xb5e>
 800a14e:	461a      	mov	r2, r3
 800a150:	4601      	mov	r1, r0
 800a152:	4648      	mov	r0, r9
 800a154:	f000 fca2 	bl	800aa9c <__pow5mult>
 800a158:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a15a:	4604      	mov	r4, r0
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	f300 809f 	bgt.w	800a2a0 <_dtoa_r+0x900>
 800a162:	9b06      	ldr	r3, [sp, #24]
 800a164:	2b00      	cmp	r3, #0
 800a166:	f040 8097 	bne.w	800a298 <_dtoa_r+0x8f8>
 800a16a:	9b07      	ldr	r3, [sp, #28]
 800a16c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a170:	2b00      	cmp	r3, #0
 800a172:	f040 8093 	bne.w	800a29c <_dtoa_r+0x8fc>
 800a176:	9b07      	ldr	r3, [sp, #28]
 800a178:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a17c:	0d1b      	lsrs	r3, r3, #20
 800a17e:	051b      	lsls	r3, r3, #20
 800a180:	b133      	cbz	r3, 800a190 <_dtoa_r+0x7f0>
 800a182:	9b04      	ldr	r3, [sp, #16]
 800a184:	3301      	adds	r3, #1
 800a186:	9304      	str	r3, [sp, #16]
 800a188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18a:	3301      	adds	r3, #1
 800a18c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a18e:	2301      	movs	r3, #1
 800a190:	930a      	str	r3, [sp, #40]	@ 0x28
 800a192:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 81b8 	beq.w	800a50a <_dtoa_r+0xb6a>
 800a19a:	6923      	ldr	r3, [r4, #16]
 800a19c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1a0:	6918      	ldr	r0, [r3, #16]
 800a1a2:	f000 fb77 	bl	800a894 <__hi0bits>
 800a1a6:	f1c0 0020 	rsb	r0, r0, #32
 800a1aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ac:	4418      	add	r0, r3
 800a1ae:	f010 001f 	ands.w	r0, r0, #31
 800a1b2:	f000 8082 	beq.w	800a2ba <_dtoa_r+0x91a>
 800a1b6:	f1c0 0320 	rsb	r3, r0, #32
 800a1ba:	2b04      	cmp	r3, #4
 800a1bc:	dd73      	ble.n	800a2a6 <_dtoa_r+0x906>
 800a1be:	9b04      	ldr	r3, [sp, #16]
 800a1c0:	f1c0 001c 	rsb	r0, r0, #28
 800a1c4:	4403      	add	r3, r0
 800a1c6:	9304      	str	r3, [sp, #16]
 800a1c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ca:	4406      	add	r6, r0
 800a1cc:	4403      	add	r3, r0
 800a1ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1d0:	9b04      	ldr	r3, [sp, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	dd05      	ble.n	800a1e2 <_dtoa_r+0x842>
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	4648      	mov	r0, r9
 800a1da:	9903      	ldr	r1, [sp, #12]
 800a1dc:	f000 fcb8 	bl	800ab50 <__lshift>
 800a1e0:	9003      	str	r0, [sp, #12]
 800a1e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	dd05      	ble.n	800a1f4 <_dtoa_r+0x854>
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	4648      	mov	r0, r9
 800a1ee:	f000 fcaf 	bl	800ab50 <__lshift>
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d061      	beq.n	800a2be <_dtoa_r+0x91e>
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	9803      	ldr	r0, [sp, #12]
 800a1fe:	f000 fd13 	bl	800ac28 <__mcmp>
 800a202:	2800      	cmp	r0, #0
 800a204:	da5b      	bge.n	800a2be <_dtoa_r+0x91e>
 800a206:	2300      	movs	r3, #0
 800a208:	220a      	movs	r2, #10
 800a20a:	4648      	mov	r0, r9
 800a20c:	9903      	ldr	r1, [sp, #12]
 800a20e:	f000 fafb 	bl	800a808 <__multadd>
 800a212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a214:	f107 38ff 	add.w	r8, r7, #4294967295
 800a218:	9003      	str	r0, [sp, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 8177 	beq.w	800a50e <_dtoa_r+0xb6e>
 800a220:	4629      	mov	r1, r5
 800a222:	2300      	movs	r3, #0
 800a224:	220a      	movs	r2, #10
 800a226:	4648      	mov	r0, r9
 800a228:	f000 faee 	bl	800a808 <__multadd>
 800a22c:	f1bb 0f00 	cmp.w	fp, #0
 800a230:	4605      	mov	r5, r0
 800a232:	dc6f      	bgt.n	800a314 <_dtoa_r+0x974>
 800a234:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a236:	2b02      	cmp	r3, #2
 800a238:	dc49      	bgt.n	800a2ce <_dtoa_r+0x92e>
 800a23a:	e06b      	b.n	800a314 <_dtoa_r+0x974>
 800a23c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a23e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a242:	e73c      	b.n	800a0be <_dtoa_r+0x71e>
 800a244:	3fe00000 	.word	0x3fe00000
 800a248:	40240000 	.word	0x40240000
 800a24c:	9b08      	ldr	r3, [sp, #32]
 800a24e:	1e5c      	subs	r4, r3, #1
 800a250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a252:	42a3      	cmp	r3, r4
 800a254:	db09      	blt.n	800a26a <_dtoa_r+0x8ca>
 800a256:	1b1c      	subs	r4, r3, r4
 800a258:	9b08      	ldr	r3, [sp, #32]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f6bf af30 	bge.w	800a0c0 <_dtoa_r+0x720>
 800a260:	9b04      	ldr	r3, [sp, #16]
 800a262:	9a08      	ldr	r2, [sp, #32]
 800a264:	1a9e      	subs	r6, r3, r2
 800a266:	2300      	movs	r3, #0
 800a268:	e72b      	b.n	800a0c2 <_dtoa_r+0x722>
 800a26a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a26c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a26e:	1ae3      	subs	r3, r4, r3
 800a270:	441a      	add	r2, r3
 800a272:	940a      	str	r4, [sp, #40]	@ 0x28
 800a274:	9e04      	ldr	r6, [sp, #16]
 800a276:	2400      	movs	r4, #0
 800a278:	9b08      	ldr	r3, [sp, #32]
 800a27a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a27c:	e721      	b.n	800a0c2 <_dtoa_r+0x722>
 800a27e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a280:	9e04      	ldr	r6, [sp, #16]
 800a282:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a284:	e728      	b.n	800a0d8 <_dtoa_r+0x738>
 800a286:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a28a:	e751      	b.n	800a130 <_dtoa_r+0x790>
 800a28c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a28e:	9903      	ldr	r1, [sp, #12]
 800a290:	e750      	b.n	800a134 <_dtoa_r+0x794>
 800a292:	f8cd 800c 	str.w	r8, [sp, #12]
 800a296:	e751      	b.n	800a13c <_dtoa_r+0x79c>
 800a298:	2300      	movs	r3, #0
 800a29a:	e779      	b.n	800a190 <_dtoa_r+0x7f0>
 800a29c:	9b06      	ldr	r3, [sp, #24]
 800a29e:	e777      	b.n	800a190 <_dtoa_r+0x7f0>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2a4:	e779      	b.n	800a19a <_dtoa_r+0x7fa>
 800a2a6:	d093      	beq.n	800a1d0 <_dtoa_r+0x830>
 800a2a8:	9a04      	ldr	r2, [sp, #16]
 800a2aa:	331c      	adds	r3, #28
 800a2ac:	441a      	add	r2, r3
 800a2ae:	9204      	str	r2, [sp, #16]
 800a2b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2b2:	441e      	add	r6, r3
 800a2b4:	441a      	add	r2, r3
 800a2b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2b8:	e78a      	b.n	800a1d0 <_dtoa_r+0x830>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	e7f4      	b.n	800a2a8 <_dtoa_r+0x908>
 800a2be:	9b08      	ldr	r3, [sp, #32]
 800a2c0:	46b8      	mov	r8, r7
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	dc20      	bgt.n	800a308 <_dtoa_r+0x968>
 800a2c6:	469b      	mov	fp, r3
 800a2c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	dd1e      	ble.n	800a30c <_dtoa_r+0x96c>
 800a2ce:	f1bb 0f00 	cmp.w	fp, #0
 800a2d2:	f47f adb1 	bne.w	8009e38 <_dtoa_r+0x498>
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	465b      	mov	r3, fp
 800a2da:	2205      	movs	r2, #5
 800a2dc:	4648      	mov	r0, r9
 800a2de:	f000 fa93 	bl	800a808 <__multadd>
 800a2e2:	4601      	mov	r1, r0
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	9803      	ldr	r0, [sp, #12]
 800a2e8:	f000 fc9e 	bl	800ac28 <__mcmp>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	f77f ada3 	ble.w	8009e38 <_dtoa_r+0x498>
 800a2f2:	4656      	mov	r6, sl
 800a2f4:	2331      	movs	r3, #49	@ 0x31
 800a2f6:	f108 0801 	add.w	r8, r8, #1
 800a2fa:	f806 3b01 	strb.w	r3, [r6], #1
 800a2fe:	e59f      	b.n	8009e40 <_dtoa_r+0x4a0>
 800a300:	46b8      	mov	r8, r7
 800a302:	9c08      	ldr	r4, [sp, #32]
 800a304:	4625      	mov	r5, r4
 800a306:	e7f4      	b.n	800a2f2 <_dtoa_r+0x952>
 800a308:	f8dd b020 	ldr.w	fp, [sp, #32]
 800a30c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f000 8101 	beq.w	800a516 <_dtoa_r+0xb76>
 800a314:	2e00      	cmp	r6, #0
 800a316:	dd05      	ble.n	800a324 <_dtoa_r+0x984>
 800a318:	4629      	mov	r1, r5
 800a31a:	4632      	mov	r2, r6
 800a31c:	4648      	mov	r0, r9
 800a31e:	f000 fc17 	bl	800ab50 <__lshift>
 800a322:	4605      	mov	r5, r0
 800a324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a326:	2b00      	cmp	r3, #0
 800a328:	d05c      	beq.n	800a3e4 <_dtoa_r+0xa44>
 800a32a:	4648      	mov	r0, r9
 800a32c:	6869      	ldr	r1, [r5, #4]
 800a32e:	f000 fa09 	bl	800a744 <_Balloc>
 800a332:	4606      	mov	r6, r0
 800a334:	b928      	cbnz	r0, 800a342 <_dtoa_r+0x9a2>
 800a336:	4602      	mov	r2, r0
 800a338:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a33c:	4b80      	ldr	r3, [pc, #512]	@ (800a540 <_dtoa_r+0xba0>)
 800a33e:	f7ff bb43 	b.w	80099c8 <_dtoa_r+0x28>
 800a342:	692a      	ldr	r2, [r5, #16]
 800a344:	f105 010c 	add.w	r1, r5, #12
 800a348:	3202      	adds	r2, #2
 800a34a:	0092      	lsls	r2, r2, #2
 800a34c:	300c      	adds	r0, #12
 800a34e:	f7ff fa90 	bl	8009872 <memcpy>
 800a352:	2201      	movs	r2, #1
 800a354:	4631      	mov	r1, r6
 800a356:	4648      	mov	r0, r9
 800a358:	f000 fbfa 	bl	800ab50 <__lshift>
 800a35c:	462f      	mov	r7, r5
 800a35e:	4605      	mov	r5, r0
 800a360:	f10a 0301 	add.w	r3, sl, #1
 800a364:	9304      	str	r3, [sp, #16]
 800a366:	eb0a 030b 	add.w	r3, sl, fp
 800a36a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a36c:	9b06      	ldr	r3, [sp, #24]
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	9309      	str	r3, [sp, #36]	@ 0x24
 800a374:	9b04      	ldr	r3, [sp, #16]
 800a376:	4621      	mov	r1, r4
 800a378:	9803      	ldr	r0, [sp, #12]
 800a37a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a37e:	f7ff fa86 	bl	800988e <quorem>
 800a382:	4603      	mov	r3, r0
 800a384:	4639      	mov	r1, r7
 800a386:	3330      	adds	r3, #48	@ 0x30
 800a388:	9006      	str	r0, [sp, #24]
 800a38a:	9803      	ldr	r0, [sp, #12]
 800a38c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a38e:	f000 fc4b 	bl	800ac28 <__mcmp>
 800a392:	462a      	mov	r2, r5
 800a394:	9008      	str	r0, [sp, #32]
 800a396:	4621      	mov	r1, r4
 800a398:	4648      	mov	r0, r9
 800a39a:	f000 fc61 	bl	800ac60 <__mdiff>
 800a39e:	68c2      	ldr	r2, [r0, #12]
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3a4:	bb02      	cbnz	r2, 800a3e8 <_dtoa_r+0xa48>
 800a3a6:	4601      	mov	r1, r0
 800a3a8:	9803      	ldr	r0, [sp, #12]
 800a3aa:	f000 fc3d 	bl	800ac28 <__mcmp>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4648      	mov	r0, r9
 800a3b6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800a3ba:	f000 fa03 	bl	800a7c4 <_Bfree>
 800a3be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a3c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a3c2:	9e04      	ldr	r6, [sp, #16]
 800a3c4:	ea42 0103 	orr.w	r1, r2, r3
 800a3c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ca:	4319      	orrs	r1, r3
 800a3cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3ce:	d10d      	bne.n	800a3ec <_dtoa_r+0xa4c>
 800a3d0:	2b39      	cmp	r3, #57	@ 0x39
 800a3d2:	d027      	beq.n	800a424 <_dtoa_r+0xa84>
 800a3d4:	9a08      	ldr	r2, [sp, #32]
 800a3d6:	2a00      	cmp	r2, #0
 800a3d8:	dd01      	ble.n	800a3de <_dtoa_r+0xa3e>
 800a3da:	9b06      	ldr	r3, [sp, #24]
 800a3dc:	3331      	adds	r3, #49	@ 0x31
 800a3de:	f88b 3000 	strb.w	r3, [fp]
 800a3e2:	e52e      	b.n	8009e42 <_dtoa_r+0x4a2>
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	e7b9      	b.n	800a35c <_dtoa_r+0x9bc>
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	e7e2      	b.n	800a3b2 <_dtoa_r+0xa12>
 800a3ec:	9908      	ldr	r1, [sp, #32]
 800a3ee:	2900      	cmp	r1, #0
 800a3f0:	db04      	blt.n	800a3fc <_dtoa_r+0xa5c>
 800a3f2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800a3f4:	4301      	orrs	r1, r0
 800a3f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3f8:	4301      	orrs	r1, r0
 800a3fa:	d120      	bne.n	800a43e <_dtoa_r+0xa9e>
 800a3fc:	2a00      	cmp	r2, #0
 800a3fe:	ddee      	ble.n	800a3de <_dtoa_r+0xa3e>
 800a400:	2201      	movs	r2, #1
 800a402:	9903      	ldr	r1, [sp, #12]
 800a404:	4648      	mov	r0, r9
 800a406:	9304      	str	r3, [sp, #16]
 800a408:	f000 fba2 	bl	800ab50 <__lshift>
 800a40c:	4621      	mov	r1, r4
 800a40e:	9003      	str	r0, [sp, #12]
 800a410:	f000 fc0a 	bl	800ac28 <__mcmp>
 800a414:	2800      	cmp	r0, #0
 800a416:	9b04      	ldr	r3, [sp, #16]
 800a418:	dc02      	bgt.n	800a420 <_dtoa_r+0xa80>
 800a41a:	d1e0      	bne.n	800a3de <_dtoa_r+0xa3e>
 800a41c:	07da      	lsls	r2, r3, #31
 800a41e:	d5de      	bpl.n	800a3de <_dtoa_r+0xa3e>
 800a420:	2b39      	cmp	r3, #57	@ 0x39
 800a422:	d1da      	bne.n	800a3da <_dtoa_r+0xa3a>
 800a424:	2339      	movs	r3, #57	@ 0x39
 800a426:	f88b 3000 	strb.w	r3, [fp]
 800a42a:	4633      	mov	r3, r6
 800a42c:	461e      	mov	r6, r3
 800a42e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a432:	3b01      	subs	r3, #1
 800a434:	2a39      	cmp	r2, #57	@ 0x39
 800a436:	d04e      	beq.n	800a4d6 <_dtoa_r+0xb36>
 800a438:	3201      	adds	r2, #1
 800a43a:	701a      	strb	r2, [r3, #0]
 800a43c:	e501      	b.n	8009e42 <_dtoa_r+0x4a2>
 800a43e:	2a00      	cmp	r2, #0
 800a440:	dd03      	ble.n	800a44a <_dtoa_r+0xaaa>
 800a442:	2b39      	cmp	r3, #57	@ 0x39
 800a444:	d0ee      	beq.n	800a424 <_dtoa_r+0xa84>
 800a446:	3301      	adds	r3, #1
 800a448:	e7c9      	b.n	800a3de <_dtoa_r+0xa3e>
 800a44a:	9a04      	ldr	r2, [sp, #16]
 800a44c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a44e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a452:	428a      	cmp	r2, r1
 800a454:	d028      	beq.n	800a4a8 <_dtoa_r+0xb08>
 800a456:	2300      	movs	r3, #0
 800a458:	220a      	movs	r2, #10
 800a45a:	9903      	ldr	r1, [sp, #12]
 800a45c:	4648      	mov	r0, r9
 800a45e:	f000 f9d3 	bl	800a808 <__multadd>
 800a462:	42af      	cmp	r7, r5
 800a464:	9003      	str	r0, [sp, #12]
 800a466:	f04f 0300 	mov.w	r3, #0
 800a46a:	f04f 020a 	mov.w	r2, #10
 800a46e:	4639      	mov	r1, r7
 800a470:	4648      	mov	r0, r9
 800a472:	d107      	bne.n	800a484 <_dtoa_r+0xae4>
 800a474:	f000 f9c8 	bl	800a808 <__multadd>
 800a478:	4607      	mov	r7, r0
 800a47a:	4605      	mov	r5, r0
 800a47c:	9b04      	ldr	r3, [sp, #16]
 800a47e:	3301      	adds	r3, #1
 800a480:	9304      	str	r3, [sp, #16]
 800a482:	e777      	b.n	800a374 <_dtoa_r+0x9d4>
 800a484:	f000 f9c0 	bl	800a808 <__multadd>
 800a488:	4629      	mov	r1, r5
 800a48a:	4607      	mov	r7, r0
 800a48c:	2300      	movs	r3, #0
 800a48e:	220a      	movs	r2, #10
 800a490:	4648      	mov	r0, r9
 800a492:	f000 f9b9 	bl	800a808 <__multadd>
 800a496:	4605      	mov	r5, r0
 800a498:	e7f0      	b.n	800a47c <_dtoa_r+0xadc>
 800a49a:	f1bb 0f00 	cmp.w	fp, #0
 800a49e:	bfcc      	ite	gt
 800a4a0:	465e      	movgt	r6, fp
 800a4a2:	2601      	movle	r6, #1
 800a4a4:	2700      	movs	r7, #0
 800a4a6:	4456      	add	r6, sl
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	9903      	ldr	r1, [sp, #12]
 800a4ac:	4648      	mov	r0, r9
 800a4ae:	9304      	str	r3, [sp, #16]
 800a4b0:	f000 fb4e 	bl	800ab50 <__lshift>
 800a4b4:	4621      	mov	r1, r4
 800a4b6:	9003      	str	r0, [sp, #12]
 800a4b8:	f000 fbb6 	bl	800ac28 <__mcmp>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	dcb4      	bgt.n	800a42a <_dtoa_r+0xa8a>
 800a4c0:	d102      	bne.n	800a4c8 <_dtoa_r+0xb28>
 800a4c2:	9b04      	ldr	r3, [sp, #16]
 800a4c4:	07db      	lsls	r3, r3, #31
 800a4c6:	d4b0      	bmi.n	800a42a <_dtoa_r+0xa8a>
 800a4c8:	4633      	mov	r3, r6
 800a4ca:	461e      	mov	r6, r3
 800a4cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4d0:	2a30      	cmp	r2, #48	@ 0x30
 800a4d2:	d0fa      	beq.n	800a4ca <_dtoa_r+0xb2a>
 800a4d4:	e4b5      	b.n	8009e42 <_dtoa_r+0x4a2>
 800a4d6:	459a      	cmp	sl, r3
 800a4d8:	d1a8      	bne.n	800a42c <_dtoa_r+0xa8c>
 800a4da:	2331      	movs	r3, #49	@ 0x31
 800a4dc:	f108 0801 	add.w	r8, r8, #1
 800a4e0:	f88a 3000 	strb.w	r3, [sl]
 800a4e4:	e4ad      	b.n	8009e42 <_dtoa_r+0x4a2>
 800a4e6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a4e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a544 <_dtoa_r+0xba4>
 800a4ec:	b11b      	cbz	r3, 800a4f6 <_dtoa_r+0xb56>
 800a4ee:	f10a 0308 	add.w	r3, sl, #8
 800a4f2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	4650      	mov	r0, sl
 800a4f8:	b017      	add	sp, #92	@ 0x5c
 800a4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a500:	2b01      	cmp	r3, #1
 800a502:	f77f ae2e 	ble.w	800a162 <_dtoa_r+0x7c2>
 800a506:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a508:	930a      	str	r3, [sp, #40]	@ 0x28
 800a50a:	2001      	movs	r0, #1
 800a50c:	e64d      	b.n	800a1aa <_dtoa_r+0x80a>
 800a50e:	f1bb 0f00 	cmp.w	fp, #0
 800a512:	f77f aed9 	ble.w	800a2c8 <_dtoa_r+0x928>
 800a516:	4656      	mov	r6, sl
 800a518:	4621      	mov	r1, r4
 800a51a:	9803      	ldr	r0, [sp, #12]
 800a51c:	f7ff f9b7 	bl	800988e <quorem>
 800a520:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a524:	f806 3b01 	strb.w	r3, [r6], #1
 800a528:	eba6 020a 	sub.w	r2, r6, sl
 800a52c:	4593      	cmp	fp, r2
 800a52e:	ddb4      	ble.n	800a49a <_dtoa_r+0xafa>
 800a530:	2300      	movs	r3, #0
 800a532:	220a      	movs	r2, #10
 800a534:	4648      	mov	r0, r9
 800a536:	9903      	ldr	r1, [sp, #12]
 800a538:	f000 f966 	bl	800a808 <__multadd>
 800a53c:	9003      	str	r0, [sp, #12]
 800a53e:	e7eb      	b.n	800a518 <_dtoa_r+0xb78>
 800a540:	0800bb8a 	.word	0x0800bb8a
 800a544:	0800bb0e 	.word	0x0800bb0e

0800a548 <_free_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4605      	mov	r5, r0
 800a54c:	2900      	cmp	r1, #0
 800a54e:	d040      	beq.n	800a5d2 <_free_r+0x8a>
 800a550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a554:	1f0c      	subs	r4, r1, #4
 800a556:	2b00      	cmp	r3, #0
 800a558:	bfb8      	it	lt
 800a55a:	18e4      	addlt	r4, r4, r3
 800a55c:	f000 f8e6 	bl	800a72c <__malloc_lock>
 800a560:	4a1c      	ldr	r2, [pc, #112]	@ (800a5d4 <_free_r+0x8c>)
 800a562:	6813      	ldr	r3, [r2, #0]
 800a564:	b933      	cbnz	r3, 800a574 <_free_r+0x2c>
 800a566:	6063      	str	r3, [r4, #4]
 800a568:	6014      	str	r4, [r2, #0]
 800a56a:	4628      	mov	r0, r5
 800a56c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a570:	f000 b8e2 	b.w	800a738 <__malloc_unlock>
 800a574:	42a3      	cmp	r3, r4
 800a576:	d908      	bls.n	800a58a <_free_r+0x42>
 800a578:	6820      	ldr	r0, [r4, #0]
 800a57a:	1821      	adds	r1, r4, r0
 800a57c:	428b      	cmp	r3, r1
 800a57e:	bf01      	itttt	eq
 800a580:	6819      	ldreq	r1, [r3, #0]
 800a582:	685b      	ldreq	r3, [r3, #4]
 800a584:	1809      	addeq	r1, r1, r0
 800a586:	6021      	streq	r1, [r4, #0]
 800a588:	e7ed      	b.n	800a566 <_free_r+0x1e>
 800a58a:	461a      	mov	r2, r3
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	b10b      	cbz	r3, 800a594 <_free_r+0x4c>
 800a590:	42a3      	cmp	r3, r4
 800a592:	d9fa      	bls.n	800a58a <_free_r+0x42>
 800a594:	6811      	ldr	r1, [r2, #0]
 800a596:	1850      	adds	r0, r2, r1
 800a598:	42a0      	cmp	r0, r4
 800a59a:	d10b      	bne.n	800a5b4 <_free_r+0x6c>
 800a59c:	6820      	ldr	r0, [r4, #0]
 800a59e:	4401      	add	r1, r0
 800a5a0:	1850      	adds	r0, r2, r1
 800a5a2:	4283      	cmp	r3, r0
 800a5a4:	6011      	str	r1, [r2, #0]
 800a5a6:	d1e0      	bne.n	800a56a <_free_r+0x22>
 800a5a8:	6818      	ldr	r0, [r3, #0]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	4408      	add	r0, r1
 800a5ae:	6010      	str	r0, [r2, #0]
 800a5b0:	6053      	str	r3, [r2, #4]
 800a5b2:	e7da      	b.n	800a56a <_free_r+0x22>
 800a5b4:	d902      	bls.n	800a5bc <_free_r+0x74>
 800a5b6:	230c      	movs	r3, #12
 800a5b8:	602b      	str	r3, [r5, #0]
 800a5ba:	e7d6      	b.n	800a56a <_free_r+0x22>
 800a5bc:	6820      	ldr	r0, [r4, #0]
 800a5be:	1821      	adds	r1, r4, r0
 800a5c0:	428b      	cmp	r3, r1
 800a5c2:	bf01      	itttt	eq
 800a5c4:	6819      	ldreq	r1, [r3, #0]
 800a5c6:	685b      	ldreq	r3, [r3, #4]
 800a5c8:	1809      	addeq	r1, r1, r0
 800a5ca:	6021      	streq	r1, [r4, #0]
 800a5cc:	6063      	str	r3, [r4, #4]
 800a5ce:	6054      	str	r4, [r2, #4]
 800a5d0:	e7cb      	b.n	800a56a <_free_r+0x22>
 800a5d2:	bd38      	pop	{r3, r4, r5, pc}
 800a5d4:	20001eec 	.word	0x20001eec

0800a5d8 <malloc>:
 800a5d8:	4b02      	ldr	r3, [pc, #8]	@ (800a5e4 <malloc+0xc>)
 800a5da:	4601      	mov	r1, r0
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	f000 b825 	b.w	800a62c <_malloc_r>
 800a5e2:	bf00      	nop
 800a5e4:	20000034 	.word	0x20000034

0800a5e8 <sbrk_aligned>:
 800a5e8:	b570      	push	{r4, r5, r6, lr}
 800a5ea:	4e0f      	ldr	r6, [pc, #60]	@ (800a628 <sbrk_aligned+0x40>)
 800a5ec:	460c      	mov	r4, r1
 800a5ee:	6831      	ldr	r1, [r6, #0]
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	b911      	cbnz	r1, 800a5fa <sbrk_aligned+0x12>
 800a5f4:	f000 fe9c 	bl	800b330 <_sbrk_r>
 800a5f8:	6030      	str	r0, [r6, #0]
 800a5fa:	4621      	mov	r1, r4
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	f000 fe97 	bl	800b330 <_sbrk_r>
 800a602:	1c43      	adds	r3, r0, #1
 800a604:	d103      	bne.n	800a60e <sbrk_aligned+0x26>
 800a606:	f04f 34ff 	mov.w	r4, #4294967295
 800a60a:	4620      	mov	r0, r4
 800a60c:	bd70      	pop	{r4, r5, r6, pc}
 800a60e:	1cc4      	adds	r4, r0, #3
 800a610:	f024 0403 	bic.w	r4, r4, #3
 800a614:	42a0      	cmp	r0, r4
 800a616:	d0f8      	beq.n	800a60a <sbrk_aligned+0x22>
 800a618:	1a21      	subs	r1, r4, r0
 800a61a:	4628      	mov	r0, r5
 800a61c:	f000 fe88 	bl	800b330 <_sbrk_r>
 800a620:	3001      	adds	r0, #1
 800a622:	d1f2      	bne.n	800a60a <sbrk_aligned+0x22>
 800a624:	e7ef      	b.n	800a606 <sbrk_aligned+0x1e>
 800a626:	bf00      	nop
 800a628:	20001ee8 	.word	0x20001ee8

0800a62c <_malloc_r>:
 800a62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a630:	1ccd      	adds	r5, r1, #3
 800a632:	f025 0503 	bic.w	r5, r5, #3
 800a636:	3508      	adds	r5, #8
 800a638:	2d0c      	cmp	r5, #12
 800a63a:	bf38      	it	cc
 800a63c:	250c      	movcc	r5, #12
 800a63e:	2d00      	cmp	r5, #0
 800a640:	4606      	mov	r6, r0
 800a642:	db01      	blt.n	800a648 <_malloc_r+0x1c>
 800a644:	42a9      	cmp	r1, r5
 800a646:	d904      	bls.n	800a652 <_malloc_r+0x26>
 800a648:	230c      	movs	r3, #12
 800a64a:	6033      	str	r3, [r6, #0]
 800a64c:	2000      	movs	r0, #0
 800a64e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a652:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a728 <_malloc_r+0xfc>
 800a656:	f000 f869 	bl	800a72c <__malloc_lock>
 800a65a:	f8d8 3000 	ldr.w	r3, [r8]
 800a65e:	461c      	mov	r4, r3
 800a660:	bb44      	cbnz	r4, 800a6b4 <_malloc_r+0x88>
 800a662:	4629      	mov	r1, r5
 800a664:	4630      	mov	r0, r6
 800a666:	f7ff ffbf 	bl	800a5e8 <sbrk_aligned>
 800a66a:	1c43      	adds	r3, r0, #1
 800a66c:	4604      	mov	r4, r0
 800a66e:	d158      	bne.n	800a722 <_malloc_r+0xf6>
 800a670:	f8d8 4000 	ldr.w	r4, [r8]
 800a674:	4627      	mov	r7, r4
 800a676:	2f00      	cmp	r7, #0
 800a678:	d143      	bne.n	800a702 <_malloc_r+0xd6>
 800a67a:	2c00      	cmp	r4, #0
 800a67c:	d04b      	beq.n	800a716 <_malloc_r+0xea>
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	4639      	mov	r1, r7
 800a682:	4630      	mov	r0, r6
 800a684:	eb04 0903 	add.w	r9, r4, r3
 800a688:	f000 fe52 	bl	800b330 <_sbrk_r>
 800a68c:	4581      	cmp	r9, r0
 800a68e:	d142      	bne.n	800a716 <_malloc_r+0xea>
 800a690:	6821      	ldr	r1, [r4, #0]
 800a692:	4630      	mov	r0, r6
 800a694:	1a6d      	subs	r5, r5, r1
 800a696:	4629      	mov	r1, r5
 800a698:	f7ff ffa6 	bl	800a5e8 <sbrk_aligned>
 800a69c:	3001      	adds	r0, #1
 800a69e:	d03a      	beq.n	800a716 <_malloc_r+0xea>
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	442b      	add	r3, r5
 800a6a4:	6023      	str	r3, [r4, #0]
 800a6a6:	f8d8 3000 	ldr.w	r3, [r8]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	bb62      	cbnz	r2, 800a708 <_malloc_r+0xdc>
 800a6ae:	f8c8 7000 	str.w	r7, [r8]
 800a6b2:	e00f      	b.n	800a6d4 <_malloc_r+0xa8>
 800a6b4:	6822      	ldr	r2, [r4, #0]
 800a6b6:	1b52      	subs	r2, r2, r5
 800a6b8:	d420      	bmi.n	800a6fc <_malloc_r+0xd0>
 800a6ba:	2a0b      	cmp	r2, #11
 800a6bc:	d917      	bls.n	800a6ee <_malloc_r+0xc2>
 800a6be:	1961      	adds	r1, r4, r5
 800a6c0:	42a3      	cmp	r3, r4
 800a6c2:	6025      	str	r5, [r4, #0]
 800a6c4:	bf18      	it	ne
 800a6c6:	6059      	strne	r1, [r3, #4]
 800a6c8:	6863      	ldr	r3, [r4, #4]
 800a6ca:	bf08      	it	eq
 800a6cc:	f8c8 1000 	streq.w	r1, [r8]
 800a6d0:	5162      	str	r2, [r4, r5]
 800a6d2:	604b      	str	r3, [r1, #4]
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f000 f82f 	bl	800a738 <__malloc_unlock>
 800a6da:	f104 000b 	add.w	r0, r4, #11
 800a6de:	1d23      	adds	r3, r4, #4
 800a6e0:	f020 0007 	bic.w	r0, r0, #7
 800a6e4:	1ac2      	subs	r2, r0, r3
 800a6e6:	bf1c      	itt	ne
 800a6e8:	1a1b      	subne	r3, r3, r0
 800a6ea:	50a3      	strne	r3, [r4, r2]
 800a6ec:	e7af      	b.n	800a64e <_malloc_r+0x22>
 800a6ee:	6862      	ldr	r2, [r4, #4]
 800a6f0:	42a3      	cmp	r3, r4
 800a6f2:	bf0c      	ite	eq
 800a6f4:	f8c8 2000 	streq.w	r2, [r8]
 800a6f8:	605a      	strne	r2, [r3, #4]
 800a6fa:	e7eb      	b.n	800a6d4 <_malloc_r+0xa8>
 800a6fc:	4623      	mov	r3, r4
 800a6fe:	6864      	ldr	r4, [r4, #4]
 800a700:	e7ae      	b.n	800a660 <_malloc_r+0x34>
 800a702:	463c      	mov	r4, r7
 800a704:	687f      	ldr	r7, [r7, #4]
 800a706:	e7b6      	b.n	800a676 <_malloc_r+0x4a>
 800a708:	461a      	mov	r2, r3
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	42a3      	cmp	r3, r4
 800a70e:	d1fb      	bne.n	800a708 <_malloc_r+0xdc>
 800a710:	2300      	movs	r3, #0
 800a712:	6053      	str	r3, [r2, #4]
 800a714:	e7de      	b.n	800a6d4 <_malloc_r+0xa8>
 800a716:	230c      	movs	r3, #12
 800a718:	4630      	mov	r0, r6
 800a71a:	6033      	str	r3, [r6, #0]
 800a71c:	f000 f80c 	bl	800a738 <__malloc_unlock>
 800a720:	e794      	b.n	800a64c <_malloc_r+0x20>
 800a722:	6005      	str	r5, [r0, #0]
 800a724:	e7d6      	b.n	800a6d4 <_malloc_r+0xa8>
 800a726:	bf00      	nop
 800a728:	20001eec 	.word	0x20001eec

0800a72c <__malloc_lock>:
 800a72c:	4801      	ldr	r0, [pc, #4]	@ (800a734 <__malloc_lock+0x8>)
 800a72e:	f7ff b890 	b.w	8009852 <__retarget_lock_acquire_recursive>
 800a732:	bf00      	nop
 800a734:	20001ee4 	.word	0x20001ee4

0800a738 <__malloc_unlock>:
 800a738:	4801      	ldr	r0, [pc, #4]	@ (800a740 <__malloc_unlock+0x8>)
 800a73a:	f7ff b88b 	b.w	8009854 <__retarget_lock_release_recursive>
 800a73e:	bf00      	nop
 800a740:	20001ee4 	.word	0x20001ee4

0800a744 <_Balloc>:
 800a744:	b570      	push	{r4, r5, r6, lr}
 800a746:	69c6      	ldr	r6, [r0, #28]
 800a748:	4604      	mov	r4, r0
 800a74a:	460d      	mov	r5, r1
 800a74c:	b976      	cbnz	r6, 800a76c <_Balloc+0x28>
 800a74e:	2010      	movs	r0, #16
 800a750:	f7ff ff42 	bl	800a5d8 <malloc>
 800a754:	4602      	mov	r2, r0
 800a756:	61e0      	str	r0, [r4, #28]
 800a758:	b920      	cbnz	r0, 800a764 <_Balloc+0x20>
 800a75a:	216b      	movs	r1, #107	@ 0x6b
 800a75c:	4b17      	ldr	r3, [pc, #92]	@ (800a7bc <_Balloc+0x78>)
 800a75e:	4818      	ldr	r0, [pc, #96]	@ (800a7c0 <_Balloc+0x7c>)
 800a760:	f000 fdf6 	bl	800b350 <__assert_func>
 800a764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a768:	6006      	str	r6, [r0, #0]
 800a76a:	60c6      	str	r6, [r0, #12]
 800a76c:	69e6      	ldr	r6, [r4, #28]
 800a76e:	68f3      	ldr	r3, [r6, #12]
 800a770:	b183      	cbz	r3, 800a794 <_Balloc+0x50>
 800a772:	69e3      	ldr	r3, [r4, #28]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a77a:	b9b8      	cbnz	r0, 800a7ac <_Balloc+0x68>
 800a77c:	2101      	movs	r1, #1
 800a77e:	fa01 f605 	lsl.w	r6, r1, r5
 800a782:	1d72      	adds	r2, r6, #5
 800a784:	4620      	mov	r0, r4
 800a786:	0092      	lsls	r2, r2, #2
 800a788:	f000 fe00 	bl	800b38c <_calloc_r>
 800a78c:	b160      	cbz	r0, 800a7a8 <_Balloc+0x64>
 800a78e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a792:	e00e      	b.n	800a7b2 <_Balloc+0x6e>
 800a794:	2221      	movs	r2, #33	@ 0x21
 800a796:	2104      	movs	r1, #4
 800a798:	4620      	mov	r0, r4
 800a79a:	f000 fdf7 	bl	800b38c <_calloc_r>
 800a79e:	69e3      	ldr	r3, [r4, #28]
 800a7a0:	60f0      	str	r0, [r6, #12]
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1e4      	bne.n	800a772 <_Balloc+0x2e>
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	bd70      	pop	{r4, r5, r6, pc}
 800a7ac:	6802      	ldr	r2, [r0, #0]
 800a7ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7b8:	e7f7      	b.n	800a7aa <_Balloc+0x66>
 800a7ba:	bf00      	nop
 800a7bc:	0800bb1b 	.word	0x0800bb1b
 800a7c0:	0800bb9b 	.word	0x0800bb9b

0800a7c4 <_Bfree>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	69c6      	ldr	r6, [r0, #28]
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	b976      	cbnz	r6, 800a7ec <_Bfree+0x28>
 800a7ce:	2010      	movs	r0, #16
 800a7d0:	f7ff ff02 	bl	800a5d8 <malloc>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	61e8      	str	r0, [r5, #28]
 800a7d8:	b920      	cbnz	r0, 800a7e4 <_Bfree+0x20>
 800a7da:	218f      	movs	r1, #143	@ 0x8f
 800a7dc:	4b08      	ldr	r3, [pc, #32]	@ (800a800 <_Bfree+0x3c>)
 800a7de:	4809      	ldr	r0, [pc, #36]	@ (800a804 <_Bfree+0x40>)
 800a7e0:	f000 fdb6 	bl	800b350 <__assert_func>
 800a7e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7e8:	6006      	str	r6, [r0, #0]
 800a7ea:	60c6      	str	r6, [r0, #12]
 800a7ec:	b13c      	cbz	r4, 800a7fe <_Bfree+0x3a>
 800a7ee:	69eb      	ldr	r3, [r5, #28]
 800a7f0:	6862      	ldr	r2, [r4, #4]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7f8:	6021      	str	r1, [r4, #0]
 800a7fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}
 800a800:	0800bb1b 	.word	0x0800bb1b
 800a804:	0800bb9b 	.word	0x0800bb9b

0800a808 <__multadd>:
 800a808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80c:	4607      	mov	r7, r0
 800a80e:	460c      	mov	r4, r1
 800a810:	461e      	mov	r6, r3
 800a812:	2000      	movs	r0, #0
 800a814:	690d      	ldr	r5, [r1, #16]
 800a816:	f101 0c14 	add.w	ip, r1, #20
 800a81a:	f8dc 3000 	ldr.w	r3, [ip]
 800a81e:	3001      	adds	r0, #1
 800a820:	b299      	uxth	r1, r3
 800a822:	fb02 6101 	mla	r1, r2, r1, r6
 800a826:	0c1e      	lsrs	r6, r3, #16
 800a828:	0c0b      	lsrs	r3, r1, #16
 800a82a:	fb02 3306 	mla	r3, r2, r6, r3
 800a82e:	b289      	uxth	r1, r1
 800a830:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a834:	4285      	cmp	r5, r0
 800a836:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a83a:	f84c 1b04 	str.w	r1, [ip], #4
 800a83e:	dcec      	bgt.n	800a81a <__multadd+0x12>
 800a840:	b30e      	cbz	r6, 800a886 <__multadd+0x7e>
 800a842:	68a3      	ldr	r3, [r4, #8]
 800a844:	42ab      	cmp	r3, r5
 800a846:	dc19      	bgt.n	800a87c <__multadd+0x74>
 800a848:	6861      	ldr	r1, [r4, #4]
 800a84a:	4638      	mov	r0, r7
 800a84c:	3101      	adds	r1, #1
 800a84e:	f7ff ff79 	bl	800a744 <_Balloc>
 800a852:	4680      	mov	r8, r0
 800a854:	b928      	cbnz	r0, 800a862 <__multadd+0x5a>
 800a856:	4602      	mov	r2, r0
 800a858:	21ba      	movs	r1, #186	@ 0xba
 800a85a:	4b0c      	ldr	r3, [pc, #48]	@ (800a88c <__multadd+0x84>)
 800a85c:	480c      	ldr	r0, [pc, #48]	@ (800a890 <__multadd+0x88>)
 800a85e:	f000 fd77 	bl	800b350 <__assert_func>
 800a862:	6922      	ldr	r2, [r4, #16]
 800a864:	f104 010c 	add.w	r1, r4, #12
 800a868:	3202      	adds	r2, #2
 800a86a:	0092      	lsls	r2, r2, #2
 800a86c:	300c      	adds	r0, #12
 800a86e:	f7ff f800 	bl	8009872 <memcpy>
 800a872:	4621      	mov	r1, r4
 800a874:	4638      	mov	r0, r7
 800a876:	f7ff ffa5 	bl	800a7c4 <_Bfree>
 800a87a:	4644      	mov	r4, r8
 800a87c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a880:	3501      	adds	r5, #1
 800a882:	615e      	str	r6, [r3, #20]
 800a884:	6125      	str	r5, [r4, #16]
 800a886:	4620      	mov	r0, r4
 800a888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a88c:	0800bb8a 	.word	0x0800bb8a
 800a890:	0800bb9b 	.word	0x0800bb9b

0800a894 <__hi0bits>:
 800a894:	4603      	mov	r3, r0
 800a896:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a89a:	bf3a      	itte	cc
 800a89c:	0403      	lslcc	r3, r0, #16
 800a89e:	2010      	movcc	r0, #16
 800a8a0:	2000      	movcs	r0, #0
 800a8a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8a6:	bf3c      	itt	cc
 800a8a8:	021b      	lslcc	r3, r3, #8
 800a8aa:	3008      	addcc	r0, #8
 800a8ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8b0:	bf3c      	itt	cc
 800a8b2:	011b      	lslcc	r3, r3, #4
 800a8b4:	3004      	addcc	r0, #4
 800a8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ba:	bf3c      	itt	cc
 800a8bc:	009b      	lslcc	r3, r3, #2
 800a8be:	3002      	addcc	r0, #2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	db05      	blt.n	800a8d0 <__hi0bits+0x3c>
 800a8c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a8c8:	f100 0001 	add.w	r0, r0, #1
 800a8cc:	bf08      	it	eq
 800a8ce:	2020      	moveq	r0, #32
 800a8d0:	4770      	bx	lr

0800a8d2 <__lo0bits>:
 800a8d2:	6803      	ldr	r3, [r0, #0]
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	f013 0007 	ands.w	r0, r3, #7
 800a8da:	d00b      	beq.n	800a8f4 <__lo0bits+0x22>
 800a8dc:	07d9      	lsls	r1, r3, #31
 800a8de:	d421      	bmi.n	800a924 <__lo0bits+0x52>
 800a8e0:	0798      	lsls	r0, r3, #30
 800a8e2:	bf49      	itett	mi
 800a8e4:	085b      	lsrmi	r3, r3, #1
 800a8e6:	089b      	lsrpl	r3, r3, #2
 800a8e8:	2001      	movmi	r0, #1
 800a8ea:	6013      	strmi	r3, [r2, #0]
 800a8ec:	bf5c      	itt	pl
 800a8ee:	2002      	movpl	r0, #2
 800a8f0:	6013      	strpl	r3, [r2, #0]
 800a8f2:	4770      	bx	lr
 800a8f4:	b299      	uxth	r1, r3
 800a8f6:	b909      	cbnz	r1, 800a8fc <__lo0bits+0x2a>
 800a8f8:	2010      	movs	r0, #16
 800a8fa:	0c1b      	lsrs	r3, r3, #16
 800a8fc:	b2d9      	uxtb	r1, r3
 800a8fe:	b909      	cbnz	r1, 800a904 <__lo0bits+0x32>
 800a900:	3008      	adds	r0, #8
 800a902:	0a1b      	lsrs	r3, r3, #8
 800a904:	0719      	lsls	r1, r3, #28
 800a906:	bf04      	itt	eq
 800a908:	091b      	lsreq	r3, r3, #4
 800a90a:	3004      	addeq	r0, #4
 800a90c:	0799      	lsls	r1, r3, #30
 800a90e:	bf04      	itt	eq
 800a910:	089b      	lsreq	r3, r3, #2
 800a912:	3002      	addeq	r0, #2
 800a914:	07d9      	lsls	r1, r3, #31
 800a916:	d403      	bmi.n	800a920 <__lo0bits+0x4e>
 800a918:	085b      	lsrs	r3, r3, #1
 800a91a:	f100 0001 	add.w	r0, r0, #1
 800a91e:	d003      	beq.n	800a928 <__lo0bits+0x56>
 800a920:	6013      	str	r3, [r2, #0]
 800a922:	4770      	bx	lr
 800a924:	2000      	movs	r0, #0
 800a926:	4770      	bx	lr
 800a928:	2020      	movs	r0, #32
 800a92a:	4770      	bx	lr

0800a92c <__i2b>:
 800a92c:	b510      	push	{r4, lr}
 800a92e:	460c      	mov	r4, r1
 800a930:	2101      	movs	r1, #1
 800a932:	f7ff ff07 	bl	800a744 <_Balloc>
 800a936:	4602      	mov	r2, r0
 800a938:	b928      	cbnz	r0, 800a946 <__i2b+0x1a>
 800a93a:	f240 1145 	movw	r1, #325	@ 0x145
 800a93e:	4b04      	ldr	r3, [pc, #16]	@ (800a950 <__i2b+0x24>)
 800a940:	4804      	ldr	r0, [pc, #16]	@ (800a954 <__i2b+0x28>)
 800a942:	f000 fd05 	bl	800b350 <__assert_func>
 800a946:	2301      	movs	r3, #1
 800a948:	6144      	str	r4, [r0, #20]
 800a94a:	6103      	str	r3, [r0, #16]
 800a94c:	bd10      	pop	{r4, pc}
 800a94e:	bf00      	nop
 800a950:	0800bb8a 	.word	0x0800bb8a
 800a954:	0800bb9b 	.word	0x0800bb9b

0800a958 <__multiply>:
 800a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95c:	4617      	mov	r7, r2
 800a95e:	690a      	ldr	r2, [r1, #16]
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	4689      	mov	r9, r1
 800a964:	429a      	cmp	r2, r3
 800a966:	bfa2      	ittt	ge
 800a968:	463b      	movge	r3, r7
 800a96a:	460f      	movge	r7, r1
 800a96c:	4699      	movge	r9, r3
 800a96e:	693d      	ldr	r5, [r7, #16]
 800a970:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	6879      	ldr	r1, [r7, #4]
 800a978:	eb05 060a 	add.w	r6, r5, sl
 800a97c:	42b3      	cmp	r3, r6
 800a97e:	b085      	sub	sp, #20
 800a980:	bfb8      	it	lt
 800a982:	3101      	addlt	r1, #1
 800a984:	f7ff fede 	bl	800a744 <_Balloc>
 800a988:	b930      	cbnz	r0, 800a998 <__multiply+0x40>
 800a98a:	4602      	mov	r2, r0
 800a98c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a990:	4b40      	ldr	r3, [pc, #256]	@ (800aa94 <__multiply+0x13c>)
 800a992:	4841      	ldr	r0, [pc, #260]	@ (800aa98 <__multiply+0x140>)
 800a994:	f000 fcdc 	bl	800b350 <__assert_func>
 800a998:	f100 0414 	add.w	r4, r0, #20
 800a99c:	4623      	mov	r3, r4
 800a99e:	2200      	movs	r2, #0
 800a9a0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a9a4:	4573      	cmp	r3, lr
 800a9a6:	d320      	bcc.n	800a9ea <__multiply+0x92>
 800a9a8:	f107 0814 	add.w	r8, r7, #20
 800a9ac:	f109 0114 	add.w	r1, r9, #20
 800a9b0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a9b4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a9b8:	9302      	str	r3, [sp, #8]
 800a9ba:	1beb      	subs	r3, r5, r7
 800a9bc:	3b15      	subs	r3, #21
 800a9be:	f023 0303 	bic.w	r3, r3, #3
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	3715      	adds	r7, #21
 800a9c6:	42bd      	cmp	r5, r7
 800a9c8:	bf38      	it	cc
 800a9ca:	2304      	movcc	r3, #4
 800a9cc:	9301      	str	r3, [sp, #4]
 800a9ce:	9b02      	ldr	r3, [sp, #8]
 800a9d0:	9103      	str	r1, [sp, #12]
 800a9d2:	428b      	cmp	r3, r1
 800a9d4:	d80c      	bhi.n	800a9f0 <__multiply+0x98>
 800a9d6:	2e00      	cmp	r6, #0
 800a9d8:	dd03      	ble.n	800a9e2 <__multiply+0x8a>
 800a9da:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d055      	beq.n	800aa8e <__multiply+0x136>
 800a9e2:	6106      	str	r6, [r0, #16]
 800a9e4:	b005      	add	sp, #20
 800a9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ea:	f843 2b04 	str.w	r2, [r3], #4
 800a9ee:	e7d9      	b.n	800a9a4 <__multiply+0x4c>
 800a9f0:	f8b1 a000 	ldrh.w	sl, [r1]
 800a9f4:	f1ba 0f00 	cmp.w	sl, #0
 800a9f8:	d01f      	beq.n	800aa3a <__multiply+0xe2>
 800a9fa:	46c4      	mov	ip, r8
 800a9fc:	46a1      	mov	r9, r4
 800a9fe:	2700      	movs	r7, #0
 800aa00:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aa04:	f8d9 3000 	ldr.w	r3, [r9]
 800aa08:	fa1f fb82 	uxth.w	fp, r2
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa12:	443b      	add	r3, r7
 800aa14:	f8d9 7000 	ldr.w	r7, [r9]
 800aa18:	0c12      	lsrs	r2, r2, #16
 800aa1a:	0c3f      	lsrs	r7, r7, #16
 800aa1c:	fb0a 7202 	mla	r2, sl, r2, r7
 800aa20:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa2a:	4565      	cmp	r5, ip
 800aa2c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800aa30:	f849 3b04 	str.w	r3, [r9], #4
 800aa34:	d8e4      	bhi.n	800aa00 <__multiply+0xa8>
 800aa36:	9b01      	ldr	r3, [sp, #4]
 800aa38:	50e7      	str	r7, [r4, r3]
 800aa3a:	9b03      	ldr	r3, [sp, #12]
 800aa3c:	3104      	adds	r1, #4
 800aa3e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aa42:	f1b9 0f00 	cmp.w	r9, #0
 800aa46:	d020      	beq.n	800aa8a <__multiply+0x132>
 800aa48:	4647      	mov	r7, r8
 800aa4a:	46a4      	mov	ip, r4
 800aa4c:	f04f 0a00 	mov.w	sl, #0
 800aa50:	6823      	ldr	r3, [r4, #0]
 800aa52:	f8b7 b000 	ldrh.w	fp, [r7]
 800aa56:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	fb09 220b 	mla	r2, r9, fp, r2
 800aa60:	4452      	add	r2, sl
 800aa62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa66:	f84c 3b04 	str.w	r3, [ip], #4
 800aa6a:	f857 3b04 	ldr.w	r3, [r7], #4
 800aa6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa72:	f8bc 3000 	ldrh.w	r3, [ip]
 800aa76:	42bd      	cmp	r5, r7
 800aa78:	fb09 330a 	mla	r3, r9, sl, r3
 800aa7c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800aa80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa84:	d8e5      	bhi.n	800aa52 <__multiply+0xfa>
 800aa86:	9a01      	ldr	r2, [sp, #4]
 800aa88:	50a3      	str	r3, [r4, r2]
 800aa8a:	3404      	adds	r4, #4
 800aa8c:	e79f      	b.n	800a9ce <__multiply+0x76>
 800aa8e:	3e01      	subs	r6, #1
 800aa90:	e7a1      	b.n	800a9d6 <__multiply+0x7e>
 800aa92:	bf00      	nop
 800aa94:	0800bb8a 	.word	0x0800bb8a
 800aa98:	0800bb9b 	.word	0x0800bb9b

0800aa9c <__pow5mult>:
 800aa9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaa0:	4615      	mov	r5, r2
 800aaa2:	f012 0203 	ands.w	r2, r2, #3
 800aaa6:	4607      	mov	r7, r0
 800aaa8:	460e      	mov	r6, r1
 800aaaa:	d007      	beq.n	800aabc <__pow5mult+0x20>
 800aaac:	4c25      	ldr	r4, [pc, #148]	@ (800ab44 <__pow5mult+0xa8>)
 800aaae:	3a01      	subs	r2, #1
 800aab0:	2300      	movs	r3, #0
 800aab2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aab6:	f7ff fea7 	bl	800a808 <__multadd>
 800aaba:	4606      	mov	r6, r0
 800aabc:	10ad      	asrs	r5, r5, #2
 800aabe:	d03d      	beq.n	800ab3c <__pow5mult+0xa0>
 800aac0:	69fc      	ldr	r4, [r7, #28]
 800aac2:	b97c      	cbnz	r4, 800aae4 <__pow5mult+0x48>
 800aac4:	2010      	movs	r0, #16
 800aac6:	f7ff fd87 	bl	800a5d8 <malloc>
 800aaca:	4602      	mov	r2, r0
 800aacc:	61f8      	str	r0, [r7, #28]
 800aace:	b928      	cbnz	r0, 800aadc <__pow5mult+0x40>
 800aad0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aad4:	4b1c      	ldr	r3, [pc, #112]	@ (800ab48 <__pow5mult+0xac>)
 800aad6:	481d      	ldr	r0, [pc, #116]	@ (800ab4c <__pow5mult+0xb0>)
 800aad8:	f000 fc3a 	bl	800b350 <__assert_func>
 800aadc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aae0:	6004      	str	r4, [r0, #0]
 800aae2:	60c4      	str	r4, [r0, #12]
 800aae4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aae8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aaec:	b94c      	cbnz	r4, 800ab02 <__pow5mult+0x66>
 800aaee:	f240 2171 	movw	r1, #625	@ 0x271
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	f7ff ff1a 	bl	800a92c <__i2b>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4604      	mov	r4, r0
 800aafc:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab00:	6003      	str	r3, [r0, #0]
 800ab02:	f04f 0900 	mov.w	r9, #0
 800ab06:	07eb      	lsls	r3, r5, #31
 800ab08:	d50a      	bpl.n	800ab20 <__pow5mult+0x84>
 800ab0a:	4631      	mov	r1, r6
 800ab0c:	4622      	mov	r2, r4
 800ab0e:	4638      	mov	r0, r7
 800ab10:	f7ff ff22 	bl	800a958 <__multiply>
 800ab14:	4680      	mov	r8, r0
 800ab16:	4631      	mov	r1, r6
 800ab18:	4638      	mov	r0, r7
 800ab1a:	f7ff fe53 	bl	800a7c4 <_Bfree>
 800ab1e:	4646      	mov	r6, r8
 800ab20:	106d      	asrs	r5, r5, #1
 800ab22:	d00b      	beq.n	800ab3c <__pow5mult+0xa0>
 800ab24:	6820      	ldr	r0, [r4, #0]
 800ab26:	b938      	cbnz	r0, 800ab38 <__pow5mult+0x9c>
 800ab28:	4622      	mov	r2, r4
 800ab2a:	4621      	mov	r1, r4
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	f7ff ff13 	bl	800a958 <__multiply>
 800ab32:	6020      	str	r0, [r4, #0]
 800ab34:	f8c0 9000 	str.w	r9, [r0]
 800ab38:	4604      	mov	r4, r0
 800ab3a:	e7e4      	b.n	800ab06 <__pow5mult+0x6a>
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab42:	bf00      	nop
 800ab44:	0800bc4c 	.word	0x0800bc4c
 800ab48:	0800bb1b 	.word	0x0800bb1b
 800ab4c:	0800bb9b 	.word	0x0800bb9b

0800ab50 <__lshift>:
 800ab50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab54:	460c      	mov	r4, r1
 800ab56:	4607      	mov	r7, r0
 800ab58:	4691      	mov	r9, r2
 800ab5a:	6923      	ldr	r3, [r4, #16]
 800ab5c:	6849      	ldr	r1, [r1, #4]
 800ab5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab62:	68a3      	ldr	r3, [r4, #8]
 800ab64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab68:	f108 0601 	add.w	r6, r8, #1
 800ab6c:	42b3      	cmp	r3, r6
 800ab6e:	db0b      	blt.n	800ab88 <__lshift+0x38>
 800ab70:	4638      	mov	r0, r7
 800ab72:	f7ff fde7 	bl	800a744 <_Balloc>
 800ab76:	4605      	mov	r5, r0
 800ab78:	b948      	cbnz	r0, 800ab8e <__lshift+0x3e>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab80:	4b27      	ldr	r3, [pc, #156]	@ (800ac20 <__lshift+0xd0>)
 800ab82:	4828      	ldr	r0, [pc, #160]	@ (800ac24 <__lshift+0xd4>)
 800ab84:	f000 fbe4 	bl	800b350 <__assert_func>
 800ab88:	3101      	adds	r1, #1
 800ab8a:	005b      	lsls	r3, r3, #1
 800ab8c:	e7ee      	b.n	800ab6c <__lshift+0x1c>
 800ab8e:	2300      	movs	r3, #0
 800ab90:	f100 0114 	add.w	r1, r0, #20
 800ab94:	f100 0210 	add.w	r2, r0, #16
 800ab98:	4618      	mov	r0, r3
 800ab9a:	4553      	cmp	r3, sl
 800ab9c:	db33      	blt.n	800ac06 <__lshift+0xb6>
 800ab9e:	6920      	ldr	r0, [r4, #16]
 800aba0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aba4:	f104 0314 	add.w	r3, r4, #20
 800aba8:	f019 091f 	ands.w	r9, r9, #31
 800abac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abb4:	d02b      	beq.n	800ac0e <__lshift+0xbe>
 800abb6:	468a      	mov	sl, r1
 800abb8:	2200      	movs	r2, #0
 800abba:	f1c9 0e20 	rsb	lr, r9, #32
 800abbe:	6818      	ldr	r0, [r3, #0]
 800abc0:	fa00 f009 	lsl.w	r0, r0, r9
 800abc4:	4310      	orrs	r0, r2
 800abc6:	f84a 0b04 	str.w	r0, [sl], #4
 800abca:	f853 2b04 	ldr.w	r2, [r3], #4
 800abce:	459c      	cmp	ip, r3
 800abd0:	fa22 f20e 	lsr.w	r2, r2, lr
 800abd4:	d8f3      	bhi.n	800abbe <__lshift+0x6e>
 800abd6:	ebac 0304 	sub.w	r3, ip, r4
 800abda:	3b15      	subs	r3, #21
 800abdc:	f023 0303 	bic.w	r3, r3, #3
 800abe0:	3304      	adds	r3, #4
 800abe2:	f104 0015 	add.w	r0, r4, #21
 800abe6:	4560      	cmp	r0, ip
 800abe8:	bf88      	it	hi
 800abea:	2304      	movhi	r3, #4
 800abec:	50ca      	str	r2, [r1, r3]
 800abee:	b10a      	cbz	r2, 800abf4 <__lshift+0xa4>
 800abf0:	f108 0602 	add.w	r6, r8, #2
 800abf4:	3e01      	subs	r6, #1
 800abf6:	4638      	mov	r0, r7
 800abf8:	4621      	mov	r1, r4
 800abfa:	612e      	str	r6, [r5, #16]
 800abfc:	f7ff fde2 	bl	800a7c4 <_Bfree>
 800ac00:	4628      	mov	r0, r5
 800ac02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac06:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	e7c5      	b.n	800ab9a <__lshift+0x4a>
 800ac0e:	3904      	subs	r1, #4
 800ac10:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac14:	459c      	cmp	ip, r3
 800ac16:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac1a:	d8f9      	bhi.n	800ac10 <__lshift+0xc0>
 800ac1c:	e7ea      	b.n	800abf4 <__lshift+0xa4>
 800ac1e:	bf00      	nop
 800ac20:	0800bb8a 	.word	0x0800bb8a
 800ac24:	0800bb9b 	.word	0x0800bb9b

0800ac28 <__mcmp>:
 800ac28:	4603      	mov	r3, r0
 800ac2a:	690a      	ldr	r2, [r1, #16]
 800ac2c:	6900      	ldr	r0, [r0, #16]
 800ac2e:	b530      	push	{r4, r5, lr}
 800ac30:	1a80      	subs	r0, r0, r2
 800ac32:	d10e      	bne.n	800ac52 <__mcmp+0x2a>
 800ac34:	3314      	adds	r3, #20
 800ac36:	3114      	adds	r1, #20
 800ac38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ac3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac48:	4295      	cmp	r5, r2
 800ac4a:	d003      	beq.n	800ac54 <__mcmp+0x2c>
 800ac4c:	d205      	bcs.n	800ac5a <__mcmp+0x32>
 800ac4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac52:	bd30      	pop	{r4, r5, pc}
 800ac54:	42a3      	cmp	r3, r4
 800ac56:	d3f3      	bcc.n	800ac40 <__mcmp+0x18>
 800ac58:	e7fb      	b.n	800ac52 <__mcmp+0x2a>
 800ac5a:	2001      	movs	r0, #1
 800ac5c:	e7f9      	b.n	800ac52 <__mcmp+0x2a>
	...

0800ac60 <__mdiff>:
 800ac60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac64:	4689      	mov	r9, r1
 800ac66:	4606      	mov	r6, r0
 800ac68:	4611      	mov	r1, r2
 800ac6a:	4648      	mov	r0, r9
 800ac6c:	4614      	mov	r4, r2
 800ac6e:	f7ff ffdb 	bl	800ac28 <__mcmp>
 800ac72:	1e05      	subs	r5, r0, #0
 800ac74:	d112      	bne.n	800ac9c <__mdiff+0x3c>
 800ac76:	4629      	mov	r1, r5
 800ac78:	4630      	mov	r0, r6
 800ac7a:	f7ff fd63 	bl	800a744 <_Balloc>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	b928      	cbnz	r0, 800ac8e <__mdiff+0x2e>
 800ac82:	f240 2137 	movw	r1, #567	@ 0x237
 800ac86:	4b3e      	ldr	r3, [pc, #248]	@ (800ad80 <__mdiff+0x120>)
 800ac88:	483e      	ldr	r0, [pc, #248]	@ (800ad84 <__mdiff+0x124>)
 800ac8a:	f000 fb61 	bl	800b350 <__assert_func>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac94:	4610      	mov	r0, r2
 800ac96:	b003      	add	sp, #12
 800ac98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9c:	bfbc      	itt	lt
 800ac9e:	464b      	movlt	r3, r9
 800aca0:	46a1      	movlt	r9, r4
 800aca2:	4630      	mov	r0, r6
 800aca4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aca8:	bfba      	itte	lt
 800acaa:	461c      	movlt	r4, r3
 800acac:	2501      	movlt	r5, #1
 800acae:	2500      	movge	r5, #0
 800acb0:	f7ff fd48 	bl	800a744 <_Balloc>
 800acb4:	4602      	mov	r2, r0
 800acb6:	b918      	cbnz	r0, 800acc0 <__mdiff+0x60>
 800acb8:	f240 2145 	movw	r1, #581	@ 0x245
 800acbc:	4b30      	ldr	r3, [pc, #192]	@ (800ad80 <__mdiff+0x120>)
 800acbe:	e7e3      	b.n	800ac88 <__mdiff+0x28>
 800acc0:	f100 0b14 	add.w	fp, r0, #20
 800acc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800acc8:	f109 0310 	add.w	r3, r9, #16
 800accc:	60c5      	str	r5, [r0, #12]
 800acce:	f04f 0c00 	mov.w	ip, #0
 800acd2:	f109 0514 	add.w	r5, r9, #20
 800acd6:	46d9      	mov	r9, fp
 800acd8:	6926      	ldr	r6, [r4, #16]
 800acda:	f104 0e14 	add.w	lr, r4, #20
 800acde:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ace2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ace6:	9301      	str	r3, [sp, #4]
 800ace8:	9b01      	ldr	r3, [sp, #4]
 800acea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800acee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800acf2:	b281      	uxth	r1, r0
 800acf4:	9301      	str	r3, [sp, #4]
 800acf6:	fa1f f38a 	uxth.w	r3, sl
 800acfa:	1a5b      	subs	r3, r3, r1
 800acfc:	0c00      	lsrs	r0, r0, #16
 800acfe:	4463      	add	r3, ip
 800ad00:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad04:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad0e:	4576      	cmp	r6, lr
 800ad10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad14:	f849 3b04 	str.w	r3, [r9], #4
 800ad18:	d8e6      	bhi.n	800ace8 <__mdiff+0x88>
 800ad1a:	1b33      	subs	r3, r6, r4
 800ad1c:	3b15      	subs	r3, #21
 800ad1e:	f023 0303 	bic.w	r3, r3, #3
 800ad22:	3415      	adds	r4, #21
 800ad24:	3304      	adds	r3, #4
 800ad26:	42a6      	cmp	r6, r4
 800ad28:	bf38      	it	cc
 800ad2a:	2304      	movcc	r3, #4
 800ad2c:	441d      	add	r5, r3
 800ad2e:	445b      	add	r3, fp
 800ad30:	461e      	mov	r6, r3
 800ad32:	462c      	mov	r4, r5
 800ad34:	4544      	cmp	r4, r8
 800ad36:	d30e      	bcc.n	800ad56 <__mdiff+0xf6>
 800ad38:	f108 0103 	add.w	r1, r8, #3
 800ad3c:	1b49      	subs	r1, r1, r5
 800ad3e:	f021 0103 	bic.w	r1, r1, #3
 800ad42:	3d03      	subs	r5, #3
 800ad44:	45a8      	cmp	r8, r5
 800ad46:	bf38      	it	cc
 800ad48:	2100      	movcc	r1, #0
 800ad4a:	440b      	add	r3, r1
 800ad4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad50:	b199      	cbz	r1, 800ad7a <__mdiff+0x11a>
 800ad52:	6117      	str	r7, [r2, #16]
 800ad54:	e79e      	b.n	800ac94 <__mdiff+0x34>
 800ad56:	46e6      	mov	lr, ip
 800ad58:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad5c:	fa1f fc81 	uxth.w	ip, r1
 800ad60:	44f4      	add	ip, lr
 800ad62:	0c08      	lsrs	r0, r1, #16
 800ad64:	4471      	add	r1, lr
 800ad66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad6a:	b289      	uxth	r1, r1
 800ad6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad74:	f846 1b04 	str.w	r1, [r6], #4
 800ad78:	e7dc      	b.n	800ad34 <__mdiff+0xd4>
 800ad7a:	3f01      	subs	r7, #1
 800ad7c:	e7e6      	b.n	800ad4c <__mdiff+0xec>
 800ad7e:	bf00      	nop
 800ad80:	0800bb8a 	.word	0x0800bb8a
 800ad84:	0800bb9b 	.word	0x0800bb9b

0800ad88 <__d2b>:
 800ad88:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ad8c:	2101      	movs	r1, #1
 800ad8e:	4690      	mov	r8, r2
 800ad90:	4699      	mov	r9, r3
 800ad92:	9e08      	ldr	r6, [sp, #32]
 800ad94:	f7ff fcd6 	bl	800a744 <_Balloc>
 800ad98:	4604      	mov	r4, r0
 800ad9a:	b930      	cbnz	r0, 800adaa <__d2b+0x22>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	f240 310f 	movw	r1, #783	@ 0x30f
 800ada2:	4b23      	ldr	r3, [pc, #140]	@ (800ae30 <__d2b+0xa8>)
 800ada4:	4823      	ldr	r0, [pc, #140]	@ (800ae34 <__d2b+0xac>)
 800ada6:	f000 fad3 	bl	800b350 <__assert_func>
 800adaa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800adae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adb2:	b10d      	cbz	r5, 800adb8 <__d2b+0x30>
 800adb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	f1b8 0300 	subs.w	r3, r8, #0
 800adbe:	d024      	beq.n	800ae0a <__d2b+0x82>
 800adc0:	4668      	mov	r0, sp
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	f7ff fd85 	bl	800a8d2 <__lo0bits>
 800adc8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800adcc:	b1d8      	cbz	r0, 800ae06 <__d2b+0x7e>
 800adce:	f1c0 0320 	rsb	r3, r0, #32
 800add2:	fa02 f303 	lsl.w	r3, r2, r3
 800add6:	430b      	orrs	r3, r1
 800add8:	40c2      	lsrs	r2, r0
 800adda:	6163      	str	r3, [r4, #20]
 800addc:	9201      	str	r2, [sp, #4]
 800adde:	9b01      	ldr	r3, [sp, #4]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	bf0c      	ite	eq
 800ade4:	2201      	moveq	r2, #1
 800ade6:	2202      	movne	r2, #2
 800ade8:	61a3      	str	r3, [r4, #24]
 800adea:	6122      	str	r2, [r4, #16]
 800adec:	b1ad      	cbz	r5, 800ae1a <__d2b+0x92>
 800adee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800adf2:	4405      	add	r5, r0
 800adf4:	6035      	str	r5, [r6, #0]
 800adf6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800adfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adfc:	6018      	str	r0, [r3, #0]
 800adfe:	4620      	mov	r0, r4
 800ae00:	b002      	add	sp, #8
 800ae02:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800ae06:	6161      	str	r1, [r4, #20]
 800ae08:	e7e9      	b.n	800adde <__d2b+0x56>
 800ae0a:	a801      	add	r0, sp, #4
 800ae0c:	f7ff fd61 	bl	800a8d2 <__lo0bits>
 800ae10:	9b01      	ldr	r3, [sp, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	6163      	str	r3, [r4, #20]
 800ae16:	3020      	adds	r0, #32
 800ae18:	e7e7      	b.n	800adea <__d2b+0x62>
 800ae1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae22:	6030      	str	r0, [r6, #0]
 800ae24:	6918      	ldr	r0, [r3, #16]
 800ae26:	f7ff fd35 	bl	800a894 <__hi0bits>
 800ae2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae2e:	e7e4      	b.n	800adfa <__d2b+0x72>
 800ae30:	0800bb8a 	.word	0x0800bb8a
 800ae34:	0800bb9b 	.word	0x0800bb9b

0800ae38 <__sfputc_r>:
 800ae38:	6893      	ldr	r3, [r2, #8]
 800ae3a:	b410      	push	{r4}
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	6093      	str	r3, [r2, #8]
 800ae42:	da07      	bge.n	800ae54 <__sfputc_r+0x1c>
 800ae44:	6994      	ldr	r4, [r2, #24]
 800ae46:	42a3      	cmp	r3, r4
 800ae48:	db01      	blt.n	800ae4e <__sfputc_r+0x16>
 800ae4a:	290a      	cmp	r1, #10
 800ae4c:	d102      	bne.n	800ae54 <__sfputc_r+0x1c>
 800ae4e:	bc10      	pop	{r4}
 800ae50:	f000 b9da 	b.w	800b208 <__swbuf_r>
 800ae54:	6813      	ldr	r3, [r2, #0]
 800ae56:	1c58      	adds	r0, r3, #1
 800ae58:	6010      	str	r0, [r2, #0]
 800ae5a:	7019      	strb	r1, [r3, #0]
 800ae5c:	4608      	mov	r0, r1
 800ae5e:	bc10      	pop	{r4}
 800ae60:	4770      	bx	lr

0800ae62 <__sfputs_r>:
 800ae62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae64:	4606      	mov	r6, r0
 800ae66:	460f      	mov	r7, r1
 800ae68:	4614      	mov	r4, r2
 800ae6a:	18d5      	adds	r5, r2, r3
 800ae6c:	42ac      	cmp	r4, r5
 800ae6e:	d101      	bne.n	800ae74 <__sfputs_r+0x12>
 800ae70:	2000      	movs	r0, #0
 800ae72:	e007      	b.n	800ae84 <__sfputs_r+0x22>
 800ae74:	463a      	mov	r2, r7
 800ae76:	4630      	mov	r0, r6
 800ae78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae7c:	f7ff ffdc 	bl	800ae38 <__sfputc_r>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d1f3      	bne.n	800ae6c <__sfputs_r+0xa>
 800ae84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae88 <_vfiprintf_r>:
 800ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	460d      	mov	r5, r1
 800ae8e:	4614      	mov	r4, r2
 800ae90:	4698      	mov	r8, r3
 800ae92:	4606      	mov	r6, r0
 800ae94:	b09d      	sub	sp, #116	@ 0x74
 800ae96:	b118      	cbz	r0, 800aea0 <_vfiprintf_r+0x18>
 800ae98:	6a03      	ldr	r3, [r0, #32]
 800ae9a:	b90b      	cbnz	r3, 800aea0 <_vfiprintf_r+0x18>
 800ae9c:	f7fe fb72 	bl	8009584 <__sinit>
 800aea0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aea2:	07d9      	lsls	r1, r3, #31
 800aea4:	d405      	bmi.n	800aeb2 <_vfiprintf_r+0x2a>
 800aea6:	89ab      	ldrh	r3, [r5, #12]
 800aea8:	059a      	lsls	r2, r3, #22
 800aeaa:	d402      	bmi.n	800aeb2 <_vfiprintf_r+0x2a>
 800aeac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aeae:	f7fe fcd0 	bl	8009852 <__retarget_lock_acquire_recursive>
 800aeb2:	89ab      	ldrh	r3, [r5, #12]
 800aeb4:	071b      	lsls	r3, r3, #28
 800aeb6:	d501      	bpl.n	800aebc <_vfiprintf_r+0x34>
 800aeb8:	692b      	ldr	r3, [r5, #16]
 800aeba:	b99b      	cbnz	r3, 800aee4 <_vfiprintf_r+0x5c>
 800aebc:	4629      	mov	r1, r5
 800aebe:	4630      	mov	r0, r6
 800aec0:	f000 f9e0 	bl	800b284 <__swsetup_r>
 800aec4:	b170      	cbz	r0, 800aee4 <_vfiprintf_r+0x5c>
 800aec6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aec8:	07dc      	lsls	r4, r3, #31
 800aeca:	d504      	bpl.n	800aed6 <_vfiprintf_r+0x4e>
 800aecc:	f04f 30ff 	mov.w	r0, #4294967295
 800aed0:	b01d      	add	sp, #116	@ 0x74
 800aed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed6:	89ab      	ldrh	r3, [r5, #12]
 800aed8:	0598      	lsls	r0, r3, #22
 800aeda:	d4f7      	bmi.n	800aecc <_vfiprintf_r+0x44>
 800aedc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aede:	f7fe fcb9 	bl	8009854 <__retarget_lock_release_recursive>
 800aee2:	e7f3      	b.n	800aecc <_vfiprintf_r+0x44>
 800aee4:	2300      	movs	r3, #0
 800aee6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aee8:	2320      	movs	r3, #32
 800aeea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aeee:	2330      	movs	r3, #48	@ 0x30
 800aef0:	f04f 0901 	mov.w	r9, #1
 800aef4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aef8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b0a4 <_vfiprintf_r+0x21c>
 800aefc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af00:	4623      	mov	r3, r4
 800af02:	469a      	mov	sl, r3
 800af04:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af08:	b10a      	cbz	r2, 800af0e <_vfiprintf_r+0x86>
 800af0a:	2a25      	cmp	r2, #37	@ 0x25
 800af0c:	d1f9      	bne.n	800af02 <_vfiprintf_r+0x7a>
 800af0e:	ebba 0b04 	subs.w	fp, sl, r4
 800af12:	d00b      	beq.n	800af2c <_vfiprintf_r+0xa4>
 800af14:	465b      	mov	r3, fp
 800af16:	4622      	mov	r2, r4
 800af18:	4629      	mov	r1, r5
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7ff ffa1 	bl	800ae62 <__sfputs_r>
 800af20:	3001      	adds	r0, #1
 800af22:	f000 80a7 	beq.w	800b074 <_vfiprintf_r+0x1ec>
 800af26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af28:	445a      	add	r2, fp
 800af2a:	9209      	str	r2, [sp, #36]	@ 0x24
 800af2c:	f89a 3000 	ldrb.w	r3, [sl]
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 809f 	beq.w	800b074 <_vfiprintf_r+0x1ec>
 800af36:	2300      	movs	r3, #0
 800af38:	f04f 32ff 	mov.w	r2, #4294967295
 800af3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af40:	f10a 0a01 	add.w	sl, sl, #1
 800af44:	9304      	str	r3, [sp, #16]
 800af46:	9307      	str	r3, [sp, #28]
 800af48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af4c:	931a      	str	r3, [sp, #104]	@ 0x68
 800af4e:	4654      	mov	r4, sl
 800af50:	2205      	movs	r2, #5
 800af52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af56:	4853      	ldr	r0, [pc, #332]	@ (800b0a4 <_vfiprintf_r+0x21c>)
 800af58:	f7fe fc7d 	bl	8009856 <memchr>
 800af5c:	9a04      	ldr	r2, [sp, #16]
 800af5e:	b9d8      	cbnz	r0, 800af98 <_vfiprintf_r+0x110>
 800af60:	06d1      	lsls	r1, r2, #27
 800af62:	bf44      	itt	mi
 800af64:	2320      	movmi	r3, #32
 800af66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af6a:	0713      	lsls	r3, r2, #28
 800af6c:	bf44      	itt	mi
 800af6e:	232b      	movmi	r3, #43	@ 0x2b
 800af70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af74:	f89a 3000 	ldrb.w	r3, [sl]
 800af78:	2b2a      	cmp	r3, #42	@ 0x2a
 800af7a:	d015      	beq.n	800afa8 <_vfiprintf_r+0x120>
 800af7c:	4654      	mov	r4, sl
 800af7e:	2000      	movs	r0, #0
 800af80:	f04f 0c0a 	mov.w	ip, #10
 800af84:	9a07      	ldr	r2, [sp, #28]
 800af86:	4621      	mov	r1, r4
 800af88:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af8c:	3b30      	subs	r3, #48	@ 0x30
 800af8e:	2b09      	cmp	r3, #9
 800af90:	d94b      	bls.n	800b02a <_vfiprintf_r+0x1a2>
 800af92:	b1b0      	cbz	r0, 800afc2 <_vfiprintf_r+0x13a>
 800af94:	9207      	str	r2, [sp, #28]
 800af96:	e014      	b.n	800afc2 <_vfiprintf_r+0x13a>
 800af98:	eba0 0308 	sub.w	r3, r0, r8
 800af9c:	fa09 f303 	lsl.w	r3, r9, r3
 800afa0:	4313      	orrs	r3, r2
 800afa2:	46a2      	mov	sl, r4
 800afa4:	9304      	str	r3, [sp, #16]
 800afa6:	e7d2      	b.n	800af4e <_vfiprintf_r+0xc6>
 800afa8:	9b03      	ldr	r3, [sp, #12]
 800afaa:	1d19      	adds	r1, r3, #4
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	9103      	str	r1, [sp, #12]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	bfbb      	ittet	lt
 800afb4:	425b      	neglt	r3, r3
 800afb6:	f042 0202 	orrlt.w	r2, r2, #2
 800afba:	9307      	strge	r3, [sp, #28]
 800afbc:	9307      	strlt	r3, [sp, #28]
 800afbe:	bfb8      	it	lt
 800afc0:	9204      	strlt	r2, [sp, #16]
 800afc2:	7823      	ldrb	r3, [r4, #0]
 800afc4:	2b2e      	cmp	r3, #46	@ 0x2e
 800afc6:	d10a      	bne.n	800afde <_vfiprintf_r+0x156>
 800afc8:	7863      	ldrb	r3, [r4, #1]
 800afca:	2b2a      	cmp	r3, #42	@ 0x2a
 800afcc:	d132      	bne.n	800b034 <_vfiprintf_r+0x1ac>
 800afce:	9b03      	ldr	r3, [sp, #12]
 800afd0:	3402      	adds	r4, #2
 800afd2:	1d1a      	adds	r2, r3, #4
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	9203      	str	r2, [sp, #12]
 800afd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afdc:	9305      	str	r3, [sp, #20]
 800afde:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b0a8 <_vfiprintf_r+0x220>
 800afe2:	2203      	movs	r2, #3
 800afe4:	4650      	mov	r0, sl
 800afe6:	7821      	ldrb	r1, [r4, #0]
 800afe8:	f7fe fc35 	bl	8009856 <memchr>
 800afec:	b138      	cbz	r0, 800affe <_vfiprintf_r+0x176>
 800afee:	2240      	movs	r2, #64	@ 0x40
 800aff0:	9b04      	ldr	r3, [sp, #16]
 800aff2:	eba0 000a 	sub.w	r0, r0, sl
 800aff6:	4082      	lsls	r2, r0
 800aff8:	4313      	orrs	r3, r2
 800affa:	3401      	adds	r4, #1
 800affc:	9304      	str	r3, [sp, #16]
 800affe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b002:	2206      	movs	r2, #6
 800b004:	4829      	ldr	r0, [pc, #164]	@ (800b0ac <_vfiprintf_r+0x224>)
 800b006:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b00a:	f7fe fc24 	bl	8009856 <memchr>
 800b00e:	2800      	cmp	r0, #0
 800b010:	d03f      	beq.n	800b092 <_vfiprintf_r+0x20a>
 800b012:	4b27      	ldr	r3, [pc, #156]	@ (800b0b0 <_vfiprintf_r+0x228>)
 800b014:	bb1b      	cbnz	r3, 800b05e <_vfiprintf_r+0x1d6>
 800b016:	9b03      	ldr	r3, [sp, #12]
 800b018:	3307      	adds	r3, #7
 800b01a:	f023 0307 	bic.w	r3, r3, #7
 800b01e:	3308      	adds	r3, #8
 800b020:	9303      	str	r3, [sp, #12]
 800b022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b024:	443b      	add	r3, r7
 800b026:	9309      	str	r3, [sp, #36]	@ 0x24
 800b028:	e76a      	b.n	800af00 <_vfiprintf_r+0x78>
 800b02a:	460c      	mov	r4, r1
 800b02c:	2001      	movs	r0, #1
 800b02e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b032:	e7a8      	b.n	800af86 <_vfiprintf_r+0xfe>
 800b034:	2300      	movs	r3, #0
 800b036:	f04f 0c0a 	mov.w	ip, #10
 800b03a:	4619      	mov	r1, r3
 800b03c:	3401      	adds	r4, #1
 800b03e:	9305      	str	r3, [sp, #20]
 800b040:	4620      	mov	r0, r4
 800b042:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b046:	3a30      	subs	r2, #48	@ 0x30
 800b048:	2a09      	cmp	r2, #9
 800b04a:	d903      	bls.n	800b054 <_vfiprintf_r+0x1cc>
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d0c6      	beq.n	800afde <_vfiprintf_r+0x156>
 800b050:	9105      	str	r1, [sp, #20]
 800b052:	e7c4      	b.n	800afde <_vfiprintf_r+0x156>
 800b054:	4604      	mov	r4, r0
 800b056:	2301      	movs	r3, #1
 800b058:	fb0c 2101 	mla	r1, ip, r1, r2
 800b05c:	e7f0      	b.n	800b040 <_vfiprintf_r+0x1b8>
 800b05e:	ab03      	add	r3, sp, #12
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	462a      	mov	r2, r5
 800b064:	4630      	mov	r0, r6
 800b066:	4b13      	ldr	r3, [pc, #76]	@ (800b0b4 <_vfiprintf_r+0x22c>)
 800b068:	a904      	add	r1, sp, #16
 800b06a:	f7fd fe43 	bl	8008cf4 <_printf_float>
 800b06e:	4607      	mov	r7, r0
 800b070:	1c78      	adds	r0, r7, #1
 800b072:	d1d6      	bne.n	800b022 <_vfiprintf_r+0x19a>
 800b074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b076:	07d9      	lsls	r1, r3, #31
 800b078:	d405      	bmi.n	800b086 <_vfiprintf_r+0x1fe>
 800b07a:	89ab      	ldrh	r3, [r5, #12]
 800b07c:	059a      	lsls	r2, r3, #22
 800b07e:	d402      	bmi.n	800b086 <_vfiprintf_r+0x1fe>
 800b080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b082:	f7fe fbe7 	bl	8009854 <__retarget_lock_release_recursive>
 800b086:	89ab      	ldrh	r3, [r5, #12]
 800b088:	065b      	lsls	r3, r3, #25
 800b08a:	f53f af1f 	bmi.w	800aecc <_vfiprintf_r+0x44>
 800b08e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b090:	e71e      	b.n	800aed0 <_vfiprintf_r+0x48>
 800b092:	ab03      	add	r3, sp, #12
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	462a      	mov	r2, r5
 800b098:	4630      	mov	r0, r6
 800b09a:	4b06      	ldr	r3, [pc, #24]	@ (800b0b4 <_vfiprintf_r+0x22c>)
 800b09c:	a904      	add	r1, sp, #16
 800b09e:	f7fe f8c7 	bl	8009230 <_printf_i>
 800b0a2:	e7e4      	b.n	800b06e <_vfiprintf_r+0x1e6>
 800b0a4:	0800bbf4 	.word	0x0800bbf4
 800b0a8:	0800bbfa 	.word	0x0800bbfa
 800b0ac:	0800bbfe 	.word	0x0800bbfe
 800b0b0:	08008cf5 	.word	0x08008cf5
 800b0b4:	0800ae63 	.word	0x0800ae63

0800b0b8 <__sflush_r>:
 800b0b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0be:	0716      	lsls	r6, r2, #28
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	d454      	bmi.n	800b170 <__sflush_r+0xb8>
 800b0c6:	684b      	ldr	r3, [r1, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	dc02      	bgt.n	800b0d2 <__sflush_r+0x1a>
 800b0cc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	dd48      	ble.n	800b164 <__sflush_r+0xac>
 800b0d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0d4:	2e00      	cmp	r6, #0
 800b0d6:	d045      	beq.n	800b164 <__sflush_r+0xac>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0de:	682f      	ldr	r7, [r5, #0]
 800b0e0:	6a21      	ldr	r1, [r4, #32]
 800b0e2:	602b      	str	r3, [r5, #0]
 800b0e4:	d030      	beq.n	800b148 <__sflush_r+0x90>
 800b0e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	0759      	lsls	r1, r3, #29
 800b0ec:	d505      	bpl.n	800b0fa <__sflush_r+0x42>
 800b0ee:	6863      	ldr	r3, [r4, #4]
 800b0f0:	1ad2      	subs	r2, r2, r3
 800b0f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0f4:	b10b      	cbz	r3, 800b0fa <__sflush_r+0x42>
 800b0f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0f8:	1ad2      	subs	r2, r2, r3
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b100:	6a21      	ldr	r1, [r4, #32]
 800b102:	47b0      	blx	r6
 800b104:	1c43      	adds	r3, r0, #1
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	d106      	bne.n	800b118 <__sflush_r+0x60>
 800b10a:	6829      	ldr	r1, [r5, #0]
 800b10c:	291d      	cmp	r1, #29
 800b10e:	d82b      	bhi.n	800b168 <__sflush_r+0xb0>
 800b110:	4a28      	ldr	r2, [pc, #160]	@ (800b1b4 <__sflush_r+0xfc>)
 800b112:	40ca      	lsrs	r2, r1
 800b114:	07d6      	lsls	r6, r2, #31
 800b116:	d527      	bpl.n	800b168 <__sflush_r+0xb0>
 800b118:	2200      	movs	r2, #0
 800b11a:	6062      	str	r2, [r4, #4]
 800b11c:	6922      	ldr	r2, [r4, #16]
 800b11e:	04d9      	lsls	r1, r3, #19
 800b120:	6022      	str	r2, [r4, #0]
 800b122:	d504      	bpl.n	800b12e <__sflush_r+0x76>
 800b124:	1c42      	adds	r2, r0, #1
 800b126:	d101      	bne.n	800b12c <__sflush_r+0x74>
 800b128:	682b      	ldr	r3, [r5, #0]
 800b12a:	b903      	cbnz	r3, 800b12e <__sflush_r+0x76>
 800b12c:	6560      	str	r0, [r4, #84]	@ 0x54
 800b12e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b130:	602f      	str	r7, [r5, #0]
 800b132:	b1b9      	cbz	r1, 800b164 <__sflush_r+0xac>
 800b134:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b138:	4299      	cmp	r1, r3
 800b13a:	d002      	beq.n	800b142 <__sflush_r+0x8a>
 800b13c:	4628      	mov	r0, r5
 800b13e:	f7ff fa03 	bl	800a548 <_free_r>
 800b142:	2300      	movs	r3, #0
 800b144:	6363      	str	r3, [r4, #52]	@ 0x34
 800b146:	e00d      	b.n	800b164 <__sflush_r+0xac>
 800b148:	2301      	movs	r3, #1
 800b14a:	4628      	mov	r0, r5
 800b14c:	47b0      	blx	r6
 800b14e:	4602      	mov	r2, r0
 800b150:	1c50      	adds	r0, r2, #1
 800b152:	d1c9      	bne.n	800b0e8 <__sflush_r+0x30>
 800b154:	682b      	ldr	r3, [r5, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d0c6      	beq.n	800b0e8 <__sflush_r+0x30>
 800b15a:	2b1d      	cmp	r3, #29
 800b15c:	d001      	beq.n	800b162 <__sflush_r+0xaa>
 800b15e:	2b16      	cmp	r3, #22
 800b160:	d11d      	bne.n	800b19e <__sflush_r+0xe6>
 800b162:	602f      	str	r7, [r5, #0]
 800b164:	2000      	movs	r0, #0
 800b166:	e021      	b.n	800b1ac <__sflush_r+0xf4>
 800b168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b16c:	b21b      	sxth	r3, r3
 800b16e:	e01a      	b.n	800b1a6 <__sflush_r+0xee>
 800b170:	690f      	ldr	r7, [r1, #16]
 800b172:	2f00      	cmp	r7, #0
 800b174:	d0f6      	beq.n	800b164 <__sflush_r+0xac>
 800b176:	0793      	lsls	r3, r2, #30
 800b178:	bf18      	it	ne
 800b17a:	2300      	movne	r3, #0
 800b17c:	680e      	ldr	r6, [r1, #0]
 800b17e:	bf08      	it	eq
 800b180:	694b      	ldreq	r3, [r1, #20]
 800b182:	1bf6      	subs	r6, r6, r7
 800b184:	600f      	str	r7, [r1, #0]
 800b186:	608b      	str	r3, [r1, #8]
 800b188:	2e00      	cmp	r6, #0
 800b18a:	ddeb      	ble.n	800b164 <__sflush_r+0xac>
 800b18c:	4633      	mov	r3, r6
 800b18e:	463a      	mov	r2, r7
 800b190:	4628      	mov	r0, r5
 800b192:	6a21      	ldr	r1, [r4, #32]
 800b194:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b198:	47e0      	blx	ip
 800b19a:	2800      	cmp	r0, #0
 800b19c:	dc07      	bgt.n	800b1ae <__sflush_r+0xf6>
 800b19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1aa:	81a3      	strh	r3, [r4, #12]
 800b1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1ae:	4407      	add	r7, r0
 800b1b0:	1a36      	subs	r6, r6, r0
 800b1b2:	e7e9      	b.n	800b188 <__sflush_r+0xd0>
 800b1b4:	20400001 	.word	0x20400001

0800b1b8 <_fflush_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	690b      	ldr	r3, [r1, #16]
 800b1bc:	4605      	mov	r5, r0
 800b1be:	460c      	mov	r4, r1
 800b1c0:	b913      	cbnz	r3, 800b1c8 <_fflush_r+0x10>
 800b1c2:	2500      	movs	r5, #0
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	bd38      	pop	{r3, r4, r5, pc}
 800b1c8:	b118      	cbz	r0, 800b1d2 <_fflush_r+0x1a>
 800b1ca:	6a03      	ldr	r3, [r0, #32]
 800b1cc:	b90b      	cbnz	r3, 800b1d2 <_fflush_r+0x1a>
 800b1ce:	f7fe f9d9 	bl	8009584 <__sinit>
 800b1d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d0f3      	beq.n	800b1c2 <_fflush_r+0xa>
 800b1da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1dc:	07d0      	lsls	r0, r2, #31
 800b1de:	d404      	bmi.n	800b1ea <_fflush_r+0x32>
 800b1e0:	0599      	lsls	r1, r3, #22
 800b1e2:	d402      	bmi.n	800b1ea <_fflush_r+0x32>
 800b1e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1e6:	f7fe fb34 	bl	8009852 <__retarget_lock_acquire_recursive>
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	f7ff ff63 	bl	800b0b8 <__sflush_r>
 800b1f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1f4:	4605      	mov	r5, r0
 800b1f6:	07da      	lsls	r2, r3, #31
 800b1f8:	d4e4      	bmi.n	800b1c4 <_fflush_r+0xc>
 800b1fa:	89a3      	ldrh	r3, [r4, #12]
 800b1fc:	059b      	lsls	r3, r3, #22
 800b1fe:	d4e1      	bmi.n	800b1c4 <_fflush_r+0xc>
 800b200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b202:	f7fe fb27 	bl	8009854 <__retarget_lock_release_recursive>
 800b206:	e7dd      	b.n	800b1c4 <_fflush_r+0xc>

0800b208 <__swbuf_r>:
 800b208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20a:	460e      	mov	r6, r1
 800b20c:	4614      	mov	r4, r2
 800b20e:	4605      	mov	r5, r0
 800b210:	b118      	cbz	r0, 800b21a <__swbuf_r+0x12>
 800b212:	6a03      	ldr	r3, [r0, #32]
 800b214:	b90b      	cbnz	r3, 800b21a <__swbuf_r+0x12>
 800b216:	f7fe f9b5 	bl	8009584 <__sinit>
 800b21a:	69a3      	ldr	r3, [r4, #24]
 800b21c:	60a3      	str	r3, [r4, #8]
 800b21e:	89a3      	ldrh	r3, [r4, #12]
 800b220:	071a      	lsls	r2, r3, #28
 800b222:	d501      	bpl.n	800b228 <__swbuf_r+0x20>
 800b224:	6923      	ldr	r3, [r4, #16]
 800b226:	b943      	cbnz	r3, 800b23a <__swbuf_r+0x32>
 800b228:	4621      	mov	r1, r4
 800b22a:	4628      	mov	r0, r5
 800b22c:	f000 f82a 	bl	800b284 <__swsetup_r>
 800b230:	b118      	cbz	r0, 800b23a <__swbuf_r+0x32>
 800b232:	f04f 37ff 	mov.w	r7, #4294967295
 800b236:	4638      	mov	r0, r7
 800b238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b23a:	6823      	ldr	r3, [r4, #0]
 800b23c:	6922      	ldr	r2, [r4, #16]
 800b23e:	b2f6      	uxtb	r6, r6
 800b240:	1a98      	subs	r0, r3, r2
 800b242:	6963      	ldr	r3, [r4, #20]
 800b244:	4637      	mov	r7, r6
 800b246:	4283      	cmp	r3, r0
 800b248:	dc05      	bgt.n	800b256 <__swbuf_r+0x4e>
 800b24a:	4621      	mov	r1, r4
 800b24c:	4628      	mov	r0, r5
 800b24e:	f7ff ffb3 	bl	800b1b8 <_fflush_r>
 800b252:	2800      	cmp	r0, #0
 800b254:	d1ed      	bne.n	800b232 <__swbuf_r+0x2a>
 800b256:	68a3      	ldr	r3, [r4, #8]
 800b258:	3b01      	subs	r3, #1
 800b25a:	60a3      	str	r3, [r4, #8]
 800b25c:	6823      	ldr	r3, [r4, #0]
 800b25e:	1c5a      	adds	r2, r3, #1
 800b260:	6022      	str	r2, [r4, #0]
 800b262:	701e      	strb	r6, [r3, #0]
 800b264:	6962      	ldr	r2, [r4, #20]
 800b266:	1c43      	adds	r3, r0, #1
 800b268:	429a      	cmp	r2, r3
 800b26a:	d004      	beq.n	800b276 <__swbuf_r+0x6e>
 800b26c:	89a3      	ldrh	r3, [r4, #12]
 800b26e:	07db      	lsls	r3, r3, #31
 800b270:	d5e1      	bpl.n	800b236 <__swbuf_r+0x2e>
 800b272:	2e0a      	cmp	r6, #10
 800b274:	d1df      	bne.n	800b236 <__swbuf_r+0x2e>
 800b276:	4621      	mov	r1, r4
 800b278:	4628      	mov	r0, r5
 800b27a:	f7ff ff9d 	bl	800b1b8 <_fflush_r>
 800b27e:	2800      	cmp	r0, #0
 800b280:	d0d9      	beq.n	800b236 <__swbuf_r+0x2e>
 800b282:	e7d6      	b.n	800b232 <__swbuf_r+0x2a>

0800b284 <__swsetup_r>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	4b29      	ldr	r3, [pc, #164]	@ (800b32c <__swsetup_r+0xa8>)
 800b288:	4605      	mov	r5, r0
 800b28a:	6818      	ldr	r0, [r3, #0]
 800b28c:	460c      	mov	r4, r1
 800b28e:	b118      	cbz	r0, 800b298 <__swsetup_r+0x14>
 800b290:	6a03      	ldr	r3, [r0, #32]
 800b292:	b90b      	cbnz	r3, 800b298 <__swsetup_r+0x14>
 800b294:	f7fe f976 	bl	8009584 <__sinit>
 800b298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b29c:	0719      	lsls	r1, r3, #28
 800b29e:	d422      	bmi.n	800b2e6 <__swsetup_r+0x62>
 800b2a0:	06da      	lsls	r2, r3, #27
 800b2a2:	d407      	bmi.n	800b2b4 <__swsetup_r+0x30>
 800b2a4:	2209      	movs	r2, #9
 800b2a6:	602a      	str	r2, [r5, #0]
 800b2a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b0:	81a3      	strh	r3, [r4, #12]
 800b2b2:	e033      	b.n	800b31c <__swsetup_r+0x98>
 800b2b4:	0758      	lsls	r0, r3, #29
 800b2b6:	d512      	bpl.n	800b2de <__swsetup_r+0x5a>
 800b2b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2ba:	b141      	cbz	r1, 800b2ce <__swsetup_r+0x4a>
 800b2bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2c0:	4299      	cmp	r1, r3
 800b2c2:	d002      	beq.n	800b2ca <__swsetup_r+0x46>
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	f7ff f93f 	bl	800a548 <_free_r>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2ce:	89a3      	ldrh	r3, [r4, #12]
 800b2d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b2d4:	81a3      	strh	r3, [r4, #12]
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	6063      	str	r3, [r4, #4]
 800b2da:	6923      	ldr	r3, [r4, #16]
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	89a3      	ldrh	r3, [r4, #12]
 800b2e0:	f043 0308 	orr.w	r3, r3, #8
 800b2e4:	81a3      	strh	r3, [r4, #12]
 800b2e6:	6923      	ldr	r3, [r4, #16]
 800b2e8:	b94b      	cbnz	r3, 800b2fe <__swsetup_r+0x7a>
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2f4:	d003      	beq.n	800b2fe <__swsetup_r+0x7a>
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	f000 f8b2 	bl	800b462 <__smakebuf_r>
 800b2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b302:	f013 0201 	ands.w	r2, r3, #1
 800b306:	d00a      	beq.n	800b31e <__swsetup_r+0x9a>
 800b308:	2200      	movs	r2, #0
 800b30a:	60a2      	str	r2, [r4, #8]
 800b30c:	6962      	ldr	r2, [r4, #20]
 800b30e:	4252      	negs	r2, r2
 800b310:	61a2      	str	r2, [r4, #24]
 800b312:	6922      	ldr	r2, [r4, #16]
 800b314:	b942      	cbnz	r2, 800b328 <__swsetup_r+0xa4>
 800b316:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b31a:	d1c5      	bne.n	800b2a8 <__swsetup_r+0x24>
 800b31c:	bd38      	pop	{r3, r4, r5, pc}
 800b31e:	0799      	lsls	r1, r3, #30
 800b320:	bf58      	it	pl
 800b322:	6962      	ldrpl	r2, [r4, #20]
 800b324:	60a2      	str	r2, [r4, #8]
 800b326:	e7f4      	b.n	800b312 <__swsetup_r+0x8e>
 800b328:	2000      	movs	r0, #0
 800b32a:	e7f7      	b.n	800b31c <__swsetup_r+0x98>
 800b32c:	20000034 	.word	0x20000034

0800b330 <_sbrk_r>:
 800b330:	b538      	push	{r3, r4, r5, lr}
 800b332:	2300      	movs	r3, #0
 800b334:	4d05      	ldr	r5, [pc, #20]	@ (800b34c <_sbrk_r+0x1c>)
 800b336:	4604      	mov	r4, r0
 800b338:	4608      	mov	r0, r1
 800b33a:	602b      	str	r3, [r5, #0]
 800b33c:	f7f6 fea8 	bl	8002090 <_sbrk>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d102      	bne.n	800b34a <_sbrk_r+0x1a>
 800b344:	682b      	ldr	r3, [r5, #0]
 800b346:	b103      	cbz	r3, 800b34a <_sbrk_r+0x1a>
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	20001ee0 	.word	0x20001ee0

0800b350 <__assert_func>:
 800b350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b352:	4614      	mov	r4, r2
 800b354:	461a      	mov	r2, r3
 800b356:	4b09      	ldr	r3, [pc, #36]	@ (800b37c <__assert_func+0x2c>)
 800b358:	4605      	mov	r5, r0
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68d8      	ldr	r0, [r3, #12]
 800b35e:	b14c      	cbz	r4, 800b374 <__assert_func+0x24>
 800b360:	4b07      	ldr	r3, [pc, #28]	@ (800b380 <__assert_func+0x30>)
 800b362:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b366:	9100      	str	r1, [sp, #0]
 800b368:	462b      	mov	r3, r5
 800b36a:	4906      	ldr	r1, [pc, #24]	@ (800b384 <__assert_func+0x34>)
 800b36c:	f000 f842 	bl	800b3f4 <fiprintf>
 800b370:	f000 f8d6 	bl	800b520 <abort>
 800b374:	4b04      	ldr	r3, [pc, #16]	@ (800b388 <__assert_func+0x38>)
 800b376:	461c      	mov	r4, r3
 800b378:	e7f3      	b.n	800b362 <__assert_func+0x12>
 800b37a:	bf00      	nop
 800b37c:	20000034 	.word	0x20000034
 800b380:	0800bc0f 	.word	0x0800bc0f
 800b384:	0800bc1c 	.word	0x0800bc1c
 800b388:	0800bc4a 	.word	0x0800bc4a

0800b38c <_calloc_r>:
 800b38c:	b570      	push	{r4, r5, r6, lr}
 800b38e:	fba1 5402 	umull	r5, r4, r1, r2
 800b392:	b934      	cbnz	r4, 800b3a2 <_calloc_r+0x16>
 800b394:	4629      	mov	r1, r5
 800b396:	f7ff f949 	bl	800a62c <_malloc_r>
 800b39a:	4606      	mov	r6, r0
 800b39c:	b928      	cbnz	r0, 800b3aa <_calloc_r+0x1e>
 800b39e:	4630      	mov	r0, r6
 800b3a0:	bd70      	pop	{r4, r5, r6, pc}
 800b3a2:	220c      	movs	r2, #12
 800b3a4:	2600      	movs	r6, #0
 800b3a6:	6002      	str	r2, [r0, #0]
 800b3a8:	e7f9      	b.n	800b39e <_calloc_r+0x12>
 800b3aa:	462a      	mov	r2, r5
 800b3ac:	4621      	mov	r1, r4
 800b3ae:	f7fe f974 	bl	800969a <memset>
 800b3b2:	e7f4      	b.n	800b39e <_calloc_r+0x12>

0800b3b4 <__ascii_mbtowc>:
 800b3b4:	b082      	sub	sp, #8
 800b3b6:	b901      	cbnz	r1, 800b3ba <__ascii_mbtowc+0x6>
 800b3b8:	a901      	add	r1, sp, #4
 800b3ba:	b142      	cbz	r2, 800b3ce <__ascii_mbtowc+0x1a>
 800b3bc:	b14b      	cbz	r3, 800b3d2 <__ascii_mbtowc+0x1e>
 800b3be:	7813      	ldrb	r3, [r2, #0]
 800b3c0:	600b      	str	r3, [r1, #0]
 800b3c2:	7812      	ldrb	r2, [r2, #0]
 800b3c4:	1e10      	subs	r0, r2, #0
 800b3c6:	bf18      	it	ne
 800b3c8:	2001      	movne	r0, #1
 800b3ca:	b002      	add	sp, #8
 800b3cc:	4770      	bx	lr
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	e7fb      	b.n	800b3ca <__ascii_mbtowc+0x16>
 800b3d2:	f06f 0001 	mvn.w	r0, #1
 800b3d6:	e7f8      	b.n	800b3ca <__ascii_mbtowc+0x16>

0800b3d8 <__ascii_wctomb>:
 800b3d8:	4603      	mov	r3, r0
 800b3da:	4608      	mov	r0, r1
 800b3dc:	b141      	cbz	r1, 800b3f0 <__ascii_wctomb+0x18>
 800b3de:	2aff      	cmp	r2, #255	@ 0xff
 800b3e0:	d904      	bls.n	800b3ec <__ascii_wctomb+0x14>
 800b3e2:	228a      	movs	r2, #138	@ 0x8a
 800b3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e8:	601a      	str	r2, [r3, #0]
 800b3ea:	4770      	bx	lr
 800b3ec:	2001      	movs	r0, #1
 800b3ee:	700a      	strb	r2, [r1, #0]
 800b3f0:	4770      	bx	lr
	...

0800b3f4 <fiprintf>:
 800b3f4:	b40e      	push	{r1, r2, r3}
 800b3f6:	b503      	push	{r0, r1, lr}
 800b3f8:	4601      	mov	r1, r0
 800b3fa:	ab03      	add	r3, sp, #12
 800b3fc:	4805      	ldr	r0, [pc, #20]	@ (800b414 <fiprintf+0x20>)
 800b3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b402:	6800      	ldr	r0, [r0, #0]
 800b404:	9301      	str	r3, [sp, #4]
 800b406:	f7ff fd3f 	bl	800ae88 <_vfiprintf_r>
 800b40a:	b002      	add	sp, #8
 800b40c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b410:	b003      	add	sp, #12
 800b412:	4770      	bx	lr
 800b414:	20000034 	.word	0x20000034

0800b418 <__swhatbuf_r>:
 800b418:	b570      	push	{r4, r5, r6, lr}
 800b41a:	460c      	mov	r4, r1
 800b41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b420:	4615      	mov	r5, r2
 800b422:	2900      	cmp	r1, #0
 800b424:	461e      	mov	r6, r3
 800b426:	b096      	sub	sp, #88	@ 0x58
 800b428:	da0c      	bge.n	800b444 <__swhatbuf_r+0x2c>
 800b42a:	89a3      	ldrh	r3, [r4, #12]
 800b42c:	2100      	movs	r1, #0
 800b42e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b432:	bf14      	ite	ne
 800b434:	2340      	movne	r3, #64	@ 0x40
 800b436:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b43a:	2000      	movs	r0, #0
 800b43c:	6031      	str	r1, [r6, #0]
 800b43e:	602b      	str	r3, [r5, #0]
 800b440:	b016      	add	sp, #88	@ 0x58
 800b442:	bd70      	pop	{r4, r5, r6, pc}
 800b444:	466a      	mov	r2, sp
 800b446:	f000 f849 	bl	800b4dc <_fstat_r>
 800b44a:	2800      	cmp	r0, #0
 800b44c:	dbed      	blt.n	800b42a <__swhatbuf_r+0x12>
 800b44e:	9901      	ldr	r1, [sp, #4]
 800b450:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b454:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b458:	4259      	negs	r1, r3
 800b45a:	4159      	adcs	r1, r3
 800b45c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b460:	e7eb      	b.n	800b43a <__swhatbuf_r+0x22>

0800b462 <__smakebuf_r>:
 800b462:	898b      	ldrh	r3, [r1, #12]
 800b464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b466:	079d      	lsls	r5, r3, #30
 800b468:	4606      	mov	r6, r0
 800b46a:	460c      	mov	r4, r1
 800b46c:	d507      	bpl.n	800b47e <__smakebuf_r+0x1c>
 800b46e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b472:	6023      	str	r3, [r4, #0]
 800b474:	6123      	str	r3, [r4, #16]
 800b476:	2301      	movs	r3, #1
 800b478:	6163      	str	r3, [r4, #20]
 800b47a:	b003      	add	sp, #12
 800b47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b47e:	466a      	mov	r2, sp
 800b480:	ab01      	add	r3, sp, #4
 800b482:	f7ff ffc9 	bl	800b418 <__swhatbuf_r>
 800b486:	9f00      	ldr	r7, [sp, #0]
 800b488:	4605      	mov	r5, r0
 800b48a:	4639      	mov	r1, r7
 800b48c:	4630      	mov	r0, r6
 800b48e:	f7ff f8cd 	bl	800a62c <_malloc_r>
 800b492:	b948      	cbnz	r0, 800b4a8 <__smakebuf_r+0x46>
 800b494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b498:	059a      	lsls	r2, r3, #22
 800b49a:	d4ee      	bmi.n	800b47a <__smakebuf_r+0x18>
 800b49c:	f023 0303 	bic.w	r3, r3, #3
 800b4a0:	f043 0302 	orr.w	r3, r3, #2
 800b4a4:	81a3      	strh	r3, [r4, #12]
 800b4a6:	e7e2      	b.n	800b46e <__smakebuf_r+0xc>
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b4ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4b2:	81a3      	strh	r3, [r4, #12]
 800b4b4:	9b01      	ldr	r3, [sp, #4]
 800b4b6:	6020      	str	r0, [r4, #0]
 800b4b8:	b15b      	cbz	r3, 800b4d2 <__smakebuf_r+0x70>
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4c0:	f000 f81e 	bl	800b500 <_isatty_r>
 800b4c4:	b128      	cbz	r0, 800b4d2 <__smakebuf_r+0x70>
 800b4c6:	89a3      	ldrh	r3, [r4, #12]
 800b4c8:	f023 0303 	bic.w	r3, r3, #3
 800b4cc:	f043 0301 	orr.w	r3, r3, #1
 800b4d0:	81a3      	strh	r3, [r4, #12]
 800b4d2:	89a3      	ldrh	r3, [r4, #12]
 800b4d4:	431d      	orrs	r5, r3
 800b4d6:	81a5      	strh	r5, [r4, #12]
 800b4d8:	e7cf      	b.n	800b47a <__smakebuf_r+0x18>
	...

0800b4dc <_fstat_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	2300      	movs	r3, #0
 800b4e0:	4d06      	ldr	r5, [pc, #24]	@ (800b4fc <_fstat_r+0x20>)
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	4608      	mov	r0, r1
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	602b      	str	r3, [r5, #0]
 800b4ea:	f7f6 fdab 	bl	8002044 <_fstat>
 800b4ee:	1c43      	adds	r3, r0, #1
 800b4f0:	d102      	bne.n	800b4f8 <_fstat_r+0x1c>
 800b4f2:	682b      	ldr	r3, [r5, #0]
 800b4f4:	b103      	cbz	r3, 800b4f8 <_fstat_r+0x1c>
 800b4f6:	6023      	str	r3, [r4, #0]
 800b4f8:	bd38      	pop	{r3, r4, r5, pc}
 800b4fa:	bf00      	nop
 800b4fc:	20001ee0 	.word	0x20001ee0

0800b500 <_isatty_r>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	2300      	movs	r3, #0
 800b504:	4d05      	ldr	r5, [pc, #20]	@ (800b51c <_isatty_r+0x1c>)
 800b506:	4604      	mov	r4, r0
 800b508:	4608      	mov	r0, r1
 800b50a:	602b      	str	r3, [r5, #0]
 800b50c:	f7f6 fda9 	bl	8002062 <_isatty>
 800b510:	1c43      	adds	r3, r0, #1
 800b512:	d102      	bne.n	800b51a <_isatty_r+0x1a>
 800b514:	682b      	ldr	r3, [r5, #0]
 800b516:	b103      	cbz	r3, 800b51a <_isatty_r+0x1a>
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	bd38      	pop	{r3, r4, r5, pc}
 800b51c:	20001ee0 	.word	0x20001ee0

0800b520 <abort>:
 800b520:	2006      	movs	r0, #6
 800b522:	b508      	push	{r3, lr}
 800b524:	f000 f82c 	bl	800b580 <raise>
 800b528:	2001      	movs	r0, #1
 800b52a:	f7f6 fd3c 	bl	8001fa6 <_exit>

0800b52e <_raise_r>:
 800b52e:	291f      	cmp	r1, #31
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	4605      	mov	r5, r0
 800b534:	460c      	mov	r4, r1
 800b536:	d904      	bls.n	800b542 <_raise_r+0x14>
 800b538:	2316      	movs	r3, #22
 800b53a:	6003      	str	r3, [r0, #0]
 800b53c:	f04f 30ff 	mov.w	r0, #4294967295
 800b540:	bd38      	pop	{r3, r4, r5, pc}
 800b542:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b544:	b112      	cbz	r2, 800b54c <_raise_r+0x1e>
 800b546:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b54a:	b94b      	cbnz	r3, 800b560 <_raise_r+0x32>
 800b54c:	4628      	mov	r0, r5
 800b54e:	f000 f831 	bl	800b5b4 <_getpid_r>
 800b552:	4622      	mov	r2, r4
 800b554:	4601      	mov	r1, r0
 800b556:	4628      	mov	r0, r5
 800b558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b55c:	f000 b818 	b.w	800b590 <_kill_r>
 800b560:	2b01      	cmp	r3, #1
 800b562:	d00a      	beq.n	800b57a <_raise_r+0x4c>
 800b564:	1c59      	adds	r1, r3, #1
 800b566:	d103      	bne.n	800b570 <_raise_r+0x42>
 800b568:	2316      	movs	r3, #22
 800b56a:	6003      	str	r3, [r0, #0]
 800b56c:	2001      	movs	r0, #1
 800b56e:	e7e7      	b.n	800b540 <_raise_r+0x12>
 800b570:	2100      	movs	r1, #0
 800b572:	4620      	mov	r0, r4
 800b574:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b578:	4798      	blx	r3
 800b57a:	2000      	movs	r0, #0
 800b57c:	e7e0      	b.n	800b540 <_raise_r+0x12>
	...

0800b580 <raise>:
 800b580:	4b02      	ldr	r3, [pc, #8]	@ (800b58c <raise+0xc>)
 800b582:	4601      	mov	r1, r0
 800b584:	6818      	ldr	r0, [r3, #0]
 800b586:	f7ff bfd2 	b.w	800b52e <_raise_r>
 800b58a:	bf00      	nop
 800b58c:	20000034 	.word	0x20000034

0800b590 <_kill_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	2300      	movs	r3, #0
 800b594:	4d06      	ldr	r5, [pc, #24]	@ (800b5b0 <_kill_r+0x20>)
 800b596:	4604      	mov	r4, r0
 800b598:	4608      	mov	r0, r1
 800b59a:	4611      	mov	r1, r2
 800b59c:	602b      	str	r3, [r5, #0]
 800b59e:	f7f6 fcf2 	bl	8001f86 <_kill>
 800b5a2:	1c43      	adds	r3, r0, #1
 800b5a4:	d102      	bne.n	800b5ac <_kill_r+0x1c>
 800b5a6:	682b      	ldr	r3, [r5, #0]
 800b5a8:	b103      	cbz	r3, 800b5ac <_kill_r+0x1c>
 800b5aa:	6023      	str	r3, [r4, #0]
 800b5ac:	bd38      	pop	{r3, r4, r5, pc}
 800b5ae:	bf00      	nop
 800b5b0:	20001ee0 	.word	0x20001ee0

0800b5b4 <_getpid_r>:
 800b5b4:	f7f6 bce0 	b.w	8001f78 <_getpid>

0800b5b8 <atan2f>:
 800b5b8:	f000 b88a 	b.w	800b6d0 <__ieee754_atan2f>

0800b5bc <sqrtf>:
 800b5bc:	b538      	push	{r3, r4, r5, lr}
 800b5be:	4605      	mov	r5, r0
 800b5c0:	f000 f816 	bl	800b5f0 <__ieee754_sqrtf>
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	4604      	mov	r4, r0
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	f7f5 fd81 	bl	80010d0 <__aeabi_fcmpun>
 800b5ce:	b968      	cbnz	r0, 800b5ec <sqrtf+0x30>
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	f7f5 fd54 	bl	8001080 <__aeabi_fcmplt>
 800b5d8:	b140      	cbz	r0, 800b5ec <sqrtf+0x30>
 800b5da:	f7fe f90f 	bl	80097fc <__errno>
 800b5de:	2321      	movs	r3, #33	@ 0x21
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	6003      	str	r3, [r0, #0]
 800b5e4:	4608      	mov	r0, r1
 800b5e6:	f7f5 fc61 	bl	8000eac <__aeabi_fdiv>
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	bd38      	pop	{r3, r4, r5, pc}

0800b5f0 <__ieee754_sqrtf>:
 800b5f0:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800b5f4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	4604      	mov	r4, r0
 800b600:	d30a      	bcc.n	800b618 <__ieee754_sqrtf+0x28>
 800b602:	4601      	mov	r1, r0
 800b604:	f7f5 fb9e 	bl	8000d44 <__aeabi_fmul>
 800b608:	4601      	mov	r1, r0
 800b60a:	4620      	mov	r0, r4
 800b60c:	f7f5 fa92 	bl	8000b34 <__addsf3>
 800b610:	4604      	mov	r4, r0
 800b612:	4620      	mov	r0, r4
 800b614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b618:	2a00      	cmp	r2, #0
 800b61a:	d0fa      	beq.n	800b612 <__ieee754_sqrtf+0x22>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	da06      	bge.n	800b62e <__ieee754_sqrtf+0x3e>
 800b620:	4601      	mov	r1, r0
 800b622:	f7f5 fa85 	bl	8000b30 <__aeabi_fsub>
 800b626:	4601      	mov	r1, r0
 800b628:	f7f5 fc40 	bl	8000eac <__aeabi_fdiv>
 800b62c:	e7f0      	b.n	800b610 <__ieee754_sqrtf+0x20>
 800b62e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800b632:	d03c      	beq.n	800b6ae <__ieee754_sqrtf+0xbe>
 800b634:	15c2      	asrs	r2, r0, #23
 800b636:	2400      	movs	r4, #0
 800b638:	2019      	movs	r0, #25
 800b63a:	4626      	mov	r6, r4
 800b63c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800b640:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b644:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800b648:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b64c:	07d2      	lsls	r2, r2, #31
 800b64e:	bf58      	it	pl
 800b650:	005b      	lslpl	r3, r3, #1
 800b652:	106d      	asrs	r5, r5, #1
 800b654:	005b      	lsls	r3, r3, #1
 800b656:	1872      	adds	r2, r6, r1
 800b658:	429a      	cmp	r2, r3
 800b65a:	bfcf      	iteee	gt
 800b65c:	461a      	movgt	r2, r3
 800b65e:	1856      	addle	r6, r2, r1
 800b660:	1864      	addle	r4, r4, r1
 800b662:	1a9a      	suble	r2, r3, r2
 800b664:	3801      	subs	r0, #1
 800b666:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800b66a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b66e:	d1f2      	bne.n	800b656 <__ieee754_sqrtf+0x66>
 800b670:	b1ba      	cbz	r2, 800b6a2 <__ieee754_sqrtf+0xb2>
 800b672:	4e15      	ldr	r6, [pc, #84]	@ (800b6c8 <__ieee754_sqrtf+0xd8>)
 800b674:	4f15      	ldr	r7, [pc, #84]	@ (800b6cc <__ieee754_sqrtf+0xdc>)
 800b676:	6830      	ldr	r0, [r6, #0]
 800b678:	6839      	ldr	r1, [r7, #0]
 800b67a:	f7f5 fa59 	bl	8000b30 <__aeabi_fsub>
 800b67e:	f8d6 8000 	ldr.w	r8, [r6]
 800b682:	4601      	mov	r1, r0
 800b684:	4640      	mov	r0, r8
 800b686:	f7f5 fd05 	bl	8001094 <__aeabi_fcmple>
 800b68a:	b150      	cbz	r0, 800b6a2 <__ieee754_sqrtf+0xb2>
 800b68c:	6830      	ldr	r0, [r6, #0]
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	f7f5 fa50 	bl	8000b34 <__addsf3>
 800b694:	6836      	ldr	r6, [r6, #0]
 800b696:	4601      	mov	r1, r0
 800b698:	4630      	mov	r0, r6
 800b69a:	f7f5 fcf1 	bl	8001080 <__aeabi_fcmplt>
 800b69e:	b170      	cbz	r0, 800b6be <__ieee754_sqrtf+0xce>
 800b6a0:	3402      	adds	r4, #2
 800b6a2:	1064      	asrs	r4, r4, #1
 800b6a4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800b6a8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800b6ac:	e7b1      	b.n	800b612 <__ieee754_sqrtf+0x22>
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	0218      	lsls	r0, r3, #8
 800b6b2:	460a      	mov	r2, r1
 800b6b4:	f101 0101 	add.w	r1, r1, #1
 800b6b8:	d5f9      	bpl.n	800b6ae <__ieee754_sqrtf+0xbe>
 800b6ba:	4252      	negs	r2, r2
 800b6bc:	e7bb      	b.n	800b636 <__ieee754_sqrtf+0x46>
 800b6be:	3401      	adds	r4, #1
 800b6c0:	f024 0401 	bic.w	r4, r4, #1
 800b6c4:	e7ed      	b.n	800b6a2 <__ieee754_sqrtf+0xb2>
 800b6c6:	bf00      	nop
 800b6c8:	0800be50 	.word	0x0800be50
 800b6cc:	0800be4c 	.word	0x0800be4c

0800b6d0 <__ieee754_atan2f>:
 800b6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d2:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800b6d6:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800b6da:	4603      	mov	r3, r0
 800b6dc:	d805      	bhi.n	800b6ea <__ieee754_atan2f+0x1a>
 800b6de:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800b6e2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b6e6:	4607      	mov	r7, r0
 800b6e8:	d904      	bls.n	800b6f4 <__ieee754_atan2f+0x24>
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7f5 fa22 	bl	8000b34 <__addsf3>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	e010      	b.n	800b716 <__ieee754_atan2f+0x46>
 800b6f4:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800b6f8:	d103      	bne.n	800b702 <__ieee754_atan2f+0x32>
 800b6fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b6fe:	f000 b86f 	b.w	800b7e0 <atanf>
 800b702:	178c      	asrs	r4, r1, #30
 800b704:	f004 0402 	and.w	r4, r4, #2
 800b708:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b70c:	b92a      	cbnz	r2, 800b71a <__ieee754_atan2f+0x4a>
 800b70e:	2c02      	cmp	r4, #2
 800b710:	d04b      	beq.n	800b7aa <__ieee754_atan2f+0xda>
 800b712:	2c03      	cmp	r4, #3
 800b714:	d04b      	beq.n	800b7ae <__ieee754_atan2f+0xde>
 800b716:	4618      	mov	r0, r3
 800b718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b71a:	b91e      	cbnz	r6, 800b724 <__ieee754_atan2f+0x54>
 800b71c:	2f00      	cmp	r7, #0
 800b71e:	db4c      	blt.n	800b7ba <__ieee754_atan2f+0xea>
 800b720:	4b27      	ldr	r3, [pc, #156]	@ (800b7c0 <__ieee754_atan2f+0xf0>)
 800b722:	e7f8      	b.n	800b716 <__ieee754_atan2f+0x46>
 800b724:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800b728:	d10e      	bne.n	800b748 <__ieee754_atan2f+0x78>
 800b72a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b72e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b732:	d105      	bne.n	800b740 <__ieee754_atan2f+0x70>
 800b734:	2c02      	cmp	r4, #2
 800b736:	d83c      	bhi.n	800b7b2 <__ieee754_atan2f+0xe2>
 800b738:	4b22      	ldr	r3, [pc, #136]	@ (800b7c4 <__ieee754_atan2f+0xf4>)
 800b73a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b73e:	e7ea      	b.n	800b716 <__ieee754_atan2f+0x46>
 800b740:	2c02      	cmp	r4, #2
 800b742:	d838      	bhi.n	800b7b6 <__ieee754_atan2f+0xe6>
 800b744:	4b20      	ldr	r3, [pc, #128]	@ (800b7c8 <__ieee754_atan2f+0xf8>)
 800b746:	e7f8      	b.n	800b73a <__ieee754_atan2f+0x6a>
 800b748:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b74c:	d0e6      	beq.n	800b71c <__ieee754_atan2f+0x4c>
 800b74e:	1b92      	subs	r2, r2, r6
 800b750:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800b754:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800b758:	da17      	bge.n	800b78a <__ieee754_atan2f+0xba>
 800b75a:	2900      	cmp	r1, #0
 800b75c:	da01      	bge.n	800b762 <__ieee754_atan2f+0x92>
 800b75e:	303c      	adds	r0, #60	@ 0x3c
 800b760:	db15      	blt.n	800b78e <__ieee754_atan2f+0xbe>
 800b762:	4618      	mov	r0, r3
 800b764:	f7f5 fba2 	bl	8000eac <__aeabi_fdiv>
 800b768:	f000 f946 	bl	800b9f8 <fabsf>
 800b76c:	f000 f838 	bl	800b7e0 <atanf>
 800b770:	4603      	mov	r3, r0
 800b772:	2c01      	cmp	r4, #1
 800b774:	d00d      	beq.n	800b792 <__ieee754_atan2f+0xc2>
 800b776:	2c02      	cmp	r4, #2
 800b778:	d00e      	beq.n	800b798 <__ieee754_atan2f+0xc8>
 800b77a:	2c00      	cmp	r4, #0
 800b77c:	d0cb      	beq.n	800b716 <__ieee754_atan2f+0x46>
 800b77e:	4913      	ldr	r1, [pc, #76]	@ (800b7cc <__ieee754_atan2f+0xfc>)
 800b780:	4618      	mov	r0, r3
 800b782:	f7f5 f9d7 	bl	8000b34 <__addsf3>
 800b786:	4912      	ldr	r1, [pc, #72]	@ (800b7d0 <__ieee754_atan2f+0x100>)
 800b788:	e00c      	b.n	800b7a4 <__ieee754_atan2f+0xd4>
 800b78a:	4b0d      	ldr	r3, [pc, #52]	@ (800b7c0 <__ieee754_atan2f+0xf0>)
 800b78c:	e7f1      	b.n	800b772 <__ieee754_atan2f+0xa2>
 800b78e:	2300      	movs	r3, #0
 800b790:	e7ef      	b.n	800b772 <__ieee754_atan2f+0xa2>
 800b792:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b796:	e7be      	b.n	800b716 <__ieee754_atan2f+0x46>
 800b798:	490c      	ldr	r1, [pc, #48]	@ (800b7cc <__ieee754_atan2f+0xfc>)
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7f5 f9ca 	bl	8000b34 <__addsf3>
 800b7a0:	4601      	mov	r1, r0
 800b7a2:	480b      	ldr	r0, [pc, #44]	@ (800b7d0 <__ieee754_atan2f+0x100>)
 800b7a4:	f7f5 f9c4 	bl	8000b30 <__aeabi_fsub>
 800b7a8:	e7a2      	b.n	800b6f0 <__ieee754_atan2f+0x20>
 800b7aa:	4b09      	ldr	r3, [pc, #36]	@ (800b7d0 <__ieee754_atan2f+0x100>)
 800b7ac:	e7b3      	b.n	800b716 <__ieee754_atan2f+0x46>
 800b7ae:	4b09      	ldr	r3, [pc, #36]	@ (800b7d4 <__ieee754_atan2f+0x104>)
 800b7b0:	e7b1      	b.n	800b716 <__ieee754_atan2f+0x46>
 800b7b2:	4b09      	ldr	r3, [pc, #36]	@ (800b7d8 <__ieee754_atan2f+0x108>)
 800b7b4:	e7af      	b.n	800b716 <__ieee754_atan2f+0x46>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	e7ad      	b.n	800b716 <__ieee754_atan2f+0x46>
 800b7ba:	4b08      	ldr	r3, [pc, #32]	@ (800b7dc <__ieee754_atan2f+0x10c>)
 800b7bc:	e7ab      	b.n	800b716 <__ieee754_atan2f+0x46>
 800b7be:	bf00      	nop
 800b7c0:	3fc90fdb 	.word	0x3fc90fdb
 800b7c4:	0800be60 	.word	0x0800be60
 800b7c8:	0800be54 	.word	0x0800be54
 800b7cc:	33bbbd2e 	.word	0x33bbbd2e
 800b7d0:	40490fdb 	.word	0x40490fdb
 800b7d4:	c0490fdb 	.word	0xc0490fdb
 800b7d8:	3f490fdb 	.word	0x3f490fdb
 800b7dc:	bfc90fdb 	.word	0xbfc90fdb

0800b7e0 <atanf>:
 800b7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e4:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800b7e8:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	4680      	mov	r8, r0
 800b7f0:	d30e      	bcc.n	800b810 <atanf+0x30>
 800b7f2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b7f6:	d904      	bls.n	800b802 <atanf+0x22>
 800b7f8:	4601      	mov	r1, r0
 800b7fa:	f7f5 f99b 	bl	8000b34 <__addsf3>
 800b7fe:	4604      	mov	r4, r0
 800b800:	e003      	b.n	800b80a <atanf+0x2a>
 800b802:	2800      	cmp	r0, #0
 800b804:	f340 80ce 	ble.w	800b9a4 <atanf+0x1c4>
 800b808:	4c67      	ldr	r4, [pc, #412]	@ (800b9a8 <atanf+0x1c8>)
 800b80a:	4620      	mov	r0, r4
 800b80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b810:	4b66      	ldr	r3, [pc, #408]	@ (800b9ac <atanf+0x1cc>)
 800b812:	429d      	cmp	r5, r3
 800b814:	d80e      	bhi.n	800b834 <atanf+0x54>
 800b816:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800b81a:	d208      	bcs.n	800b82e <atanf+0x4e>
 800b81c:	4964      	ldr	r1, [pc, #400]	@ (800b9b0 <atanf+0x1d0>)
 800b81e:	f7f5 f989 	bl	8000b34 <__addsf3>
 800b822:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b826:	f7f5 fc49 	bl	80010bc <__aeabi_fcmpgt>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d1ed      	bne.n	800b80a <atanf+0x2a>
 800b82e:	f04f 36ff 	mov.w	r6, #4294967295
 800b832:	e01c      	b.n	800b86e <atanf+0x8e>
 800b834:	f000 f8e0 	bl	800b9f8 <fabsf>
 800b838:	4b5e      	ldr	r3, [pc, #376]	@ (800b9b4 <atanf+0x1d4>)
 800b83a:	4604      	mov	r4, r0
 800b83c:	429d      	cmp	r5, r3
 800b83e:	d87c      	bhi.n	800b93a <atanf+0x15a>
 800b840:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800b844:	429d      	cmp	r5, r3
 800b846:	d867      	bhi.n	800b918 <atanf+0x138>
 800b848:	4601      	mov	r1, r0
 800b84a:	f7f5 f973 	bl	8000b34 <__addsf3>
 800b84e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b852:	f7f5 f96d 	bl	8000b30 <__aeabi_fsub>
 800b856:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b85a:	4605      	mov	r5, r0
 800b85c:	4620      	mov	r0, r4
 800b85e:	f7f5 f969 	bl	8000b34 <__addsf3>
 800b862:	4601      	mov	r1, r0
 800b864:	4628      	mov	r0, r5
 800b866:	f7f5 fb21 	bl	8000eac <__aeabi_fdiv>
 800b86a:	2600      	movs	r6, #0
 800b86c:	4604      	mov	r4, r0
 800b86e:	4621      	mov	r1, r4
 800b870:	4620      	mov	r0, r4
 800b872:	f7f5 fa67 	bl	8000d44 <__aeabi_fmul>
 800b876:	4601      	mov	r1, r0
 800b878:	4607      	mov	r7, r0
 800b87a:	f7f5 fa63 	bl	8000d44 <__aeabi_fmul>
 800b87e:	4605      	mov	r5, r0
 800b880:	494d      	ldr	r1, [pc, #308]	@ (800b9b8 <atanf+0x1d8>)
 800b882:	f7f5 fa5f 	bl	8000d44 <__aeabi_fmul>
 800b886:	494d      	ldr	r1, [pc, #308]	@ (800b9bc <atanf+0x1dc>)
 800b888:	f7f5 f954 	bl	8000b34 <__addsf3>
 800b88c:	4629      	mov	r1, r5
 800b88e:	f7f5 fa59 	bl	8000d44 <__aeabi_fmul>
 800b892:	494b      	ldr	r1, [pc, #300]	@ (800b9c0 <atanf+0x1e0>)
 800b894:	f7f5 f94e 	bl	8000b34 <__addsf3>
 800b898:	4629      	mov	r1, r5
 800b89a:	f7f5 fa53 	bl	8000d44 <__aeabi_fmul>
 800b89e:	4949      	ldr	r1, [pc, #292]	@ (800b9c4 <atanf+0x1e4>)
 800b8a0:	f7f5 f948 	bl	8000b34 <__addsf3>
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	f7f5 fa4d 	bl	8000d44 <__aeabi_fmul>
 800b8aa:	4947      	ldr	r1, [pc, #284]	@ (800b9c8 <atanf+0x1e8>)
 800b8ac:	f7f5 f942 	bl	8000b34 <__addsf3>
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	f7f5 fa47 	bl	8000d44 <__aeabi_fmul>
 800b8b6:	4945      	ldr	r1, [pc, #276]	@ (800b9cc <atanf+0x1ec>)
 800b8b8:	f7f5 f93c 	bl	8000b34 <__addsf3>
 800b8bc:	4639      	mov	r1, r7
 800b8be:	f7f5 fa41 	bl	8000d44 <__aeabi_fmul>
 800b8c2:	4943      	ldr	r1, [pc, #268]	@ (800b9d0 <atanf+0x1f0>)
 800b8c4:	4607      	mov	r7, r0
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	f7f5 fa3c 	bl	8000d44 <__aeabi_fmul>
 800b8cc:	4941      	ldr	r1, [pc, #260]	@ (800b9d4 <atanf+0x1f4>)
 800b8ce:	f7f5 f92f 	bl	8000b30 <__aeabi_fsub>
 800b8d2:	4629      	mov	r1, r5
 800b8d4:	f7f5 fa36 	bl	8000d44 <__aeabi_fmul>
 800b8d8:	493f      	ldr	r1, [pc, #252]	@ (800b9d8 <atanf+0x1f8>)
 800b8da:	f7f5 f929 	bl	8000b30 <__aeabi_fsub>
 800b8de:	4629      	mov	r1, r5
 800b8e0:	f7f5 fa30 	bl	8000d44 <__aeabi_fmul>
 800b8e4:	493d      	ldr	r1, [pc, #244]	@ (800b9dc <atanf+0x1fc>)
 800b8e6:	f7f5 f923 	bl	8000b30 <__aeabi_fsub>
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	f7f5 fa2a 	bl	8000d44 <__aeabi_fmul>
 800b8f0:	493b      	ldr	r1, [pc, #236]	@ (800b9e0 <atanf+0x200>)
 800b8f2:	f7f5 f91d 	bl	8000b30 <__aeabi_fsub>
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	f7f5 fa24 	bl	8000d44 <__aeabi_fmul>
 800b8fc:	4601      	mov	r1, r0
 800b8fe:	4638      	mov	r0, r7
 800b900:	f7f5 f918 	bl	8000b34 <__addsf3>
 800b904:	4621      	mov	r1, r4
 800b906:	f7f5 fa1d 	bl	8000d44 <__aeabi_fmul>
 800b90a:	1c73      	adds	r3, r6, #1
 800b90c:	4601      	mov	r1, r0
 800b90e:	d133      	bne.n	800b978 <atanf+0x198>
 800b910:	4620      	mov	r0, r4
 800b912:	f7f5 f90d 	bl	8000b30 <__aeabi_fsub>
 800b916:	e772      	b.n	800b7fe <atanf+0x1e>
 800b918:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b91c:	f7f5 f908 	bl	8000b30 <__aeabi_fsub>
 800b920:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b924:	4605      	mov	r5, r0
 800b926:	4620      	mov	r0, r4
 800b928:	f7f5 f904 	bl	8000b34 <__addsf3>
 800b92c:	4601      	mov	r1, r0
 800b92e:	4628      	mov	r0, r5
 800b930:	f7f5 fabc 	bl	8000eac <__aeabi_fdiv>
 800b934:	2601      	movs	r6, #1
 800b936:	4604      	mov	r4, r0
 800b938:	e799      	b.n	800b86e <atanf+0x8e>
 800b93a:	4b2a      	ldr	r3, [pc, #168]	@ (800b9e4 <atanf+0x204>)
 800b93c:	429d      	cmp	r5, r3
 800b93e:	d814      	bhi.n	800b96a <atanf+0x18a>
 800b940:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800b944:	f7f5 f8f4 	bl	8000b30 <__aeabi_fsub>
 800b948:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800b94c:	4605      	mov	r5, r0
 800b94e:	4620      	mov	r0, r4
 800b950:	f7f5 f9f8 	bl	8000d44 <__aeabi_fmul>
 800b954:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b958:	f7f5 f8ec 	bl	8000b34 <__addsf3>
 800b95c:	4601      	mov	r1, r0
 800b95e:	4628      	mov	r0, r5
 800b960:	f7f5 faa4 	bl	8000eac <__aeabi_fdiv>
 800b964:	2602      	movs	r6, #2
 800b966:	4604      	mov	r4, r0
 800b968:	e781      	b.n	800b86e <atanf+0x8e>
 800b96a:	4601      	mov	r1, r0
 800b96c:	481e      	ldr	r0, [pc, #120]	@ (800b9e8 <atanf+0x208>)
 800b96e:	f7f5 fa9d 	bl	8000eac <__aeabi_fdiv>
 800b972:	2603      	movs	r6, #3
 800b974:	4604      	mov	r4, r0
 800b976:	e77a      	b.n	800b86e <atanf+0x8e>
 800b978:	4b1c      	ldr	r3, [pc, #112]	@ (800b9ec <atanf+0x20c>)
 800b97a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b97e:	f7f5 f8d7 	bl	8000b30 <__aeabi_fsub>
 800b982:	4621      	mov	r1, r4
 800b984:	f7f5 f8d4 	bl	8000b30 <__aeabi_fsub>
 800b988:	4b19      	ldr	r3, [pc, #100]	@ (800b9f0 <atanf+0x210>)
 800b98a:	4601      	mov	r1, r0
 800b98c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b990:	f7f5 f8ce 	bl	8000b30 <__aeabi_fsub>
 800b994:	f1b8 0f00 	cmp.w	r8, #0
 800b998:	4604      	mov	r4, r0
 800b99a:	f6bf af36 	bge.w	800b80a <atanf+0x2a>
 800b99e:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800b9a2:	e732      	b.n	800b80a <atanf+0x2a>
 800b9a4:	4c13      	ldr	r4, [pc, #76]	@ (800b9f4 <atanf+0x214>)
 800b9a6:	e730      	b.n	800b80a <atanf+0x2a>
 800b9a8:	3fc90fdb 	.word	0x3fc90fdb
 800b9ac:	3edfffff 	.word	0x3edfffff
 800b9b0:	7149f2ca 	.word	0x7149f2ca
 800b9b4:	3f97ffff 	.word	0x3f97ffff
 800b9b8:	3c8569d7 	.word	0x3c8569d7
 800b9bc:	3d4bda59 	.word	0x3d4bda59
 800b9c0:	3d886b35 	.word	0x3d886b35
 800b9c4:	3dba2e6e 	.word	0x3dba2e6e
 800b9c8:	3e124925 	.word	0x3e124925
 800b9cc:	3eaaaaab 	.word	0x3eaaaaab
 800b9d0:	bd15a221 	.word	0xbd15a221
 800b9d4:	3d6ef16b 	.word	0x3d6ef16b
 800b9d8:	3d9d8795 	.word	0x3d9d8795
 800b9dc:	3de38e38 	.word	0x3de38e38
 800b9e0:	3e4ccccd 	.word	0x3e4ccccd
 800b9e4:	401bffff 	.word	0x401bffff
 800b9e8:	bf800000 	.word	0xbf800000
 800b9ec:	0800be6c 	.word	0x0800be6c
 800b9f0:	0800be7c 	.word	0x0800be7c
 800b9f4:	bfc90fdb 	.word	0xbfc90fdb

0800b9f8 <fabsf>:
 800b9f8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b9fc:	4770      	bx	lr
	...

0800ba00 <_init>:
 800ba00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba02:	bf00      	nop
 800ba04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba06:	bc08      	pop	{r3}
 800ba08:	469e      	mov	lr, r3
 800ba0a:	4770      	bx	lr

0800ba0c <_fini>:
 800ba0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba0e:	bf00      	nop
 800ba10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba12:	bc08      	pop	{r3}
 800ba14:	469e      	mov	lr, r3
 800ba16:	4770      	bx	lr
